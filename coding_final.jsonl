{"pid": "coding_1", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()", "image_1": "code_choose_vis/1/a.png", "image_2": "code_choose_vis/1/b.png", "image_3": "code_choose_vis/1/c.png", "image_4": "code_choose_vis/1/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_2", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()", "image_1": "code_choose_vis/2/a.png", "image_2": "code_choose_vis/2/b.png", "image_3": "code_choose_vis/2/c.png", "image_4": "code_choose_vis/2/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_3", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()", "image_1": "code_choose_vis/3/a.png", "image_2": "code_choose_vis/3/b.png", "image_3": "code_choose_vis/3/c.png", "image_4": "code_choose_vis/3/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_4", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()", "image_1": "code_choose_vis/4/a.png", "image_2": "code_choose_vis/4/b.png", "image_3": "code_choose_vis/4/c.png", "image_4": "code_choose_vis/4/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_5", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/5/a.png", "image_2": "code_choose_vis/5/b.png", "image_3": "code_choose_vis/5/c.png", "image_4": "code_choose_vis/5/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_6", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/6/a.png", "image_2": "code_choose_vis/6/b.png", "image_3": "code_choose_vis/6/c.png", "image_4": "code_choose_vis/6/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_7", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/7/a.png", "image_2": "code_choose_vis/7/b.png", "image_3": "code_choose_vis/7/c.png", "image_4": "code_choose_vis/7/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_8", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/8/a.png", "image_2": "code_choose_vis/8/b.png", "image_3": "code_choose_vis/8/c.png", "image_4": "code_choose_vis/8/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_9", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/9/a.png", "image_2": "code_choose_vis/9/b.png", "image_3": "code_choose_vis/9/c.png", "image_4": "code_choose_vis/9/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_10", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/10/a.png", "image_2": "code_choose_vis/10/b.png", "image_3": "code_choose_vis/10/c.png", "image_4": "code_choose_vis/10/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_11", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/11/a.png", "image_2": "code_choose_vis/11/b.png", "image_3": "code_choose_vis/11/c.png", "image_4": "code_choose_vis/11/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_12", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/12/a.png", "image_2": "code_choose_vis/12/b.png", "image_3": "code_choose_vis/12/c.png", "image_4": "code_choose_vis/12/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_13", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "image_1": "code_choose_vis/13/a.png", "image_2": "code_choose_vis/13/b.png", "image_3": "code_choose_vis/13/c.png", "image_4": "code_choose_vis/13/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_14", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "image_1": "code_choose_vis/14/a.png", "image_2": "code_choose_vis/14/b.png", "image_3": "code_choose_vis/14/c.png", "image_4": "code_choose_vis/14/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_15", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "image_1": "code_choose_vis/15/a.png", "image_2": "code_choose_vis/15/b.png", "image_3": "code_choose_vis/15/c.png", "image_4": "code_choose_vis/15/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_16", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()", "image_1": "code_choose_vis/16/a.png", "image_2": "code_choose_vis/16/b.png", "image_3": "code_choose_vis/16/c.png", "image_4": "code_choose_vis/16/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_17", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "image_1": "code_choose_vis/17/a.png", "image_2": "code_choose_vis/17/b.png", "image_3": "code_choose_vis/17/c.png", "image_4": "code_choose_vis/17/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_18", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "image_1": "code_choose_vis/18/a.png", "image_2": "code_choose_vis/18/b.png", "image_3": "code_choose_vis/18/c.png", "image_4": "code_choose_vis/18/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_19", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()", "image_1": "code_choose_vis/19/a.png", "image_2": "code_choose_vis/19/b.png", "image_3": "code_choose_vis/19/c.png", "image_4": "code_choose_vis/19/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_20", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()", "image_1": "code_choose_vis/20/a.png", "image_2": "code_choose_vis/20/b.png", "image_3": "code_choose_vis/20/c.png", "image_4": "code_choose_vis/20/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_21", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/21/a.png", "image_2": "code_choose_vis/21/b.png", "image_3": "code_choose_vis/21/c.png", "image_4": "code_choose_vis/21/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_22", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/22/a.png", "image_2": "code_choose_vis/22/b.png", "image_3": "code_choose_vis/22/c.png", "image_4": "code_choose_vis/22/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_23", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/23/a.png", "image_2": "code_choose_vis/23/b.png", "image_3": "code_choose_vis/23/c.png", "image_4": "code_choose_vis/23/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_24", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/24/a.png", "image_2": "code_choose_vis/24/b.png", "image_3": "code_choose_vis/24/c.png", "image_4": "code_choose_vis/24/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_25", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/25/a.png", "image_2": "code_choose_vis/25/b.png", "image_3": "code_choose_vis/25/c.png", "image_4": "code_choose_vis/25/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_26", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()", "image_1": "code_choose_vis/26/a.png", "image_2": "code_choose_vis/26/b.png", "image_3": "code_choose_vis/26/c.png", "image_4": "code_choose_vis/26/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_27", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/27/a.png", "image_2": "code_choose_vis/27/b.png", "image_3": "code_choose_vis/27/c.png", "image_4": "code_choose_vis/27/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_28", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/28/a.png", "image_2": "code_choose_vis/28/b.png", "image_3": "code_choose_vis/28/c.png", "image_4": "code_choose_vis/28/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_29", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/29/a.png", "image_2": "code_choose_vis/29/b.png", "image_3": "code_choose_vis/29/c.png", "image_4": "code_choose_vis/29/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_30", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/30/a.png", "image_2": "code_choose_vis/30/b.png", "image_3": "code_choose_vis/30/c.png", "image_4": "code_choose_vis/30/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_31", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/31/a.png", "image_2": "code_choose_vis/31/b.png", "image_3": "code_choose_vis/31/c.png", "image_4": "code_choose_vis/31/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_32", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/32/a.png", "image_2": "code_choose_vis/32/b.png", "image_3": "code_choose_vis/32/c.png", "image_4": "code_choose_vis/32/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_33", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/33/a.png", "image_2": "code_choose_vis/33/b.png", "image_3": "code_choose_vis/33/c.png", "image_4": "code_choose_vis/33/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_34", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/34/a.png", "image_2": "code_choose_vis/34/b.png", "image_3": "code_choose_vis/34/c.png", "image_4": "code_choose_vis/34/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_35", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/35/a.png", "image_2": "code_choose_vis/35/b.png", "image_3": "code_choose_vis/35/c.png", "image_4": "code_choose_vis/35/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_36", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/36/a.png", "image_2": "code_choose_vis/36/b.png", "image_3": "code_choose_vis/36/c.png", "image_4": "code_choose_vis/36/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_37", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()", "image_1": "code_choose_vis/37/a.png", "image_2": "code_choose_vis/37/b.png", "image_3": "code_choose_vis/37/c.png", "image_4": "code_choose_vis/37/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_38", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()", "image_1": "code_choose_vis/38/a.png", "image_2": "code_choose_vis/38/b.png", "image_3": "code_choose_vis/38/c.png", "image_4": "code_choose_vis/38/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_39", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()", "image_1": "code_choose_vis/39/a.png", "image_2": "code_choose_vis/39/b.png", "image_3": "code_choose_vis/39/c.png", "image_4": "code_choose_vis/39/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_40", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()", "image_1": "code_choose_vis/40/a.png", "image_2": "code_choose_vis/40/b.png", "image_3": "code_choose_vis/40/c.png", "image_4": "code_choose_vis/40/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_41", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "image_1": "code_choose_vis/41/a.png", "image_2": "code_choose_vis/41/b.png", "image_3": "code_choose_vis/41/c.png", "image_4": "code_choose_vis/41/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_42", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "image_1": "code_choose_vis/42/a.png", "image_2": "code_choose_vis/42/b.png", "image_3": "code_choose_vis/42/c.png", "image_4": "code_choose_vis/42/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_43", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "image_1": "code_choose_vis/43/a.png", "image_2": "code_choose_vis/43/b.png", "image_3": "code_choose_vis/43/c.png", "image_4": "code_choose_vis/43/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_44", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "image_1": "code_choose_vis/44/a.png", "image_2": "code_choose_vis/44/b.png", "image_3": "code_choose_vis/44/c.png", "image_4": "code_choose_vis/44/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_45", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "image_1": "code_choose_vis/45/a.png", "image_2": "code_choose_vis/45/b.png", "image_3": "code_choose_vis/45/c.png", "image_4": "code_choose_vis/45/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_46", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "image_1": "code_choose_vis/46/a.png", "image_2": "code_choose_vis/46/b.png", "image_3": "code_choose_vis/46/c.png", "image_4": "code_choose_vis/46/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_47", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()", "image_1": "code_choose_vis/47/a.png", "image_2": "code_choose_vis/47/b.png", "image_3": "code_choose_vis/47/c.png", "image_4": "code_choose_vis/47/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_48", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()", "image_1": "code_choose_vis/48/a.png", "image_2": "code_choose_vis/48/b.png", "image_3": "code_choose_vis/48/c.png", "image_4": "code_choose_vis/48/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_49", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/49/a.png", "image_2": "code_choose_vis/49/b.png", "image_3": "code_choose_vis/49/c.png", "image_4": "code_choose_vis/49/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_50", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/50/a.png", "image_2": "code_choose_vis/50/b.png", "image_3": "code_choose_vis/50/c.png", "image_4": "code_choose_vis/50/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_51", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/51/a.png", "image_2": "code_choose_vis/51/b.png", "image_3": "code_choose_vis/51/c.png", "image_4": "code_choose_vis/51/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_52", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()", "image_1": "code_choose_vis/52/a.png", "image_2": "code_choose_vis/52/b.png", "image_3": "code_choose_vis/52/c.png", "image_4": "code_choose_vis/52/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_53", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/53/a.png", "image_2": "code_choose_vis/53/b.png", "image_3": "code_choose_vis/53/c.png", "image_4": "code_choose_vis/53/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_54", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/54/a.png", "image_2": "code_choose_vis/54/b.png", "image_3": "code_choose_vis/54/c.png", "image_4": "code_choose_vis/54/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_55", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/55/a.png", "image_2": "code_choose_vis/55/b.png", "image_3": "code_choose_vis/55/c.png", "image_4": "code_choose_vis/55/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_56", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/56/a.png", "image_2": "code_choose_vis/56/b.png", "image_3": "code_choose_vis/56/c.png", "image_4": "code_choose_vis/56/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_57", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()", "image_1": "code_choose_vis/57/a.png", "image_2": "code_choose_vis/57/b.png", "image_3": "code_choose_vis/57/c.png", "image_4": "code_choose_vis/57/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_58", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()", "image_1": "code_choose_vis/58/a.png", "image_2": "code_choose_vis/58/b.png", "image_3": "code_choose_vis/58/c.png", "image_4": "code_choose_vis/58/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_59", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()", "image_1": "code_choose_vis/59/a.png", "image_2": "code_choose_vis/59/b.png", "image_3": "code_choose_vis/59/c.png", "image_4": "code_choose_vis/59/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_60", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()", "image_1": "code_choose_vis/60/a.png", "image_2": "code_choose_vis/60/b.png", "image_3": "code_choose_vis/60/c.png", "image_4": "code_choose_vis/60/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_61", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/61/a.png", "image_2": "code_choose_vis/61/b.png", "image_3": "code_choose_vis/61/c.png", "image_4": "code_choose_vis/61/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_62", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()", "image_1": "code_choose_vis/62/a.png", "image_2": "code_choose_vis/62/b.png", "image_3": "code_choose_vis/62/c.png", "image_4": "code_choose_vis/62/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_63", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()", "image_1": "code_choose_vis/63/a.png", "image_2": "code_choose_vis/63/b.png", "image_3": "code_choose_vis/63/c.png", "image_4": "code_choose_vis/63/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_64", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()", "image_1": "code_choose_vis/64/a.png", "image_2": "code_choose_vis/64/b.png", "image_3": "code_choose_vis/64/c.png", "image_4": "code_choose_vis/64/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_65", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "image_1": "code_choose_vis/65/a.png", "image_2": "code_choose_vis/65/b.png", "image_3": "code_choose_vis/65/c.png", "image_4": "code_choose_vis/65/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_66", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "image_1": "code_choose_vis/66/a.png", "image_2": "code_choose_vis/66/b.png", "image_3": "code_choose_vis/66/c.png", "image_4": "code_choose_vis/66/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_67", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "image_1": "code_choose_vis/67/a.png", "image_2": "code_choose_vis/67/b.png", "image_3": "code_choose_vis/67/c.png", "image_4": "code_choose_vis/67/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_68", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "image_1": "code_choose_vis/68/a.png", "image_2": "code_choose_vis/68/b.png", "image_3": "code_choose_vis/68/c.png", "image_4": "code_choose_vis/68/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_69", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()", "image_1": "code_choose_vis/69/a.png", "image_2": "code_choose_vis/69/b.png", "image_3": "code_choose_vis/69/c.png", "image_4": "code_choose_vis/69/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_70", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()", "image_1": "code_choose_vis/70/a.png", "image_2": "code_choose_vis/70/b.png", "image_3": "code_choose_vis/70/c.png", "image_4": "code_choose_vis/70/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_71", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()", "image_1": "code_choose_vis/71/a.png", "image_2": "code_choose_vis/71/b.png", "image_3": "code_choose_vis/71/c.png", "image_4": "code_choose_vis/71/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_72", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()", "image_1": "code_choose_vis/72/a.png", "image_2": "code_choose_vis/72/b.png", "image_3": "code_choose_vis/72/c.png", "image_4": "code_choose_vis/72/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_73", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "image_1": "code_choose_vis/73/a.png", "image_2": "code_choose_vis/73/b.png", "image_3": "code_choose_vis/73/c.png", "image_4": "code_choose_vis/73/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_74", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "image_1": "code_choose_vis/74/a.png", "image_2": "code_choose_vis/74/b.png", "image_3": "code_choose_vis/74/c.png", "image_4": "code_choose_vis/74/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_75", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "image_1": "code_choose_vis/75/a.png", "image_2": "code_choose_vis/75/b.png", "image_3": "code_choose_vis/75/c.png", "image_4": "code_choose_vis/75/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_76", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "image_1": "code_choose_vis/76/a.png", "image_2": "code_choose_vis/76/b.png", "image_3": "code_choose_vis/76/c.png", "image_4": "code_choose_vis/76/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_77", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/77/a.png", "image_2": "code_choose_vis/77/b.png", "image_3": "code_choose_vis/77/c.png", "image_4": "code_choose_vis/77/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_78", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/78/a.png", "image_2": "code_choose_vis/78/b.png", "image_3": "code_choose_vis/78/c.png", "image_4": "code_choose_vis/78/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_79", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/79/a.png", "image_2": "code_choose_vis/79/b.png", "image_3": "code_choose_vis/79/c.png", "image_4": "code_choose_vis/79/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_80", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/80/a.png", "image_2": "code_choose_vis/80/b.png", "image_3": "code_choose_vis/80/c.png", "image_4": "code_choose_vis/80/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_81", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()", "image_1": "code_choose_vis/81/a.png", "image_2": "code_choose_vis/81/b.png", "image_3": "code_choose_vis/81/c.png", "image_4": "code_choose_vis/81/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_82", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()", "image_1": "code_choose_vis/82/a.png", "image_2": "code_choose_vis/82/b.png", "image_3": "code_choose_vis/82/c.png", "image_4": "code_choose_vis/82/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_83", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()", "image_1": "code_choose_vis/83/a.png", "image_2": "code_choose_vis/83/b.png", "image_3": "code_choose_vis/83/c.png", "image_4": "code_choose_vis/83/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_84", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()", "image_1": "code_choose_vis/84/a.png", "image_2": "code_choose_vis/84/b.png", "image_3": "code_choose_vis/84/c.png", "image_4": "code_choose_vis/84/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_85", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "image_1": "code_choose_vis/85/a.png", "image_2": "code_choose_vis/85/b.png", "image_3": "code_choose_vis/85/c.png", "image_4": "code_choose_vis/85/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_86", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()", "image_1": "code_choose_vis/86/a.png", "image_2": "code_choose_vis/86/b.png", "image_3": "code_choose_vis/86/c.png", "image_4": "code_choose_vis/86/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_87", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()", "image_1": "code_choose_vis/87/a.png", "image_2": "code_choose_vis/87/b.png", "image_3": "code_choose_vis/87/c.png", "image_4": "code_choose_vis/87/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_88", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "image_1": "code_choose_vis/88/a.png", "image_2": "code_choose_vis/88/b.png", "image_3": "code_choose_vis/88/c.png", "image_4": "code_choose_vis/88/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_89", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "image_1": "code_choose_vis/89/a.png", "image_2": "code_choose_vis/89/b.png", "image_3": "code_choose_vis/89/c.png", "image_4": "code_choose_vis/89/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_90", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "image_1": "code_choose_vis/90/a.png", "image_2": "code_choose_vis/90/b.png", "image_3": "code_choose_vis/90/c.png", "image_4": "code_choose_vis/90/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_91", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/91/a.png", "image_2": "code_choose_vis/91/b.png", "image_3": "code_choose_vis/91/c.png", "image_4": "code_choose_vis/91/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_92", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "image_1": "code_choose_vis/92/a.png", "image_2": "code_choose_vis/92/b.png", "image_3": "code_choose_vis/92/c.png", "image_4": "code_choose_vis/92/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_93", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "image_1": "code_choose_vis/93/a.png", "image_2": "code_choose_vis/93/b.png", "image_3": "code_choose_vis/93/c.png", "image_4": "code_choose_vis/93/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_94", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "image_1": "code_choose_vis/94/a.png", "image_2": "code_choose_vis/94/b.png", "image_3": "code_choose_vis/94/c.png", "image_4": "code_choose_vis/94/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_95", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "image_1": "code_choose_vis/95/a.png", "image_2": "code_choose_vis/95/b.png", "image_3": "code_choose_vis/95/c.png", "image_4": "code_choose_vis/95/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_96", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "image_1": "code_choose_vis/96/a.png", "image_2": "code_choose_vis/96/b.png", "image_3": "code_choose_vis/96/c.png", "image_4": "code_choose_vis/96/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_97", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "image_1": "code_choose_vis/97/a.png", "image_2": "code_choose_vis/97/b.png", "image_3": "code_choose_vis/97/c.png", "image_4": "code_choose_vis/97/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_98", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "image_1": "code_choose_vis/98/a.png", "image_2": "code_choose_vis/98/b.png", "image_3": "code_choose_vis/98/c.png", "image_4": "code_choose_vis/98/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_99", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "image_1": "code_choose_vis/99/a.png", "image_2": "code_choose_vis/99/b.png", "image_3": "code_choose_vis/99/c.png", "image_4": "code_choose_vis/99/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_100", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "image_1": "code_choose_vis/100/a.png", "image_2": "code_choose_vis/100/b.png", "image_3": "code_choose_vis/100/c.png", "image_4": "code_choose_vis/100/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_101", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "image_1": "code_choose_vis/101/a.png", "image_2": "code_choose_vis/101/b.png", "image_3": "code_choose_vis/101/c.png", "image_4": "code_choose_vis/101/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_102", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "image_1": "code_choose_vis/102/a.png", "image_2": "code_choose_vis/102/b.png", "image_3": "code_choose_vis/102/c.png", "image_4": "code_choose_vis/102/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_103", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "image_1": "code_choose_vis/103/a.png", "image_2": "code_choose_vis/103/b.png", "image_3": "code_choose_vis/103/c.png", "image_4": "code_choose_vis/103/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_104", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "image_1": "code_choose_vis/104/a.png", "image_2": "code_choose_vis/104/b.png", "image_3": "code_choose_vis/104/c.png", "image_4": "code_choose_vis/104/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_105", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "image_1": "code_choose_vis/105/a.png", "image_2": "code_choose_vis/105/b.png", "image_3": "code_choose_vis/105/c.png", "image_4": "code_choose_vis/105/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_106", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "image_1": "code_choose_vis/106/a.png", "image_2": "code_choose_vis/106/b.png", "image_3": "code_choose_vis/106/c.png", "image_4": "code_choose_vis/106/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_107", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "image_1": "code_choose_vis/107/a.png", "image_2": "code_choose_vis/107/b.png", "image_3": "code_choose_vis/107/c.png", "image_4": "code_choose_vis/107/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_108", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "image_1": "code_choose_vis/108/a.png", "image_2": "code_choose_vis/108/b.png", "image_3": "code_choose_vis/108/c.png", "image_4": "code_choose_vis/108/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_109", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "image_1": "code_choose_vis/109/a.png", "image_2": "code_choose_vis/109/b.png", "image_3": "code_choose_vis/109/c.png", "image_4": "code_choose_vis/109/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_110", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "image_1": "code_choose_vis/110/a.png", "image_2": "code_choose_vis/110/b.png", "image_3": "code_choose_vis/110/c.png", "image_4": "code_choose_vis/110/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_111", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()", "image_1": "code_choose_vis/111/a.png", "image_2": "code_choose_vis/111/b.png", "image_3": "code_choose_vis/111/c.png", "image_4": "code_choose_vis/111/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_112", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()", "image_1": "code_choose_vis/112/a.png", "image_2": "code_choose_vis/112/b.png", "image_3": "code_choose_vis/112/c.png", "image_4": "code_choose_vis/112/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_113", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()", "image_1": "code_choose_vis/113/a.png", "image_2": "code_choose_vis/113/b.png", "image_3": "code_choose_vis/113/c.png", "image_4": "code_choose_vis/113/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_114", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "image_1": "code_choose_vis/114/a.png", "image_2": "code_choose_vis/114/b.png", "image_3": "code_choose_vis/114/c.png", "image_4": "code_choose_vis/114/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_115", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "image_1": "code_choose_vis/115/a.png", "image_2": "code_choose_vis/115/b.png", "image_3": "code_choose_vis/115/c.png", "image_4": "code_choose_vis/115/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_116", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()", "image_1": "code_choose_vis/116/a.png", "image_2": "code_choose_vis/116/b.png", "image_3": "code_choose_vis/116/c.png", "image_4": "code_choose_vis/116/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_117", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()", "image_1": "code_choose_vis/117/a.png", "image_2": "code_choose_vis/117/b.png", "image_3": "code_choose_vis/117/c.png", "image_4": "code_choose_vis/117/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_118", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()", "image_1": "code_choose_vis/118/a.png", "image_2": "code_choose_vis/118/b.png", "image_3": "code_choose_vis/118/c.png", "image_4": "code_choose_vis/118/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_119", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/119/a.png", "image_2": "code_choose_vis/119/b.png", "image_3": "code_choose_vis/119/c.png", "image_4": "code_choose_vis/119/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_120", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()", "image_1": "code_choose_vis/120/a.png", "image_2": "code_choose_vis/120/b.png", "image_3": "code_choose_vis/120/c.png", "image_4": "code_choose_vis/120/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_121", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/121/a.png", "image_2": "code_choose_vis/121/b.png", "image_3": "code_choose_vis/121/c.png", "image_4": "code_choose_vis/121/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_122", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/122/a.png", "image_2": "code_choose_vis/122/b.png", "image_3": "code_choose_vis/122/c.png", "image_4": "code_choose_vis/122/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_123", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/123/a.png", "image_2": "code_choose_vis/123/b.png", "image_3": "code_choose_vis/123/c.png", "image_4": "code_choose_vis/123/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_124", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/124/a.png", "image_2": "code_choose_vis/124/b.png", "image_3": "code_choose_vis/124/c.png", "image_4": "code_choose_vis/124/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_125", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "image_1": "code_choose_vis/125/a.png", "image_2": "code_choose_vis/125/b.png", "image_3": "code_choose_vis/125/c.png", "image_4": "code_choose_vis/125/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_126", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "image_1": "code_choose_vis/126/a.png", "image_2": "code_choose_vis/126/b.png", "image_3": "code_choose_vis/126/c.png", "image_4": "code_choose_vis/126/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_127", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "image_1": "code_choose_vis/127/a.png", "image_2": "code_choose_vis/127/b.png", "image_3": "code_choose_vis/127/c.png", "image_4": "code_choose_vis/127/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_128", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "image_1": "code_choose_vis/128/a.png", "image_2": "code_choose_vis/128/b.png", "image_3": "code_choose_vis/128/c.png", "image_4": "code_choose_vis/128/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_129", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "image_1": "code_choose_vis/129/a.png", "image_2": "code_choose_vis/129/b.png", "image_3": "code_choose_vis/129/c.png", "image_4": "code_choose_vis/129/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_130", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "image_1": "code_choose_vis/130/a.png", "image_2": "code_choose_vis/130/b.png", "image_3": "code_choose_vis/130/c.png", "image_4": "code_choose_vis/130/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_131", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "image_1": "code_choose_vis/131/a.png", "image_2": "code_choose_vis/131/b.png", "image_3": "code_choose_vis/131/c.png", "image_4": "code_choose_vis/131/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_132", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "image_1": "code_choose_vis/132/a.png", "image_2": "code_choose_vis/132/b.png", "image_3": "code_choose_vis/132/c.png", "image_4": "code_choose_vis/132/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_133", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "image_1": "code_choose_vis/133/a.png", "image_2": "code_choose_vis/133/b.png", "image_3": "code_choose_vis/133/c.png", "image_4": "code_choose_vis/133/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_134", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "image_1": "code_choose_vis/134/a.png", "image_2": "code_choose_vis/134/b.png", "image_3": "code_choose_vis/134/c.png", "image_4": "code_choose_vis/134/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_135", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "image_1": "code_choose_vis/135/a.png", "image_2": "code_choose_vis/135/b.png", "image_3": "code_choose_vis/135/c.png", "image_4": "code_choose_vis/135/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_136", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "image_1": "code_choose_vis/136/a.png", "image_2": "code_choose_vis/136/b.png", "image_3": "code_choose_vis/136/c.png", "image_4": "code_choose_vis/136/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_137", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/137/a.png", "image_2": "code_choose_vis/137/b.png", "image_3": "code_choose_vis/137/c.png", "image_4": "code_choose_vis/137/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_138", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/138/a.png", "image_2": "code_choose_vis/138/b.png", "image_3": "code_choose_vis/138/c.png", "image_4": "code_choose_vis/138/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_139", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/139/a.png", "image_2": "code_choose_vis/139/b.png", "image_3": "code_choose_vis/139/c.png", "image_4": "code_choose_vis/139/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_140", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/140/a.png", "image_2": "code_choose_vis/140/b.png", "image_3": "code_choose_vis/140/c.png", "image_4": "code_choose_vis/140/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_141", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "image_1": "code_choose_vis/141/a.png", "image_2": "code_choose_vis/141/b.png", "image_3": "code_choose_vis/141/c.png", "image_4": "code_choose_vis/141/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_142", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "image_1": "code_choose_vis/142/a.png", "image_2": "code_choose_vis/142/b.png", "image_3": "code_choose_vis/142/c.png", "image_4": "code_choose_vis/142/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_143", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "image_1": "code_choose_vis/143/a.png", "image_2": "code_choose_vis/143/b.png", "image_3": "code_choose_vis/143/c.png", "image_4": "code_choose_vis/143/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_144", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()", "image_1": "code_choose_vis/144/a.png", "image_2": "code_choose_vis/144/b.png", "image_3": "code_choose_vis/144/c.png", "image_4": "code_choose_vis/144/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_145", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "image_1": "code_choose_vis/145/a.png", "image_2": "code_choose_vis/145/b.png", "image_3": "code_choose_vis/145/c.png", "image_4": "code_choose_vis/145/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_146", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "image_1": "code_choose_vis/146/a.png", "image_2": "code_choose_vis/146/b.png", "image_3": "code_choose_vis/146/c.png", "image_4": "code_choose_vis/146/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_147", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()", "image_1": "code_choose_vis/147/a.png", "image_2": "code_choose_vis/147/b.png", "image_3": "code_choose_vis/147/c.png", "image_4": "code_choose_vis/147/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_148", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "image_1": "code_choose_vis/148/a.png", "image_2": "code_choose_vis/148/b.png", "image_3": "code_choose_vis/148/c.png", "image_4": "code_choose_vis/148/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_149", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()", "image_1": "code_choose_vis/149/a.png", "image_2": "code_choose_vis/149/b.png", "image_3": "code_choose_vis/149/c.png", "image_4": "code_choose_vis/149/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_150", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()", "image_1": "code_choose_vis/150/a.png", "image_2": "code_choose_vis/150/b.png", "image_3": "code_choose_vis/150/c.png", "image_4": "code_choose_vis/150/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_151", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()", "image_1": "code_choose_vis/151/a.png", "image_2": "code_choose_vis/151/b.png", "image_3": "code_choose_vis/151/c.png", "image_4": "code_choose_vis/151/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_152", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()", "image_1": "code_choose_vis/152/a.png", "image_2": "code_choose_vis/152/b.png", "image_3": "code_choose_vis/152/c.png", "image_4": "code_choose_vis/152/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_153", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "image_1": "code_choose_vis/153/a.png", "image_2": "code_choose_vis/153/b.png", "image_3": "code_choose_vis/153/c.png", "image_4": "code_choose_vis/153/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_154", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()", "image_1": "code_choose_vis/154/a.png", "image_2": "code_choose_vis/154/b.png", "image_3": "code_choose_vis/154/c.png", "image_4": "code_choose_vis/154/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_155", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()", "image_1": "code_choose_vis/155/a.png", "image_2": "code_choose_vis/155/b.png", "image_3": "code_choose_vis/155/c.png", "image_4": "code_choose_vis/155/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_156", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "image_1": "code_choose_vis/156/a.png", "image_2": "code_choose_vis/156/b.png", "image_3": "code_choose_vis/156/c.png", "image_4": "code_choose_vis/156/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_157", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()", "image_1": "code_choose_vis/157/a.png", "image_2": "code_choose_vis/157/b.png", "image_3": "code_choose_vis/157/c.png", "image_4": "code_choose_vis/157/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_158", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()", "image_1": "code_choose_vis/158/a.png", "image_2": "code_choose_vis/158/b.png", "image_3": "code_choose_vis/158/c.png", "image_4": "code_choose_vis/158/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_159", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/159/a.png", "image_2": "code_choose_vis/159/b.png", "image_3": "code_choose_vis/159/c.png", "image_4": "code_choose_vis/159/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_160", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()", "image_1": "code_choose_vis/160/a.png", "image_2": "code_choose_vis/160/b.png", "image_3": "code_choose_vis/160/c.png", "image_4": "code_choose_vis/160/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_161", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()", "image_1": "code_choose_vis/161/a.png", "image_2": "code_choose_vis/161/b.png", "image_3": "code_choose_vis/161/c.png", "image_4": "code_choose_vis/161/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_162", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/162/a.png", "image_2": "code_choose_vis/162/b.png", "image_3": "code_choose_vis/162/c.png", "image_4": "code_choose_vis/162/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_163", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/163/a.png", "image_2": "code_choose_vis/163/b.png", "image_3": "code_choose_vis/163/c.png", "image_4": "code_choose_vis/163/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_164", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/164/a.png", "image_2": "code_choose_vis/164/b.png", "image_3": "code_choose_vis/164/c.png", "image_4": "code_choose_vis/164/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_165", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/165/a.png", "image_2": "code_choose_vis/165/b.png", "image_3": "code_choose_vis/165/c.png", "image_4": "code_choose_vis/165/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_166", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()", "image_1": "code_choose_vis/166/a.png", "image_2": "code_choose_vis/166/b.png", "image_3": "code_choose_vis/166/c.png", "image_4": "code_choose_vis/166/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_167", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()", "image_1": "code_choose_vis/167/a.png", "image_2": "code_choose_vis/167/b.png", "image_3": "code_choose_vis/167/c.png", "image_4": "code_choose_vis/167/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_168", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()", "image_1": "code_choose_vis/168/a.png", "image_2": "code_choose_vis/168/b.png", "image_3": "code_choose_vis/168/c.png", "image_4": "code_choose_vis/168/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_169", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()", "image_1": "code_choose_vis/169/a.png", "image_2": "code_choose_vis/169/b.png", "image_3": "code_choose_vis/169/c.png", "image_4": "code_choose_vis/169/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_170", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "image_1": "code_choose_vis/170/a.png", "image_2": "code_choose_vis/170/b.png", "image_3": "code_choose_vis/170/c.png", "image_4": "code_choose_vis/170/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_171", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "image_1": "code_choose_vis/171/a.png", "image_2": "code_choose_vis/171/b.png", "image_3": "code_choose_vis/171/c.png", "image_4": "code_choose_vis/171/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_172", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()", "image_1": "code_choose_vis/172/a.png", "image_2": "code_choose_vis/172/b.png", "image_3": "code_choose_vis/172/c.png", "image_4": "code_choose_vis/172/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_173", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "image_1": "code_choose_vis/173/a.png", "image_2": "code_choose_vis/173/b.png", "image_3": "code_choose_vis/173/c.png", "image_4": "code_choose_vis/173/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_174", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "image_1": "code_choose_vis/174/a.png", "image_2": "code_choose_vis/174/b.png", "image_3": "code_choose_vis/174/c.png", "image_4": "code_choose_vis/174/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_175", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()", "image_1": "code_choose_vis/175/a.png", "image_2": "code_choose_vis/175/b.png", "image_3": "code_choose_vis/175/c.png", "image_4": "code_choose_vis/175/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_176", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "image_1": "code_choose_vis/176/a.png", "image_2": "code_choose_vis/176/b.png", "image_3": "code_choose_vis/176/c.png", "image_4": "code_choose_vis/176/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_177", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "image_1": "code_choose_vis/177/a.png", "image_2": "code_choose_vis/177/b.png", "image_3": "code_choose_vis/177/c.png", "image_4": "code_choose_vis/177/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_178", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "image_1": "code_choose_vis/178/a.png", "image_2": "code_choose_vis/178/b.png", "image_3": "code_choose_vis/178/c.png", "image_4": "code_choose_vis/178/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_179", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "image_1": "code_choose_vis/179/a.png", "image_2": "code_choose_vis/179/b.png", "image_3": "code_choose_vis/179/c.png", "image_4": "code_choose_vis/179/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_180", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "image_1": "code_choose_vis/180/a.png", "image_2": "code_choose_vis/180/b.png", "image_3": "code_choose_vis/180/c.png", "image_4": "code_choose_vis/180/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "D", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_181", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()", "image_1": "code_choose_vis/181/a.png", "image_2": "code_choose_vis/181/b.png", "image_3": "code_choose_vis/181/c.png", "image_4": "code_choose_vis/181/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "C", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_182", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()", "image_1": "code_choose_vis/182/a.png", "image_2": "code_choose_vis/182/b.png", "image_3": "code_choose_vis/182/c.png", "image_4": "code_choose_vis/182/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_183", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "image_1": "code_choose_vis/183/a.png", "image_2": "code_choose_vis/183/b.png", "image_3": "code_choose_vis/183/c.png", "image_4": "code_choose_vis/183/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_184", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "image_1": "code_choose_vis/184/a.png", "image_2": "code_choose_vis/184/b.png", "image_3": "code_choose_vis/184/c.png", "image_4": "code_choose_vis/184/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_185", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/185/a.png", "image_2": "code_choose_vis/185/b.png", "image_3": "code_choose_vis/185/c.png", "image_4": "code_choose_vis/185/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_186", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/186/a.png", "image_2": "code_choose_vis/186/b.png", "image_3": "code_choose_vis/186/c.png", "image_4": "code_choose_vis/186/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_187", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/187/a.png", "image_2": "code_choose_vis/187/b.png", "image_3": "code_choose_vis/187/c.png", "image_4": "code_choose_vis/187/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "A", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_188", "question": "Which visualization can this code possibly generate? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()", "image_1": "code_choose_vis/188/a.png", "image_2": "code_choose_vis/188/b.png", "image_3": "code_choose_vis/188/c.png", "image_4": "code_choose_vis/188/d.png", "image_5": "", "options": ["<image_1>", "<image_2>", "<image_3>", "<image_4>"], "answer": "B", "solution": "", "subject": "Coding", "task": "Code Choose Vis", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_189", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/1/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_190", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/2/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_191", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/3/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_192", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/4/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1 \nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1  \nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_193", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/5/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_194", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/6/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_195", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/7/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_196", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/8/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']  \ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):  \n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches  \nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF'] \ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]): \n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_197", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/9/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_198", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/10/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_199", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/11/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_200", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/12/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nepochs = np.arange(0, 101, 1)\nacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\nacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\nacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\nacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\nax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\nax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\nax1.set_title('Natural accuracy')\nax1.set_xlabel('Epoch')\nax1.set_ylabel('Accuracy (%)')\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)\nax2.set_xlim([0, 100])\nax2.set_ylim([0, 55])\nax2.legend()\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_201", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/13/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_202", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/14/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_203", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/15/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_204", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/16/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)  \nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)  \nk = np.linspace(0, 20, 100)  \nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)  \nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')\nax.set_zlabel('Value')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_205", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/17/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_206", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/18/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_207", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/19/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_208", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/20/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndates = np.linspace(0, 10, 100)\ngdd_data = lambda: np.random.uniform(0.2, 1, 100)\nthermal_data = np.linspace(0.1, 1, 100)\ncrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat', \n         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\nfig, axes = plt.subplots(4, 2, figsize=(12, 12))\nfig.tight_layout(pad=5.0)\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_209", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/21/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_210", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/22/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_211", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/23/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_212", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/24/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\nad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\ncv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\nfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\niwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\nad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\ncv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\nfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\niwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\nplt.xlabel('Source samples')\nplt.ylabel('Target Q error')\nplt.title('Steel Plates Data.       (n_Q = 100)')\nplt.legend()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_213", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/25/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_214", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/26/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_215", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/27/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_216", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/28/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nparticles = [100, 300, 900, 2700]\ndpms_100 = [0.02, 0.015, 0.01, 0.008]\ndpms_1000 = [0.015, 0.012, 0.009, 0.007]\nsvgd_100 = [0.1, 0.09, 0.085, 0.08]\nsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\nula_100 = [0.07, 0.065, 0.06, 0.055]\nula_1000 = [0.065, 0.06, 0.055, 0.05]\nsgm_100 = [0.05, 0.045, 0.04, 0.035]\nsgm_1000 = [0.045, 0.04, 0.035, 0.03]\nerrors = np.array([0.005, 0.004, 0.003, 0.002])\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_217", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/29/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_218", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/30/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_219", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/31/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_220", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/32/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\naxes[1].grid(True)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--') \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--') \naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nnp.random.seed(0)\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[0].axhline(0.85, color='red', linestyle='--')  \naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')  \naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_221", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/33/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_222", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/34/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_223", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/35/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_224", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/36/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\nax.set_xlabel('Percentage')\nax.set_xlim(-100, 100)\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.axvline(0, color='black', linewidth=0.8)\nax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_225", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/37/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_226", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/38/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_227", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/39/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_228", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/40/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5)) \nax.set_yticks(np.linspace(-1, 1, 5))  \nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_229", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/41/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_230", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/42/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_231", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/43/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_232", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/44/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75  \nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport seaborn as sns\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 10)\ny = np.linspace(-1, 1, 10)\nz = np.array([0, 0.5, 1.0])\nx, y, z = np.meshgrid(x, y, z)\nu = -y\nv = x\nw = 0.1 * (x + y)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('W')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_233", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/45/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_234", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/46/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_235", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/47/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_236", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/48/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])  \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nlabels = [\n    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max', \n    'data_channel_is_tech', 'self_reference_avg_sharess', \n    'data_channel_is_entertainment', 'kw_min_avg', \n    'data_channel_is_socmed', 'self_reference_min_shares'\n]\ncategories = ['location', 'scale', 'skewness']\ndata = np.array([\n    [0.2, 0, 0],   \n    [0.15, 0, 0],  \n    [0.1, 0, 0],   \n    [0.08, 0, 0],  \n    [0.05, 0, 0.11],  \n    [0.03, 0, 0],  \n    [0.02, 0, 0],  \n    [0.01, 0, 0], \n    [0, 0.09, 0], \n    [0, 0, 0]     \n])\nfig, ax = plt.subplots(figsize=(6, 4))\ncax = ax.imshow(data, cmap='Blues', aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_237", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/49/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_238", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/50/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_239", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/51/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_240", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/52/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))  \nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])  \nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j, \n            s=abs(corr) * 1500,  \n            color=cmap(norm(corr)),  \n            alpha=0.9, \n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5)) \ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])  \nax.invert_yaxis()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\", \n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0, \n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12}, \n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2, \n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue', \n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_241", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/53/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_242", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/54/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_243", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/55/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_244", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/56/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]  \nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])  \nax.set_yticks(np.arange(0.5, 10.5, 1))  \nax.set_yticklabels(tasks)  \nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([])  \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10] \nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]  \nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))  \nax.set_xticks([]) \nax.grid(False)\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle', \n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle', \n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9', \n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_245", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/57/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_246", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/58/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_247", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/59/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_248", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/60/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nnp.random.seed(0)\nsns.set(style=\"dark\")\nclose = np.random.normal(160, 10, 1000)  \nvolume = np.random.normal(0.5, 0.2, 1000)  \ndf = pd.DataFrame({'Close': close, 'Volume': volume})\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_249", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/61/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_250", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/62/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_251", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/63/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_252", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/64/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nprice = np.linspace(18.75, 19.10, 20)\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny1 = price - 0.05\ny2 = price + 0.05\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_253", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/65/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_254", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/66/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_255", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/67/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_256", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/68/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndates = pd.to_datetime([\n    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\", \n    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n])\nxrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\nfig, ax = plt.subplots(figsize=(10, 6))\nax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\nax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')\nax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\nax.axvline(dates[1], linestyle=':', color='blue')\nax.axvline(dates[2], linestyle=':', color='blue')\nax.axvline(dates[3], linestyle=':', color='blue')\nax.axvline(dates[4], linestyle=':', color='blue')\nax.axvline(dates[5], linestyle=':', color='blue')\nax.axvline(dates[6], linestyle=':', color='blue')\nax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\nax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\nax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->')) \nax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\nax.set_xlabel('date mm/dd/yyyy')\nax.set_ylabel('XRP/USD')\nplt.xticks(rotation=45)\nax.grid(True)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_257", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/69/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_258", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/70/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_259", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/71/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_260", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/72/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend(fontsize=6)\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nutilization = np.linspace(0, 1, 100)\nrate_before = utilization * 0.2\nrate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\nfig, ax = plt.subplots()\nax.plot(utilization, rate_before, label='Compound (before)', color='red')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple')\nax.set_xlabel('utilization')\nax.set_ylabel('rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_261", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/73/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_262", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/74/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_263", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/75/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_264", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/76/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import multivariate_normal\nimport matplotlib.colors as mcolors\nnp.random.seed(0)\nmean = [-3.0, 102.0]\ncov = [[0.1, 0.05], [0.05, 1.0]]\nx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\npos = np.empty(x.shape + (2,))\npos[:, :, 0] = x\npos[:, :, 1] = y\nrv = multivariate_normal(mean, cov)\nfig, ax = plt.subplots(figsize=(5, 10))\nscatter_x = np.random.normal(mean[0], 0.3, 10000) \nscatter_y = np.random.normal(mean[1], 2.0, 10000)\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\nax.set_xlabel('X-axis')\nax.set_ylabel('Y-axis')\nax.set_title('IUKF-1 (J=4)')\nax.set_xlim([-4.0, -2.5])\nax.set_ylim([96, 106])\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_265", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/77/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_266", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/78/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_267", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/79/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_268", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/80/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ncategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\nplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\nplt.ylabel('Intersite Distance', fontsize=12)\nplt.ylim(0, 0.6)\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_269", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/81/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_270", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/82/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_271", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/83/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_272", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/84/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=90)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=90, azim=0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ntheta = np.linspace(0, 2*np.pi, 100)\nphi = np.linspace(0, 2*np.pi, 100)\ntheta, phi = np.meshgrid(theta, phi)\nR = 2  \nr = 0.5  \nX = (R + r*np.cos(theta)) * np.cos(phi)\nY = (R + r*np.cos(theta)) * np.sin(phi)\nZ = r * np.sin(theta)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\nax.set_xlabel('X Axis')\nax.set_ylabel('Y Axis')\nax.set_zlabel('Z Axis')\nax.set_xlim([-3, 3])\nax.set_ylim([-3, 3])\nax.set_zlim([-1.5, 1.5])\nax.view_init(elev=0, azim=90)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_273", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/85/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_274", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/86/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_275", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/87/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_276", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/88/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)  \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nnorm = plt.Normalize(dz.min(), dz.max())  \ncolors = plt.cm.viridis(norm(dz))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()  \nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)  \nnum_measurements_vals = np.arange(1, 12, 1)  \nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos) \ndx = dy = np.ones_like(zpos) * 0.4  \ndz = detected_fraction_vals.flatten()\nfig = plt.figure()  \nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)  \ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import colors\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_277", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/89/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_278", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/90/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_279", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/91/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_280", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/92/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2], sharex=ax1)  \ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\nax_cb.xaxis.set_ticks_position('top')\nax_cb.xaxis.set_label_position('top')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ntime = np.linspace(0, 250, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1  \nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig = plt.figure(figsize=(8, 6))\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_281", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/93/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_282", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/94/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_283", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/95/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_284", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/96/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03 \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nepsilon_1 = np.linspace(-0.2, 0.2, 100)\nepsilon_2 = np.linspace(-0.2, 0.2, 100)\nepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\nRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\nAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\nAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_285", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/97/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_286", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/98/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_287", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/99/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_288", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/100/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0] \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots()\ny_positions = [4, 3, 2, 1, 0]  \nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))  \nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 10))\nax.spines['bottom'].set_position(('outward', 10))\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_289", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/101/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_290", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/102/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_291", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/103/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_292", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/104/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]) \nfig, ax = plt.subplots(figsize=(6, 8))\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    for j in range(0, 24, 6):  \n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndays = np.arange(0, 13)\nblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15]) \nred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])  \nfig, ax = plt.subplots(figsize=(6, 8))\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))  \nax.set_yticks(days)\nax.set_yticklabels(days)\nax.grid(True, which='both', axis='x', linestyle='--', color='gray')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_293", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/105/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_294", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/106/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_295", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/107/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_296", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/108/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)  \nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig, ax = plt.subplots()\nax.set_xlim(0, 10)\nax.set_ylim(0, 10)\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_297", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/109/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_298", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/110/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_299", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/111/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_300", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/112/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],   \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3  \nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)  \n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size  \nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndata = [\n    [10, 20, 30, 40],   \n    [25, 35, 15, 25],   \n    [30, 20, 25, 25],   \n    [20, 30, 20, 30],  \n    [35, 25, 15, 25],   \n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5  \nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size  \nax.set(aspect=\"equal\")\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_301", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/113/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_302", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/114/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_303", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/115/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_304", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/116/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]  \nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\") \nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)  \nplt.triplot(T, 'k-', marker='x', markersize=8)  \nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)  \nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_305", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/117/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_306", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/118/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_307", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/119/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_308", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/120/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2 \ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1 = np.linspace(-5, 5, 100)\np2 = np.linspace(-5, 5, 100)\np1, p2 = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(\n    p1, p2, Z_modified, \n    rstride=1, cstride=1,  \n    color='b', alpha=0.6, \n    edgecolor='none'  \n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1  \n    elif z_avg > 2:\n        return 2  \n    else:\n        return 4  \nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride], \n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j], \n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\np1_fine = np.linspace(0, 1, 30)  \np2_fine = np.linspace(0, 1, 100)  \np1_coarse = np.linspace(0, 1, 10) \np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_309", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/121/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_310", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/122/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_311", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/123/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_312", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/124/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]  \nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\narchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\nprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\nprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\nerror_tnn = [0.001, 0.001, 0.0015, 0.002]\nerror_dnn = [0.001, 0.001, 0.0015, 0.002]\nlongstaff_schwartz_price = 0.1075\nfig, ax = plt.subplots()\nx = np.arange(len(architectures))\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nax.legend()\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_313", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/125/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_314", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/126/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_315", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/127/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_316", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/128/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nyz_window_blue = np.array([[0, 1.5, 2.5], \n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5], \n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0], \n                            [1, -1, 0],\n                            [-1, -1, 0], \n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],  \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')  \nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], \n            [pos[1], final_position[1]], \n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]], \n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]], \n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]], \n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]], \n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0], \n                      [1, -1, 0],\n                      [-1, -1, 0], \n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3], \n                      [0, 1, 1],\n                      [0, -1, 1], \n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], \n                             [1, -1, 0],\n                             [-1, -1, 0], \n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_317", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/129/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_318", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/130/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_319", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/131/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_320", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/132/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(6, 6))\ngrid_size = 8\nvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\nvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2), \n             (5, 4), (6, 4), (5, 5), (6, 5), \n             (1, 6), (2, 6), (1, 7), (2, 7)]\nfor x in range(grid_size):\n    for y in range(grid_size):\n        if (x, y) in voxel_mp2:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n        else:\n            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\nfor x, y in voxel_mp1:\n    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\nax.set_xlim(-1, grid_size)\nax.set_ylim(-1, grid_size)\nax.set_xticks([])\nax.set_yticks([])\nfor i in range(grid_size + 1):\n    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)  \nax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2) \nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\nplt.gca().set_aspect('equal', adjustable='box')\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_321", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/133/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_322", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/134/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_323", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/135/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_324", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/136/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', '*', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.patches import Patch\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nhatches = ['/', 'X', '|', '\\\\']\nlabels = [f'set {i}' for i in range(1, 5)]\nbins = 30\nhist_data = [np.histogram(d, bins=bins)[0] for d in data]\nbin_edges = np.histogram(data[0], bins=bins)[1]\nbin_width = bin_edges[1] - bin_edges[0]\nbin_centers = bin_edges[:-1] + bin_width / 2\nbottom = np.zeros(bins)\nfig, ax = plt.subplots(figsize=(10, 7))\nfor i in range(4):\n    ax.bar(\n        bin_centers,\n        hist_data[i],\n        width=bin_width,\n        bottom=bottom,\n        edgecolor='black',\n        label=labels[i],\n        hatch=hatches[i],\n        alpha=0.7\n    )\n    bottom += hist_data[i]\nax.set_xlabel('x')\nax.set_ylabel('Counts')\ncolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\nlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\nax.legend(handles=legend_patches, title=\"Datasets\")\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_325", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/137/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_326", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/138/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_327", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/139/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_328", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/140/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10)) \n    ax.spines['left'].set_position(('outward', 10))   \nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\nfor ax in axs.flat:\n    ax.plot(x, y)\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 2 * np.pi, 100)\ny = np.sin(x)\nfig, axs = plt.subplots(2, 2)\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_329", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/141/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_330", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/142/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_331", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/143/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_332", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/144/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.path import Path\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level, \n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1] \nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)  \ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]  \n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)  \nfor spine in ax.spines.values():  \n    spine.set_visible(False)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_333", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/145/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_334", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/146/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_335", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/147/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_336", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/148/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal') \nradius = [1.5, 1.0, 0.5, 0.25]  \nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))  \nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1] \ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')  \nradii = [1.5, 1.1, 0.7, 0.3]  \nwidths = [0.4, 0.4, 0.4, 0.3]  \nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes, \n        radius=r, \n        colors=ring_colors, \n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)  \ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_337", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/149/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_338", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/150/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_339", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/151/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_340", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/152/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0') \n    plt.plot([xi, xi], [0, 0.02], color='C1') \n    plt.plot([0, 0.02], [yi1, yi1], color='C0')  \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')  \n    plt.plot([xi, xi], [0, 0.02], color='C1')  \n    plt.plot([0, 0.02], [yi1, yi1], color='C0') \n    plt.plot([0, 0.02], [yi2, yi2], color='C1')  \nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black') \nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.sort(np.random.rand(20))\ny1 = np.sin(2 * np.pi * x) ** 2  \ny2 = np.cos(2 * np.pi * x) ** 2 \nplt.figure()\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_341", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/153/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_342", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/154/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_343", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/155/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_344", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/156/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3  \n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_345", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/157/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_346", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/158/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_347", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/159/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_348", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/160/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6, \n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white', \n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\n    else:  \n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center', \n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white', \n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()\nplt.show()", "import math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()", "import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_349", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/161/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_350", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/162/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_351", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/163/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_352", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/164/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["from datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]  \ndates, releases = zip(*sorted(zip(dates, releases)))  \nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)  \n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)  \nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)  \nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nfrom datetime import datetime\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):  \n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)\nplt.grid(False)\nax.spines['left'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_353", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/165/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()", "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_354", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/166/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()", "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_355", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/167/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_356", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/168/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X), \n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z, \n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z, \n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()\nplt.show()", "from mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)  \nY, Z = np.meshgrid(y, z)  \nX2, Y2 = np.meshgrid(x, y)  \nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))  \nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000)) \nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_357", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/169/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_358", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/170/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_359", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/171/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_360", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/172/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)  \nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_361", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/173/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_362", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/174/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_363", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/175/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_364", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/176/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2) \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))  \nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))  \nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))  \nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y  \nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)  \nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)  \nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)  \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_365", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/177/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_366", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/178/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_367", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/179/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_368", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/180/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\naggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()", "import matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)  \nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_369", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/181/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_370", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/182/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_371", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/183/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_372", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/184/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")\nplt.show()", "import matplotlib.pyplot as plt\nimport numpy as np\nnp.random.seed(0)\nx = np.random.rand(50) * 100  \ny = np.random.rand(50) * 100  \nsizes = np.random.rand(50) * 1000  \nsize_legend = [100, 300, 600, 900]\nplt.figure(figsize=(8, 6))\nscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\nfor size in size_legend:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_373", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/185/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_374", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/186/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_375", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/187/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_376", "question": "<image_1>\n\nWhich code snippet below can possibly create the chart in the image? We are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable).", "image_1": "vis_choose_code/188/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left')\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right')\nplt.tight_layout()\nplt.show()", "import pandas as pd\nimport matplotlib.pyplot as plt\ndata = {\n    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    'Credit': [120, 110, 150, 170, 130],\n    'Cash': [80, 90, 60, 85, 95],\n    'Online': [50, 60, 45, 55, 65]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Month', inplace=True)\ndf.plot(kind='bar', stacked=True, figsize=(8, 6))\nplt.xlabel('Month', fontsize=12, fontweight='bold')\nplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\nplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))\nplt.tight_layout()\nplt.show()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Vis Choose Code", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_377", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(1000)\n5\ty = np.random.rand(1000) * 2 - 1\n6\tlabels = np.random.choice([0, 1], size=1000)\n7\tplt.figure(figsize=(8, 8))\n8\tplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n9\tplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n10\tplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\n11\tplt.axvline(0, color='black', linestyle=':', linewidth=1)\n12\tplt.xlabel(r'$P(F_{i+1} | F_i)$')\n13\tplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n14\tplt.legend(title='Boundary')\n15\tplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\n16\tplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\n17\tplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n18\tplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n19\tplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n20\tplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n21\tplt.xlim(-0.1, 1.1)\n22\tplt.ylim(-1.1, 1.1)\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/1/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()", "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')", "Insert the following between lines 22-23:\nplt.tick_params(axis='both', direction='in')", "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='inout')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_378", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.gridspec import GridSpec\n5\tx = np.random.rand(1000)\n6\ty = np.random.rand(1000) * 2 - 1\n7\tlabels = np.random.choice([0, 1], size=1000)\n8\tfig = plt.figure(figsize=(8, 8))\n9\tgs = GridSpec(4, 4, figure=fig)\n10\tax_main = fig.add_subplot(gs[1:4, 0:3])\n11\tax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n12\tax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n13\tax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\n14\tax_main.axvline(0, color='black', linestyle=':', linewidth=1)\n15\tax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\n16\tax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n17\tax_main.legend(title='Boundary')\n18\tax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n19\tax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n20\tax_main.set_xlim(-0.1, 1.1)\n21\tax_main.set_ylim(-1.1, 1.1)\n22\tax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\n23\tax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\n24\tax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\n25\tax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\n26\tax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n27\tax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n28\tax_histx.label_outer()\n29\tax_histy.label_outer()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/2/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)", "Replace lines 3-29 with:\nfrom matplotlib.gridspec import GridSpec\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='in')", "Insert the following between lines 29-30:\nax_histy.tick_params(axis='both', direction='in')", "Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_379", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.patches as mpatches\n4\tnp.random.seed(0)\n5\tcategories = [\n6\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n7\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n8\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n9\t]\n10\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n11\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n12\tdata = np.random.randint(50, 150, (8, 5, 5))\n13\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n14\taxes = axes.flatten()\n15\tfor i, ax in enumerate(axes[:-1]):\n16\t    for j, level in enumerate(levels):\n17\t        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n18\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n19\t    ax.set_title(categories[i])\n20\t    ax.set_xlim(0, 500)\n21\tfig.delaxes(axes[-1])\n22\thandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\n23\tfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/3/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace line 23 with:\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_380", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tcategories = [\n5\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n6\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n7\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n8\t]\n9\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n10\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n11\tdata = np.random.randint(50, 150, (8, 5, 5))\n12\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n13\taxes = axes.flatten()\n14\tfor i, ax in enumerate(axes[:-1]):\n15\t    for j, level in enumerate(levels):\n16\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n17\t        ax.set_title(categories[i])\n18\t        ax.set_xlim(0, 500)\n19\tfig.delaxes(axes[-1])\n20\tfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n21\tplt.tight_layout()\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/4/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 16 with:\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')", "Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace lines 11-21 with:\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.subplots_adjust(bottom=0.15)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_381", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle='--', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle='--', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/5/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)", "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')", "Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)", "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_382", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle=':', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle=':', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/6/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)", "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)", "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')", "Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_383", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tk = np.linspace(0, 20, 100)\n5\tA = np.linspace(0, 20, 100)\n6\tK, A = np.meshgrid(k, A)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\n11\tax.set_xlabel('k')\n12\tax.set_ylabel('|A|')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/7/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')", "Replace lines 4-12 with:\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')", "Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')", "Replace lines 10-13 with:\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_384", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tA = np.linspace(0, 20, 100)\n5\tk = np.linspace(0, 20, 100)\n6\tA, k = np.meshgrid(A, k)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\n11\tax.set_xlabel(r'$k$')\n12\tax.set_ylabel(r'$|A|$')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/8/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))", "Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)", "Replace lines 4-13 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')", "Replace lines 4-12 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_385", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor ax, crop in zip(axes.flatten(), crops):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    ax.legend()\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/9/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 14 with:\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')", "Replace line 18 with:\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)", "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))", "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_386", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    if index == 2:\n19\t        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/10/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)", "Replace line 18 with:\n    if index == 3:", "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()", "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_387", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/11/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)", "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-.o', label='AD')", "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')", "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_388", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/12/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)", "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, label='IWCV')", "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)", "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_389", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/13/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()", "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')", "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=3)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=3)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=3)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=3)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=3)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=3)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=3)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=3)", "Replace line 24 with:\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_390", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/14/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 13-24 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()", "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=5)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=5)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=5)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=5)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=5)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=5)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=5)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=5)", "Replace line 24 with:\nplt.legend()", "Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_391", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tx1 = np.random.normal(0.85, 0.1, 100)\n7\ty1 = x1 + np.random.normal(0, 0.1, 100)\n8\tx2 = np.random.normal(0.9, 0.1, 100)\n9\ty2 = x2 + np.random.normal(0, 0.1, 100)\n10\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n11\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n13\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n14\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n15\taxes[0].axhline(0.85, color='red', linestyle='--')\n16\taxes[0].axhline(0.55, color='red', linestyle='--')\n17\taxes[0].set_title('BO03 trial')\n18\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n19\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n20\taxes[1].axhline(0.85, color='red', linestyle='--')\n21\taxes[1].axhline(0.55, color='red', linestyle='--')\n22\taxes[1].set_title('BO06 trial')\n23\tplt.tight_layout()\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/15/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-21 with:\naxes[0].axhline(0.55, color='red', linestyle='-.')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='-.')", "Replace lines 6-22 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)", "Replace lines 6-18 with:\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)", "Replace lines 6-18 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_392", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tsns.set(style=\"whitegrid\")\n7\tx1 = np.random.normal(0.85, 0.1, 100)\n8\ty1 = x1 + np.random.normal(0, 0.1, 100)\n9\tx2 = np.random.normal(0.9, 0.1, 100)\n10\ty2 = x2 + np.random.normal(0, 0.1, 100)\n11\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n13\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n14\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n15\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n16\taxes[0].axhline(0.85, color='red', linestyle='--')\n17\taxes[0].axhline(0.55, color='red', linestyle='--')\n18\taxes[0].set_title('BO03 trial')\n19\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n20\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n21\taxes[1].axhline(0.85, color='red', linestyle='--')\n22\taxes[1].axhline(0.55, color='red', linestyle='--')\n23\taxes[1].set_title('BO06 trial')\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/16/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 6 with:\nsns.set(style=\"ggplot2\")", "Replace lines 6-23 with:\nsns.set(style=\"classic\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)", "Replace lines 6-19 with:\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})", "Replace lines 6-23 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_393", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n7\t    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n8\t    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n9\t    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n11\t    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n12\t}\n13\tfig, ax = plt.subplots(figsize=(10, 6))\n14\tax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\n15\tax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\n16\tax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\n17\tax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\n18\tax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\n19\tax.set_xlabel('Percentage')\n20\tax.set_xlim(-100, 100)\n21\tax.set_xticks([-100, -50, 0, 50, 100])\n22\tax.set_xticklabels([100, 50, 0, 50, 100])\n23\tax.axvline(0, color='black', linewidth=0.8)\n24\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n25\tplt.tight_layout()\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/17/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-24 with:\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')", "Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')", "Replace lines 3-24 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')", "Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_394", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport pandas as pd\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n8\t    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n9\t    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n11\t    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n12\t    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n13\t}\n14\tfig, ax = plt.subplots(figsize=(10, 6))\n15\tax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\n16\tax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\n17\tax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\n18\tax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\n19\tax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\n20\tax.set_xlabel('Percentage')\n21\tax.set_xlim(-100, 100)\n22\tax.set_xticks([-100, -50, 0, 50, 100])\n23\tax.set_xticklabels([100, 50, 0, 50, 100])\n24\tax.axvline(0, color='black', linewidth=0.8)\n25\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n26\tplt.tight_layout()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/18/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 8-25 with:\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')", "Replace line 5 with:\nsns.set(style=\"classic\")", "Replace lines 3-25 with:\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')", "Replace lines 3-19 with:\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_395", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/19/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)", "Replace line 5 with:\nsns.set(style=\"whitegrid\")", "Replace lines 11-17 with:\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))", "Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_396", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"classic\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tax.set_xlim(-1, 1)\n19\tax.set_ylim(-1, 1)\n20\tax.set_xticks(np.linspace(-1, 1, 5))\n21\tax.set_yticks(np.linspace(-1, 1, 5))\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/20/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-21 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)", "Replace lines 5-21 with:\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)", "Replace lines 5-21 with:\nsns.set(style=\"white\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)", "Replace lines 5-17 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_397", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/21/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75", "Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)", "Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75", "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_398", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/22/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)", "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)", "Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75", "Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_399", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\n32\tax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\n33\tax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\n34\tax.tick_params(which=\"minor\", size=0)\n35\tcbar = ax.figure.colorbar(cax, ax=ax)\n36\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/23/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 31-34 with:\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)", "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])", "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])", "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_400", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\n32\tcbar = ax.figure.colorbar(cax, ax=ax)\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/24/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 30-31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)", "Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)", "Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])", "Replace line 31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_401", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport seaborn as sns\n3\timport pandas as pd\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n7\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n8\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n9\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n10\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n11\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n12\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n13\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n14\t}\n15\tdf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n16\t                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\n17\tcorrelation_matrix = df.corr()\n18\tplt.figure(figsize=(8, 8))\n19\tsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n20\t            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n21\t            mask=None, annot_kws={\"size\": 12},\n22\t            xticklabels=df.columns, yticklabels=df.columns)\n23\tfor i in range(len(correlation_matrix.columns)):\n24\t    for j in range(len(correlation_matrix.columns)):\n25\t        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n26\t                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n27\t                                        alpha=0.6))\n28\tplt.xticks(rotation=45, ha='right', color=\"red\")\n29\tplt.yticks(rotation=0, color=\"red\")\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/25/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()", "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()", "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"white\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()", "Replace lines 2-29 with:\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_402", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport numpy as np\n3\timport matplotlib.pyplot as plt\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n8\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n9\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n10\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n11\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n12\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n13\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n14\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n15\t}\n16\tdf = pd.DataFrame(data, index=[\n17\t    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n18\t    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n19\t])\n20\tfig, ax = plt.subplots(figsize=(10, 8))\n21\tcmap = sns.diverging_palette(220, 10, as_cmap=True)\n22\tnorm = plt.Normalize(vmin=-1, vmax=1)\n23\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n24\tsm.set_array([])\n25\tfor i, col in enumerate(df.columns):\n26\t    for j, row in enumerate(df.index):\n27\t        corr = df.at[row, col]\n28\t        ax.scatter(\n29\t            i + 0.5, j + 0.5,\n30\t            s=abs(corr) * 1500,\n31\t            color=cmap(norm(corr)),\n32\t            alpha=0.9,\n33\t            edgecolors='none'\n34\t        )\n35\tax.set_xticks(np.arange(0.5, len(df.columns), 1))\n36\tax.set_xticklabels(df.columns, rotation=90, color=\"red\")\n37\tax.set_yticks(np.arange(0.5, len(df.index), 1))\n38\tax.set_yticklabels(df.index, rotation=0, color=\"red\")\n39\tax.set_xlim(0, len(df.columns))\n40\tax.set_ylim(0, len(df.index))\n41\tcbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\n42\tcbar.set_ticks(np.linspace(-1, 1, 5))\n43\tcbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\n44\tax.invert_yaxis()\n45\tplt.tight_layout()\n46\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/26/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")", "Replace line 29 with:\n            i, j,", "Replace lines 1-44 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)", "Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"whitegrid\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(9, 9))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=0.5, linecolor='gray', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 10},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.5))\nplt.xticks(ha='right', color=\"darkred\")\nplt.yticks(rotation=0, color=\"darkred\")"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_403", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\tfig, ax = plt.subplots(figsize=(10, 3))\n11\ttask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n12\tprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\n13\tfor i, color in enumerate(colors):\n14\t    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\n15\tax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\n16\tax.set_xlabel('Time')\n17\tax.set_ylabel('Progress')\n18\tax.set_xticks([])\n19\tax.set_yticks(np.arange(0.5, 10.5, 1))\n20\tax.set_yticklabels(tasks)\n21\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n22\tplt.tight_layout()\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/27/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-20 with:\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)", "Replace lines 11-20 with:\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))", "Replace lines 10-20 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)", "Replace lines 4-21 with:\nsns.set(style=\"white\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)\nplt.legend(tasks, loc='lower left', bbox_to_anchor=(1, 0.5))"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_404", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\ttask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n11\tprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\n12\ttask_blocks = [\n13\t    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n14\t    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n15\t    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n16\t    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n17\t]\n18\tfig, ax = plt.subplots(figsize=(10, 3))\n19\tfor i, row in enumerate(task_blocks):\n20\t    for j, task_index in enumerate(row):\n21\t        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\n22\tax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\n23\tax.set_xlabel('Time')\n24\tax.set_ylabel('Progress')\n25\tax.set_yticks(np.arange(0, 5, 1))\n26\tax.set_xticks([])\n27\tax.grid(False)\n28\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n29\tplt.tight_layout()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/28/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-22 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)", "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))", "Replace lines 10-28 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)\nplt.legend(tasks)", "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_405", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\n11\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/29/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)", "Insert the following between lines 10-11:\ng.plot_marginals(sns.kdeplot, fill=True)", "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)", "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_joint.grid(True)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_406", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\n11\tg.ax_marg_x.grid(True)\n12\tg.ax_marg_y.grid(True)\n13\tg.ax_joint.grid(True)\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/30/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Remove lines 11-12", "Remove line 6", "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')", "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_407", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/31/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')", "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')", "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')", "Replace lines 16-19 with:\nplt.fill_between(remaining_inventory, y1, y2, color='blue')\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Green stars')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_408", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/32/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')", "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='o', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')", "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')", "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_409", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/33/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 14 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')", "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')", "Replace line 5 with:\nsns.set(style=\"whitegrid\")", "Replace line 17 with:\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_410", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/34/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 5 with:\nsns.set(style=\"whitegrid\")", "Replace lines 15-17 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')", "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')", "Replace lines 14-15 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_411", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\")\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tax_inset.legend(fontsize=6)\n26\tax.legend()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/35/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()", "Replace lines 14-25 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)", "Replace line 14 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')", "Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_412", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/36/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 7-24 with:\nax.plot(utilization, rate_before, label='Compound (before)', color='red', linestyle='--')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple', linestyle='-.')\nax.set_xlabel('Utilization')\nax.set_ylabel('Rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nax.legend(loc='upper left')\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"35%\", height=\"35%\", loc='upper right')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)', linestyle=':')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)', linestyle='--')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.3, 0.6, 0.9])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('Utilization', fontsize=8)\nax_inset.set_ylabel('Rate', fontsize=8)\nax_inset.legend(fontsize=6)", "Insert the following between lines 24-25:\nax_inset.legend(fontsize=6)\nax.legend()", "Insert the following between lines 24-25:\nax.legend()", "Insert the following between lines 24-25:\nax_inset.legend()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_413", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/37/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (1, 1))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])", "Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_414", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/38/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (3, 10, 1, 10))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_415", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\n5\terror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\n6\tplt.figure(figsize=(8, 6))\n7\tcolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\n8\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\n9\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n10\tplt.ylabel('Intersite Distance', fontsize=12)\n11\tplt.ylim(0, 0.6)\n12\tplt.xticks(rotation=45)\n13\tplt.tight_layout()\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/39/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))", "Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))", "Replace lines 6-8 with:\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)", "Replace line 8 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_416", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\n5\terror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\n6\tplt.figure(figsize=(8, 6))\n7\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\n8\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n9\tplt.ylabel('Intersite Distance', fontsize=12)\n10\tplt.ylim(0, 0.6)\n11\tplt.xticks(rotation=45)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/40/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)", "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)", "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)", "Replace line 7 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_417", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=0, azim=0)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/41/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 21 with:\nax.view_init(elev=90, azim=0)", "Replace line 21 with:\nax.view_init(elev=180, azim=90)", "Replace line 21 with:\nax.view_init(elev=90, azim=90)", "Replace line 21 with:\nax.view_init(elev=0, azim=90)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_418", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=90, azim=90)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/42/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 21 with:\nax.view_init(elev=90, azim=0)", "Replace line 21 with:\nax.view_init(elev=0, azim=0)", "Replace line 21 with:\nax.view_init(elev=0, azim=90)", "Replace line 21 with:\nax.view_init(elev=180, azim=90)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_419", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdx = dy = np.ones_like(zpos) * 0.4\n13\tdz = detected_fraction_vals.flatten()\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\n17\tsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\n18\tax.set_xlabel('Log. Negativity')\n19\tax.set_ylabel('No. Measurements')\n20\tax.set_zlabel('Detected Fraction')\n21\tlevels = np.linspace(dz.min(), dz.max(), 8)\n22\tcmap = plt.get_cmap('viridis')\n23\tnorm = colors.BoundaryNorm(levels, cmap.N)\n24\tfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/43/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-17 with:\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)", "Replace lines 12-24 with:\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)", "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)", "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_420", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdz = detected_fraction_vals.flatten()\n13\tdx = dy = 0.3\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tlevels = np.linspace(dz.min(), dz.max(), 8)\n17\tcmap = plt.get_cmap('viridis')\n18\tnorm = colors.BoundaryNorm(levels, cmap.N)\n19\tcolors_discrete = cmap(norm(dz))\n20\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\n21\tax.set_xlabel('Log. Negativity')\n22\tax.set_ylabel('No. Measurements')\n23\tax.set_zlabel('Detected Fraction')\n24\tmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n25\tmappable.set_array(dz)\n26\tfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/44/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)", "Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)", "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)", "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_421", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2])\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/45/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 14 with:\nax2 = fig.add_subplot(gs[2], sharex=ax1)", "Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()", "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')", "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_422", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2], sharex=ax1)\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/46/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()", "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')", "Replace line 14 with:\nax2 = fig.add_subplot(gs[2])", "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_423", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure()\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n13\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n14\tax.set_xlabel(r'$\\epsilon_1$')\n15\tax.set_ylabel(r'$\\epsilon_2$')\n16\tax.set_zlabel('Infidelity')\n17\tax.set_zscale('log')\n18\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n19\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/47/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)", "Replace lines 10-19 with:\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n                color='magenta', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n                color='black', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)", "Replace lines 12-13 with:\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)", "Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_424", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure(figsize=(10, 8))\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n13\t                color='magenta', alpha=1,\n14\t                rstride=100, cstride=100,\n15\t                edgecolor='k', linewidth=0.5)\n16\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n17\t                color='black', alpha=1,\n18\t                rstride=100, cstride=100,\n19\t                edgecolor='k', linewidth=0.5)\n20\tax.set_xlabel(r'$\\epsilon_1$')\n21\tax.set_ylabel(r'$\\epsilon_2$')\n22\tax.set_zlabel('Infidelity')\n23\tax.set_zscale('log')\n24\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n25\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n26\tax.xaxis.pane.fill = False\n27\tax.yaxis.pane.fill = False\n28\tax.zaxis.pane.fill = False\n29\tax.xaxis.pane.set_edgecolor('black')\n30\tax.yaxis.pane.set_edgecolor('black')\n31\tax.zaxis.pane.set_edgecolor('black')\n32\tax.xaxis.pane.set_linewidth(1.0)\n33\tax.yaxis.pane.set_linewidth(1.0)\n34\tax.zaxis.pane.set_linewidth(1.0)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/48/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')", "Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')", "Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')", "Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_425", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/49/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 7-11 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)", "Replace line 9 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),", "Replace line 11 with:\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)", "Replace lines 11-20 with:\nax.fill_between([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 20))\nax.spines['bottom'].set_position(('outward', 20))"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_426", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/50/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 7-10 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))", "Replace lines 9-11 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)", "Replace lines 2-20 with:\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(8, 5))\ny_positions = [4, 3, 2, 1, 0]\nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 4.5], -0.5, 1.5, color=\"gray\", alpha=0.3)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(-1, 30)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 15))\nax.spines['bottom'].set_position(('outward', 15))\nplt.tight_layout()", "Replace line 11 with:\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_427", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/51/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 7-23 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)", "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)", "Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)", "Replace lines 13-23 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_428", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/52/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)", "Remove line 23", "Replace lines 13-14 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)", "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_429", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 2))\n7\tax.set_yticks(np.arange(0, 11, 2))\n8\tax.grid(True, which='major', color='red', linewidth=2)\n9\tax.set_xticks(np.arange(2, 9, 1))\n10\tax.set_yticks(np.arange(2, 9, 1))\n11\tax.grid(True, which='minor', color='blue', linewidth=2)\n12\tmain_diag = np.linspace(0, 10, 100)\n13\tax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\n14\tax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\n15\tsolution_x = np.linspace(0, 10, 100)\n16\tsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\n17\tax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\n18\tax.set_xlabel('Query', fontsize=12)\n19\tax.set_ylabel('Reference', fontsize=12)\n20\tax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n21\tax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\n22\tax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/53/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)", "Replace lines 6-22 with:\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 8-11 with:\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)", "Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_430", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 1))\n7\tax.set_yticks(np.arange(0, 11, 1))\n8\tax.grid(True, color=\"blue\", linewidth=2)\n9\tmain_diag = np.linspace(0, 10, 100)\n10\tax.plot(main_diag, main_diag, color='lightgray', zorder=1)\n11\tax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\n12\tsolution_x = np.linspace(0, 10, 100)\n13\tsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\n14\tax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\n15\tax.set_xlabel('Query', fontsize=12)\n16\tax.set_ylabel('Reference', fontsize=12)\n17\tax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n18\tax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\n19\tax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/54/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_431", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n12\ttheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\n13\twidth = 2 * np.pi / len(data[0])\n14\touter_radius = 1.5\n15\tsize = 0.3\n16\tfor i, ring_data in enumerate(data):\n17\t    radii = np.array(ring_data)\n18\t    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n19\t    outer_radius -= size\n20\tax.set_aspect('equal', 'box')\n21\tax.set_xticks([])\n22\tax.set_yticks([])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/55/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-18 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)", "Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")", "Replace line 12 with:\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice", "Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_432", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6,6))\n12\tsize = 0.3\n13\touter_radius = 1.5\n14\tfor i in range(len(data)):\n15\t    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n16\t    outer_radius -= size\n17\tax.set(aspect=\"equal\")\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/56/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])", "Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])", "Replace line 15 with:\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))", "Replace lines 3-17 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_433", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\tx = np.linspace(0, 1, 50)\n5\ty = np.linspace(0, np.sqrt(3)/2, 50)\n6\tX, Y = np.meshgrid(x, y)\n7\tmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\n8\tX_tri = X[mask]\n9\tY_tri = Y[mask]\n10\ttriang = tri.Triangulation(X_tri, Y_tri)\n11\tZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\n12\tplt.tricontourf(triang, Z, levels=12, cmap='viridis')\n13\tcorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\n14\ttriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\n15\trefiner = tri.UniformTriRefiner(triangle)\n16\ttrimesh = refiner.refine_triangulation(subdiv=4)\n17\tplt.triplot(trimesh, '--', color='black')\n18\tplt.gca().set_aspect('equal', adjustable='box')\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/57/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 12-17 with:\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')", "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]\nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\nplt.triplot(T, 'k-', marker='x', markersize=8)", "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')", "Remove lines 13-17"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_434", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\ttest_data = np.array([[0,0,1,0],\n5\t                      [0,1,0,0],\n6\t                      [1,0,0,0],\n7\t                      [0.25,0.25,0.5,1],\n8\t                      [0.25,0.5,0.25,1],\n9\t                      [0.5,0.25,0.25,1]])\n10\ta = test_data[:, 0]\n11\tb = test_data[:, 1]\n12\tc = test_data[:, 2]\n13\tv = test_data[:, -1]\n14\tx = 0.5 * (2. * b + c) / (a + b + c)\n15\ty = 0.5 * np.sqrt(3) * c / (a + b + c)\n16\tT = tri.Triangulation(x, y)\n17\tplt.figure()\n18\tplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\n19\tplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\n20\tplt.triplot(T, 'k-', marker='x', markersize=8)\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/58/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')", "Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')", "Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)", "Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_435", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(\n11\t    p1, p2, Z_modified,\n12\t    rstride=1, cstride=1,\n13\t    color='b', alpha=0.6,\n14\t    edgecolor='none'\n15\t)\n16\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n17\t    norm_z = (z - z_min) / (z_max - z_min)\n18\t    inv_norm_z = 1 - norm_z\n19\t    scaled_z = inv_norm_z ** contrast\n20\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n21\t    stride = int(round(stride))\n22\t    stride = max(min_stride, min(stride, max_stride))\n23\t    return stride\n24\tz_min = np.min(Z_modified)\n25\tz_max = np.max(Z_modified)\n26\tcontrast = 22.0\n27\tfor i in range(p1.shape[0]):\n28\t    z_row = Z_modified[i, :]\n29\t    avg_z = np.mean(z_row)\n30\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n31\t    indices = np.arange(0, p1.shape[1], current_stride)\n32\t    if indices[-1] != p1.shape[1] - 1:\n33\t        indices = np.append(indices, p1.shape[1] - 1)\n34\t    ax.plot(\n35\t        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n36\t        color='black', linewidth=0.5\n37\t    )\n38\tfor j in range(p2.shape[1]):\n39\t    z_col = Z_modified[:, j]\n40\t    avg_z = np.mean(z_col)\n41\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n42\t    indices = np.arange(0, p2.shape[0], current_stride)\n43\t    if indices[-1] != p2.shape[0] - 1:\n44\t        indices = np.append(indices, p2.shape[0] - 1)\n45\t    ax.plot(\n46\t        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n47\t        color='black', linewidth=0.5\n48\t    )\n49\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n50\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n51\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n52\tax.view_init(elev=30, azim=-45)\n53\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/59/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-52 with:\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()", "Replace lines 10-52 with:\nsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=45, azim=45)", "Replace lines 3-51 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')", "Replace lines 4-51 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_436", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\n11\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n12\t    norm_z = (z - z_min) / (z_max - z_min)\n13\t    inv_norm_z = 1 - norm_z\n14\t    scaled_z = inv_norm_z ** contrast\n15\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n16\t    stride = int(round(stride))\n17\t    stride = max(min_stride, min(stride, max_stride))\n18\t    return stride\n19\tz_min = np.min(Z_modified)\n20\tz_max = np.max(Z_modified)\n21\tcontrast = 22.0\n22\tfor i in range(p1.shape[0]):\n23\t    z_row = Z_modified[i, :]\n24\t    avg_z = np.mean(z_row)\n25\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n26\t    indices = np.arange(0, p1.shape[1], current_stride)\n27\t    if indices[-1] != p1.shape[1] - 1:\n28\t        indices = np.append(indices, p1.shape[1] - 1)\n29\t    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\n30\tfor j in range(p2.shape[1]):\n31\t    z_col = Z_modified[:, j]\n32\t    avg_z = np.mean(z_col)\n33\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n34\t    indices = np.arange(0, p2.shape[0], current_stride)\n35\t    if indices[-1] != p2.shape[0] - 1:\n36\t        indices = np.append(indices, p2.shape[0] - 1)\n37\t    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\n38\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n39\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n40\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n41\tax.view_init(elev=45, azim=45)\n42\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/60/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()", "Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)", "Replace lines 4-41 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)", "Replace lines 3-41 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_437", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/61/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 18 with:\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)", "Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_438", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/62/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-18 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')", "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_439", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5],\n6\t                              [1, 0, 2.8],\n7\t                              [-1, -1, 2.2],\n8\t                              [1, -1, 2.6],\n9\t                              [-1, 1, 2.7]])\n10\tfinal_position = np.array([0, 0, 0])\n11\thorizontal_window = np.array([[1, 1, 0],\n12\t                             [1, -1, 0],\n13\t                             [-1, -1, 0],\n14\t                             [-1, 1, 0]])\n15\tvertical_window = np.array([[0.5, 1, 2],\n16\t                            [-0.5, 1, 2],\n17\t                            [-0.5, 1, 1],\n18\t                            [0.5, 1, 1]])\n19\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n20\t        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n21\t        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n22\t        'b-', linewidth=3, label='Target (Horizontal Window)')\n23\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n24\t        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n25\t        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n26\t        'k-', linewidth=2, label='Window (Vertical)')\n27\tfor pos in initial_positions:\n28\t    ax.plot([pos[0], final_position[0]],\n29\t            [pos[1], final_position[1]],\n30\t            [pos[2], final_position[2]], 'r')\n31\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n32\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n33\tax.set_xlabel('x [m]')\n34\tax.set_ylabel('y [m]')\n35\tax.set_zlabel('-z [m]')\n36\tax.set_title('Quadrotor Trajectories with Windows')\n37\tax.legend()\n38\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/63/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-32 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')", "Replace lines 5-37 with:\ninitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)", "Replace lines 5-32 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')", "Replace lines 5-32 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_440", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\n6\tfinal_position = np.array([0, 0, 0])\n7\thorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\n8\tvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\n9\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\n10\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\n11\tfor pos in initial_positions:\n12\t    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\n13\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n14\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n15\tax.set_xlabel('x [m]')\n16\tax.set_ylabel('y [m]')\n17\tax.set_zlabel('-z [m]')\n18\tax.set_title('Quadrotor Trajectories with Windows')\n19\tax.legend()\n20\tax.xaxis.pane.fill = False\n21\tax.yaxis.pane.fill = False\n22\tax.zaxis.pane.fill = False\n23\tax.xaxis.pane.set_edgecolor('black')\n24\tax.yaxis.pane.set_edgecolor('black')\n25\tax.zaxis.pane.set_edgecolor('black')\n26\tax.xaxis.pane.set_linewidth(1.0)\n27\tax.yaxis.pane.set_linewidth(1.0)\n28\tax.zaxis.pane.set_linewidth(1.0)\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/64/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-28 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()", "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()", "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0],\n                             [1, -1, 0],\n                             [-1, -1, 0],\n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()", "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_441", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\n31\tplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\n32\tplt.gca().set_aspect('equal', adjustable='box')\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/65/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 30-31 with:\nlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\nax.legend(handles=legend_elements, loc='upper right', fontsize=12)", "Replace lines 21-27 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)", "Replace lines 26-27 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)", "Replace lines 23-27 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_442", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n31\t                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\n32\tax.legend(handles=legend_elements, loc='upper right', fontsize=12)\n33\tplt.gca().set_aspect('equal', adjustable='box')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/66/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 26-32 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)", "Replace lines 30-32 with:\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)", "Replace lines 21-32 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)", "Replace lines 23-32 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_443", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', '*', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/67/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()", "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()", "Replace line 6 with:\nhatches = ['o', '*', '.', '\\\\']", "Replace line 6 with:\nhatches = ['/', 'X', '|', '\\\\']"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_444", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', 'X', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/68/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()", "Replace line 6 with:\nhatches = ['o', 'X', '.', '\\\\']", "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()", "Replace line 6 with:\nhatches = ['/', '*', '|', '\\\\']"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_445", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\tplt.tight_layout()\n9\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/69/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))", "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])", "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])", "Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_446", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\t    ax.spines['top'].set_visible(False)\n9\t    ax.spines['right'].set_visible(False)\n10\t    ax.spines['bottom'].set_visible(True)\n11\t    ax.spines['left'].set_visible(True)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/70/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Remove lines 8-11", "Replace lines 10-11 with:\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))", "Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])", "Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_447", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def _gen_axes_spines(self):\n21\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n22\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n23\t            return {'polar': spine}\n24\t    register_projection(RadarAxes)\n25\t    return theta\n26\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n27\tvalues = {\n28\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n29\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n30\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n31\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n32\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n33\t}\n34\tnum_vars = len(labels)\n35\ttheta = radar_factory(num_vars, frame='polygon')\n36\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n37\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n38\tfor i, (factor, values_list) in enumerate(values.items()):\n39\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n40\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n41\tax.set_varlabels(labels)\n42\tax.set_rgrids([0.2, 0.4, 0.6, 0.8])\n43\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n44\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/71/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-42 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)", "Replace lines 3-43 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)", "Replace lines 39-43 with:\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')", "Replace lines 20-42 with:\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level,\n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_448", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def draw_polygon_grid(self, num_levels=4):\n21\t            for level in np.linspace(0.2, 1.0, num_levels):\n22\t                poly = RegularPolygon((0, 0), num_vars, radius=level,\n23\t                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n24\t                self.add_patch(poly)\n25\t        def _gen_axes_spines(self):\n26\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n27\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n28\t            return {'polar': spine}\n29\t    register_projection(RadarAxes)\n30\t    return theta\n31\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n32\tvalues = {\n33\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n34\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n35\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n36\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n37\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n38\t}\n39\tnum_vars = len(labels)\n40\ttheta = radar_factory(num_vars, frame='polygon')\n41\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n42\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n43\tax.draw_polygon_grid(num_levels=5)\n44\tfor i, (factor, values_list) in enumerate(values.items()):\n45\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n46\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n47\tax.set_varlabels(labels)\n48\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n49\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/72/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 20-48 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')", "Replace lines 3-48 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)", "Replace lines 4-43 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)", "Replace lines 20-47 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_449", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.colors as mcolors\n4\tdata = np.arange(2, 19)\n5\tcmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n6\tbounds = [2, 3, 7, 9, 15, 18]\n7\tnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n8\tsegments_per_ring = [6, 6, 4, 1]\n9\tcolors = []\n10\tstart = 0\n11\tfor segment_count in segments_per_ring:\n12\t    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n13\t    colors.append(ring_colors)\n14\t    start += segment_count\n15\tsizes = [[1] * count for count in segments_per_ring]\n16\tfig, ax = plt.subplots(figsize=(6, 6))\n17\tax.axis('equal')\n18\tradius = [1.5, 1.0, 0.5, 0.25]\n19\tfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n20\t    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n21\t                       wedgeprops=dict(width=0.3, edgecolor='white'))\n22\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n23\tsm.set_array([])\n24\tcbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\n25\tcbar.set_label(\"Discrete intervals, some other units\")\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/73/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)", "Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)", "Replace lines 18-24 with:\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)", "Replace lines 3-25 with:\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)\ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_450", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib as mpl\n4\tdata = np.arange(2, 19)\n5\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n6\tax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\n7\tax.grid(False)\n8\tcmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n9\tbounds = [2, 3, 7, 9, 15, 18]\n10\tnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\n11\tradii = np.linspace(0.2, 1, 4)\n12\tbold_segments = [3, 5, 6, 11, 12, 16]\n13\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n14\t    n = stop - start\n15\t    dtheta = 2 * np.pi / n\n16\t    for i in range(n):\n17\t        segment_value = data[start + i]\n18\t        color = cmap(norm(segment_value))\n19\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\n20\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n21\t    n = stop - start\n22\t    dtheta = 2 * np.pi / n\n23\t    for i in range(n):\n24\t        lw = 4 if (start + i + 1) in bold_segments else 2\n25\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\n26\tax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\n27\tfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\n28\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/74/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n                       wedgeprops=dict(width=0.3, edgecolor='white'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")", "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")", "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")", "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_451", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\n9\tplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\n10\tplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\n12\tplt.grid(True)\n13\tfor xi, yi1, yi2 in zip(x, y1, y2):\n14\t    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n15\t    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n16\t    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n17\t    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/75/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')", "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")", "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)", "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_452", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\")\n9\tplt.plot(x, y2, label=\"y2\")\n10\tplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\n12\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/76/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')", "Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')", "Replace lines 8-11 with:\nplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\nplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\nplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\nplt.grid(True)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')", "Insert the following between lines 11-12:\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_453", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tgames = ['I', 'II', 'III', 'IV', 'V']\n5\tplayer_a_scores = [5, 15, 22, 20, 25]\n6\tplayer_b_scores = [25, 32, 34, 30, 27]\n7\tbar_width = 0.35\n8\tindex = np.arange(len(games))\n9\toffset = bar_width / 2\n10\tfor i, score in enumerate(player_a_scores):\n11\t    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\n12\tfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n13\t    height = b_score - a_score\n14\t    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\n15\tax.set_xlabel(\"Games\")\n16\tax.set_ylabel(\"Score\")\n17\tax.set_title(\"Scores by number of game and players\")\n18\tax.set_xticks(index)\n19\tax.set_xticklabels(games)\n20\tax.set_ylim(0, 60)\n21\tfor i, score in enumerate(player_a_scores):\n22\t    ax.annotate(f'{score}',\n23\t                xy=(index[i] - offset, score),\n24\t                xytext=(0, 3),\n25\t                textcoords=\"offset points\",\n26\t                ha='center', va='bottom')\n27\tfor i, b_score in enumerate(player_b_scores):\n28\t    ax.annotate(f'{b_score}',\n29\t                xy=(index[i] + offset, b_score),\n30\t                xytext=(0, 3),\n31\t                textcoords=\"offset points\",\n32\t                ha='center', va='bottom')\n33\tax.legend([\"Player A\", \"Player B\"], loc='upper right')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/77/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-33 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()", "Replace lines 3-33 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()", "Replace lines 3-14 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')", "Replace lines 3-33 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_454", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tgames = ['I', 'II', 'III', 'IV', 'V']\n4\tplayer_a_scores = [5, 15, 22, 20, 25]\n5\tplayer_b_scores = [25, 32, 34, 30, 27]\n6\tbar_width = 0.35\n7\tindex = np.arange(len(games))\n8\tfig, ax = plt.subplots()\n9\tbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\n10\tbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\n11\tax.set_xlabel('Games')\n12\tax.set_ylabel('Score')\n13\tax.set_title('Scores by number of game and players')\n14\tax.set_xticks(index)\n15\tax.set_xticklabels(games)\n16\tax.legend()\n17\tfor rect in bar1:\n18\t    height = rect.get_height()\n19\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n20\tfor rect in bar2:\n21\t    height = rect.get_height()\n22\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/78/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-22 with:\nfig, ax = plt.subplots()\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')", "Replace lines 3-22 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()", "Replace lines 9-22 with:\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')", "Replace lines 3-22 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_455", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(12, 6))\n3\tax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\n4\tax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n5\t            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n6\t            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n7\tcategories = {\n8\t    \"ENVIRONMENT\": (0.25, 0.9),\n9\t    \"MATERIAL\": (0.4, 0.85),\n10\t    \"METHOD\": (0.55, 0.8),\n11\t    \"PEOPLE\": (0.25, 0.1),\n12\t    \"MEASUREMENT\": (0.4, 0.15),\n13\t    \"MACHINE\": (0.55, 0.2)\n14\t}\n15\tfor cat, (x, y) in categories.items():\n16\t    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n17\t                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n18\tcauses = {\n19\t    \"ENVIRONMENT\": [\"Bad conditions\"],\n20\t    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n21\t    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n22\t    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n23\t    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n24\t    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n25\t}\n26\tpositions = {\n27\t    \"ENVIRONMENT\": [(0.3, 0.8)],\n28\t    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n29\t    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n30\t    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n31\t    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n32\t    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n33\t}\n34\tfor cat, cause_list in causes.items():\n35\t    for i, cause in enumerate(cause_list):\n36\t        x_pos, y_pos = positions[cat][i]\n37\t        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n38\t                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n39\t                    fontsize=9, color=\"black\")\n40\tax.axis('off')\n41\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/79/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 2-40 with:\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white',\n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:\n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\n    else:\n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()", "Replace lines 8-38 with:\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",", "Replace lines 4-40 with:\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')\nplt.tight_layout()", "Replace lines 1-40 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_456", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tplt.figure(figsize=(15, 8))\n4\tplt.style.use('default')\n5\tplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\n6\tplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\n7\tcircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\n8\tplt.gca().add_patch(circle)\n9\tplt.gca().set_aspect('equal', adjustable='box')\n10\tcategories = {\n11\t    'ENVIRONMENT': (2, 8),\n12\t    'MATERIAL': (5, 8),\n13\t    'METHOD': (8, 8),\n14\t    'PEOPLE': (2, 2),\n15\t    'MEASUREMENT': (5, 2),\n16\t    'MACHINE': (8, 2)\n17\t}\n18\tcauses = {\n19\t    'ENVIRONMENT': ['Bad conditions'],\n20\t    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n21\t    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n22\t    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n23\t    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n24\t    'MACHINE': ['Faulty equipment', 'Compatibility']\n25\t}\n26\tfor category, (x, y) in categories.items():\n27\t    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n28\t    box_width = len(category) * 0.2 + 0.4\n29\t    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n30\t                        facecolor='tab:blue', edgecolor='black')\n31\t    plt.gca().add_patch(rect)\n32\t    plt.text(x, y, category, ha='center', va='center', color='white',\n33\t             fontsize=8, fontweight='bold')\n34\t    causes_list = causes[category]\n35\t    spacing = 0.8\n36\t    if y > 5:\n37\t        for i, cause in enumerate(causes_list):\n38\t            y_pos = y - 0.7 - i * spacing\n39\t            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n40\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n41\t                    fontsize=8)\n42\t    else:\n43\t        for i, cause in enumerate(causes_list):\n44\t            y_pos = y + 0.7 + i * spacing\n45\t            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n46\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n47\t                    fontsize=8)\n48\tplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n49\t         fontsize=8, fontweight='bold')\n50\tplt.xlim(-1.2, 11.2)\n51\tplt.ylim(0, 10)\n52\tplt.axis('off')\n53\tplt.gca().set_aspect('equal', adjustable='box')\n54\tplt.tight_layout()\n55\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/80/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-54 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)", "Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')", "Replace lines 2-53 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')", "Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_457", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\timport numpy as np\n5\treleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n6\t            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n7\t            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n8\t            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n9\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n10\t         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n11\t         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n12\t         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n13\t         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n14\t         '2014-10-26', '2014-10-18', '2014-08-26']\n15\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n16\tplt.figure(figsize=(15, 8))\n17\tfig, ax = plt.subplots(figsize=(15, 8))\n18\tax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\n19\tfor i, (version, date) in enumerate(zip(releases, dates)):\n20\t    major_version = version.split('.')[0]\n21\t    if version.endswith('.0'):\n22\t        color = 'red'\n23\t        alpha = 1.0\n24\t        weight = 2\n25\t    else:\n26\t        color = 'red'\n27\t        alpha = 0.5\n28\t        weight = 1\n29\t    if i % 2 == 0:\n30\t        y_text = 0.1\n31\t        y_start = 0\n32\t        y_end = 0.08\n33\t    else:\n34\t        y_text = -0.1\n35\t        y_start = 0\n36\t        y_end = -0.08\n37\t    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n38\t    if y_text > 0:\n39\t        ax.text(date, y_text, version, ha='center', va='bottom')\n40\t    else:\n41\t        ax.text(date, y_text, version, ha='center', va='top')\n42\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n43\tax.xaxis.set_major_locator(mdates.YearLocator())\n44\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n45\tax.yaxis.set_visible(False)\n46\tax.set_ylim(-0.3, 0.3)\n47\tplt.grid(False)\n48\tax.spines['left'].set_visible(False)\n49\tax.spines['right'].set_visible(False)\n50\tax.spines['top'].set_visible(False)\n51\tplt.tight_layout()\n52\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/81/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-46 with:\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\nversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(15, 4))\nax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(versions, dates)):\n    color = 'black' if not version.endswith('.0') else 'red'\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n    else:\n        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.15, 0.15)", "Replace lines 1-51 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)", "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)", "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_458", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\n5\tversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n6\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n7\tfig, ax = plt.subplots(figsize=(15, 4))\n8\tax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\n9\tfor i, (version, date) in enumerate(zip(versions, dates)):\n10\t    color = 'black' if not version.endswith('.0') else 'red'\n11\t    if i % 2 == 0:\n12\t        y_text = 0.1\n13\t        y_start = 0\n14\t        y_end = 0.08\n15\t    else:\n16\t        y_text = -0.1\n17\t        y_start = 0\n18\t        y_end = -0.08\n19\t    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n20\t    if y_text > 0:\n21\t        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n22\t    else:\n23\t        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\n24\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n25\tax.xaxis.set_major_locator(mdates.YearLocator())\n26\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n27\tax.yaxis.set_visible(False)\n28\tax.set_ylim(-0.15, 0.15)\n29\tplt.grid(False)\n30\tax.spines['left'].set_visible(False)\n31\tax.spines['right'].set_visible(False)\n32\tax.spines['top'].set_visible(False)\n33\tplt.tight_layout()\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/82/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-28 with:\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):\n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)", "Replace lines 1-33 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)", "Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)", "Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_459", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\tfrom mpl_toolkits.mplot3d import Axes3D\n2\timport matplotlib.pyplot as plt\n3\timport numpy as np\n4\tx = np.linspace(0, 80, 20)\n5\ty = np.linspace(0, 250, 20)\n6\tz = np.linspace(-450, 0, 20)\n7\tX, Z = np.meshgrid(x, z)\n8\tY, Z = np.meshgrid(y, z)\n9\tX2, Y2 = np.meshgrid(x, y)\n10\tZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\n11\tZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\n12\tZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\txz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\n16\tyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\n17\txy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\n18\tcbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\n19\tax.set_xlabel(\"X [km]\")\n20\tax.set_ylabel(\"Y [km]\")\n21\tax.set_zlabel(\"Z [m]\")\n22\tax.set_xlim(0, 80)\n23\tax.set_ylim(0, 250)\n24\tax.set_zlim(-450, 0)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/83/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)", "Replace lines 1-24 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()", "Replace lines 1-18 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)", "Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_460", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tNx, Ny, Nz = 100, 300, 500\n4\tX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\n5\tdata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\n6\tkw = {\n7\t    'vmin': data.min(),\n8\t    'vmax': data.max(),\n9\t    'levels': np.linspace(data.min(), data.max(), 10),\n10\t}\n11\tfig = plt.figure(figsize=(5, 4))\n12\tax = fig.add_subplot(111, projection='3d')\n13\t_ = ax.contourf(\n14\t    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n15\t    zdir='z', offset=0, **kw\n16\t)\n17\txmin, xmax = X.min(), X.max()\n18\tymin, ymax = Y.min(), Y.max()\n19\tzmin, zmax = Z.min(), Z.max()\n20\tax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\n21\tedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\n22\tax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\n23\tax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\n24\tax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\n25\tax.set(\n26\t    xlabel='X [km]',\n27\t    ylabel='Y [km]',\n28\t    zlabel='Z [m]',\n29\t    zticks=[0, -150, -300, -450],\n30\t)\n31\tax.view_init(40, -30, 0)\n32\tax.set_box_aspect(None, zoom=0.9)\n33\tfig.colorbar(C, ax=ax, pad=0.1)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/84/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-33 with:\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)", "Replace lines 1-33 with:\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)\nY, Z = np.meshgrid(y, z)\nX2, Y2 = np.meshgrid(x, y)\nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)", "Replace lines 1-33 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()", "Insert the following between lines 15-16:\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_461", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import ConnectionPatch\n4\tsizes = [56, 27, 17]\n5\tlabels = ['Disapprove', 'Approve', 'Undecided']\n6\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n7\texplode = (0.1, 0, 0)\n8\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n9\tage_sizes = [54, 33, 7, 6]\n10\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n11\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n12\tfig.subplots_adjust(wspace=0)\n13\tangle = -180 * sizes[1] / sum(sizes)\n14\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n15\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n16\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n17\tbottom = 1\n18\twidth = 0.2\n19\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n20\t    bottom -= height / 100\n21\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n22\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n23\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n24\tax2.axis('off')\n25\tax2.set_xlim(-2.5 * width, 2.5 * width)\n26\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n27\tcenter, r = wedges[1].center, wedges[1].r\n28\tbar_height = sum(age_sizes) / 100\n29\tx = r * np.cos(np.pi / 180 * theta2) + center[0]\n30\ty = r * np.sin(np.pi / 180 * theta2) + center[1]\n31\tcon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n32\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n33\tax2.add_artist(con)\n34\tx = r * np.cos(np.pi / 180 * theta1) + center[0]\n35\ty = r * np.sin(np.pi / 180 * theta1) + center[1]\n36\tcon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n37\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n38\tax2.add_artist(con)\n39\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/85/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)", "Replace lines 7-37 with:\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')", "Replace line 7 with:\nexplode = (0, 0.1, 0)", "Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_462", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsizes = [56, 27, 17]\n4\tlabels = ['Disapprove', 'Approve', 'Undecided']\n5\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n6\texplode = (0.1, 0, 0)\n7\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n8\tage_sizes = [54, 33, 7, 6]\n9\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n10\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n11\tfig.subplots_adjust(wspace=0)\n12\tangle = -180 * sizes[1] / sum(sizes)\n13\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n14\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n15\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n16\tbottom = 1\n17\twidth = 0.2\n18\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n19\t    bottom -= height / 100\n20\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n21\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n22\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n23\tax2.axis('off')\n24\tax2.set_xlim(-2.5 * width, 2.5 * width)\n25\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n26\tcenter, r = wedges[1].center, wedges[1].r\n27\tbar_height = sum(age_sizes) / 100\n28\tx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\n29\ty_top = r * np.sin(np.pi / 180 * theta2) + center[1]\n30\tax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\n31\tx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\n32\ty_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\n33\tax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/86/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)", "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)", "Replace line 6 with:\nexplode = (0, 0.1, 0)", "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_463", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.arange(10)\n4\ty = np.arange(10)\n5\tX, Y = np.meshgrid(x, y)\n6\tZ1 = np.sin(X/2) + np.cos(Y/2)\n7\tZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\n8\tZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\n9\tfig = plt.figure()\n10\tax = fig.add_subplot(111, projection='3d')\n11\tax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\n12\tax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\n13\tax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\n14\tax.set_xlabel('x')\n15\tax.set_ylabel('y')\n16\tax.set_zlabel('z')\n17\tax.set_xlim(0, 9)\n18\tax.set_ylim(0, 9)\n19\tax.set_zlim(0, 5)\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/87/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=2, cstride=2, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z3))", "Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))", "Replace lines 3-19 with:\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)", "Replace lines 1-13 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_464", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.colors import Normalize\n5\tdef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"CMRmap\"):\n6\t    if norm is None:\n7\t        norm = Normalize()\n8\t    colors = plt.get_cmap(cmap)(norm(array))\n9\t    if value_direction == 'x':\n10\t        nz, ny = array.shape\n11\t        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n12\t        xi = np.full_like(yi, pos)\n13\t    elif value_direction == 'y':\n14\t        nx, nz = array.shape\n15\t        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n16\t        yi = np.full_like(zi, pos)\n17\t    elif value_direction == 'z':\n18\t        ny, nx = array.shape\n19\t        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n20\t        zi = np.full_like(xi, pos)\n21\t    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\n22\tfig = plt.figure()\n23\tax = fig.add_subplot(projection='3d')\n24\tax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\n25\tnx, ny, nz = 8, 10, 5\n26\tdata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\n27\tdata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\n28\tdata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\n29\tshow(ax, data_xy)\n30\tshow(ax, data_yz, value_direction='x')\n31\tshow(ax, data_zx, value_direction='y', pos=ny)\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/88/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)", "Replace line 5 with:\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):", "Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)", "Replace lines 1-31 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_465", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\")\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/89/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Insert the following between lines 9-10:\naggregated_data.columns = aggregated_data.columns.droplevel()", "Replace line 14 with:\nplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)", "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")", "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_466", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/90/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")", "Replace line 14 with:\nplt.legend(title=\"Other Details\")", "Replace lines 10-14 with:\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")", "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_467", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/91/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")", "Replace line 11 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')", "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")", "Replace line 12 with:\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_468", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, color=\"#1f77b4\", edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/92/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")", "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")", "Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")", "Replace line 11 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_469", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left')\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/93/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 15 with:\nplt.legend(title='Payment Method', loc='center right')", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_470", "question": "<image_1>\n\nOur goal is to reproduce the visualization in the image shown. The code snippet below currently does not accurately generate the target visualization:\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_without_image/94/target.png", "image_2": "", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 15 with:\nplt.legend(title='Payment Method')", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left')", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify Without Image", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_471", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(1000)\n5\ty = np.random.rand(1000) * 2 - 1\n6\tlabels = np.random.choice([0, 1], size=1000)\n7\tplt.figure(figsize=(8, 8))\n8\tplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n9\tplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n10\tplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\n11\tplt.axvline(0, color='black', linestyle=':', linewidth=1)\n12\tplt.xlabel(r'$P(F_{i+1} | F_i)$')\n13\tplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n14\tplt.legend(title='Boundary')\n15\tplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\n16\tplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\n17\tplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n18\tplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n19\tplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n20\tplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n21\tplt.xlim(-0.1, 1.1)\n22\tplt.ylim(-1.1, 1.1)\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/1/target.png", "image_2": "modify_with_image/1/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()", "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='inout')", "Replace lines 4-22 with:\nfrom matplotlib.gridspec import GridSpec\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_histy.tick_params(axis='both', direction='in')", "Insert the following between lines 22-23:\nplt.tick_params(axis='both', direction='in')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_472", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.gridspec import GridSpec\n5\tx = np.random.rand(1000)\n6\ty = np.random.rand(1000) * 2 - 1\n7\tlabels = np.random.choice([0, 1], size=1000)\n8\tfig = plt.figure(figsize=(8, 8))\n9\tgs = GridSpec(4, 4, figure=fig)\n10\tax_main = fig.add_subplot(gs[1:4, 0:3])\n11\tax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\n12\tax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\n13\tax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\n14\tax_main.axvline(0, color='black', linestyle=':', linewidth=1)\n15\tax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\n16\tax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\n17\tax_main.legend(title='Boundary')\n18\tax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\n19\tax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\n20\tax_main.set_xlim(-0.1, 1.1)\n21\tax_main.set_ylim(-1.1, 1.1)\n22\tax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\n23\tax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\n24\tax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\n25\tax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\n26\tax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\n27\tax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\n28\tax_histx.label_outer()\n29\tax_histy.label_outer()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/2/target.png", "image_2": "modify_with_image/2/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)", "Replace lines 3-29 with:\nfrom matplotlib.gridspec import GridSpec\nnp.random.seed(0)\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nfig = plt.figure(figsize=(8, 8))\ngs = GridSpec(4, 4, figure=fig)\nax_main = fig.add_subplot(gs[1:4, 0:3])\nax_main.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nax_main.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nax_main.axhline(0.5, color='black', linestyle=':', linewidth=1)\nax_main.axvline(0, color='black', linestyle=':', linewidth=1)\nax_main.set_xlabel(r'$P(F_{i+1} | F_i)$')\nax_main.set_ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nax_main.legend(title='Boundary')\nax_main.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nax_main.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nax_main.set_xlim(-0.1, 1.1)\nax_main.set_ylim(-1.1, 1.1)\nax_histx = fig.add_subplot(gs[0, 0:3], sharex=ax_main)\nax_histy = fig.add_subplot(gs[1:4, 3], sharey=ax_main)\nax_histx.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, density=True)\nax_histx.hist(x[labels == 1], bins=30, color='red', alpha=0.3, density=True)\nax_histy.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nax_histy.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nax_histx.label_outer()\nax_histy.label_outer()\nax_main.tick_params(axis='both', direction='in')", "Replace lines 4-29 with:\nx = np.random.rand(1000)\ny = np.random.rand(1000) * 2 - 1\nlabels = np.random.choice([0, 1], size=1000)\nplt.figure(figsize=(8, 8))\nplt.scatter(x[labels == 0], y[labels == 0], c='blue', label='False', alpha=0.6)\nplt.scatter(x[labels == 1], y[labels == 1], c='red', label='True', alpha=0.6)\nplt.axhline(0.5, color='black', linestyle=':', linewidth=1)\nplt.axvline(0, color='black', linestyle=':', linewidth=1)\nplt.xlabel(r'$P(F_{i+1} | F_i)$')\nplt.ylabel(r'$P(F_{i+2} | F_{i+1}) - P(F_{i+1} | F_i)$')\nplt.legend(title='Boundary')\nplt.hist(x[labels == 0], bins=30, color='blue', alpha=0.3, orientation='vertical', density=True)\nplt.hist(x[labels == 1], bins=30, color='red', alpha=0.3, orientation='vertical', density=True)\nplt.hist(y[labels == 0], bins=30, color='blue', alpha=0.3, orientation='horizontal', density=True)\nplt.hist(y[labels == 1], bins=30, color='red', alpha=0.3, orientation='horizontal', density=True)\nplt.text(-0.1, -1, r'$\\alpha_1$', fontsize=12)\nplt.text(1.02, 0.5, r'$\\alpha_2$', fontsize=12)\nplt.xlim(-0.1, 1.1)\nplt.ylim(-1.1, 1.1)\nplt.tick_params(axis='both', direction='in')", "Insert the following between lines 29-30:\nax_histy.tick_params(axis='both', direction='in')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_473", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.patches as mpatches\n4\tnp.random.seed(0)\n5\tcategories = [\n6\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n7\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n8\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n9\t]\n10\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n11\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n12\tdata = np.random.randint(50, 150, (8, 5, 5))\n13\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n14\taxes = axes.flatten()\n15\tfor i, ax in enumerate(axes[:-1]):\n16\t    for j, level in enumerate(levels):\n17\t        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n18\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n19\t    ax.set_title(categories[i])\n20\t    ax.set_xlim(0, 500)\n21\tfig.delaxes(axes[-1])\n22\thandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\n23\tfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/3/target.png", "image_2": "modify_with_image/3/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace line 23 with:\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')\n        ax.set_title(categories[i])\n        ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace lines 3-23 with:\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_474", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tcategories = [\n5\t    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n6\t    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n7\t    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n8\t]\n9\tlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\n10\tcolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\n11\tdata = np.random.randint(50, 150, (8, 5, 5))\n12\tfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\n13\taxes = axes.flatten()\n14\tfor i, ax in enumerate(axes[:-1]):\n15\t    for j, level in enumerate(levels):\n16\t        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=np.sum(data[i, :j], axis=0))\n17\t        ax.set_title(categories[i])\n18\t        ax.set_xlim(0, 500)\n19\tfig.delaxes(axes[-1])\n20\tfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\n21\tplt.tight_layout()\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/4/target.png", "image_2": "modify_with_image/4/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace lines 3-20 with:\nimport matplotlib.patches as mpatches\nnp.random.seed(0)\ncategories = [\n    \"Current smoking\", \"Risky alcohol consumption\", \"Inadequate diet\",\n    \"Obese\", \"Overweight/obese\", \"Risky waist circumference\",\n    \"Inadequate activity (leisure)\", \"Inadequate activity (all)\"\n]\nlevels = [\"1 - most disadvantaged\", \"2\", \"3\", \"4\", \"5 - least disadvantaged\"]\ncolors = ['#FF0000', '#FF7F50', '#BEBEBE', '#ADD8E6', '#0000FF']\ndata = np.random.randint(50, 150, (8, 5, 5))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    for j, level in enumerate(levels):\n        left = np.zeros(5) if j == 0 else np.sum(data[i, :j], axis=0)\n        ax.barh(level, data[i, j], color=colors, edgecolor='black', left=left)\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nhandles = [mpatches.Patch(color=col, label=lab) for col, lab in zip(colors, ['HC', 'H', 'N', 'L', 'LC'])]\nfig.legend(handles=handles, loc='lower left', ncol=5, bbox_to_anchor=(0.5, -0.05))", "Replace line 16 with:\n        ax.barh(level, data[i, j], color=colors, edgecolor='black')", "Replace lines 11-21 with:\ndata = np.random.randint(50, 150, (5, len(categories), len(colors)))\nfig, axes = plt.subplots(nrows=3, ncols=3, figsize=(12, 10))\naxes = axes.flatten()\nfor i, ax in enumerate(axes[:-1]):\n    bottom = np.zeros(len(levels))\n    for j, color in enumerate(colors):\n        ax.barh(levels, data[:, i, j], left=bottom, color=color, edgecolor='black')\n        bottom += data[:, i, j]\n    ax.set_title(categories[i])\n    ax.set_xlim(0, 500)\nfig.delaxes(axes[-1])\nfig.legend(['HC', 'H', 'N', 'L', 'LC'], loc='lower center', ncol=5, bbox_to_anchor=(0.5, -0.05))\nplt.tight_layout()\nplt.subplots_adjust(bottom=0.15)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_475", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle='--', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle='--', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/5/target.png", "image_2": "modify_with_image/5/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)", "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')", "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)", "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle=':', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle=':', linewidth=0.7)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_476", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tepochs = np.arange(0, 101, 1)\n5\tacc_rat_natural = np.clip(30 + 0.7 * epochs + np.random.normal(0, 2, len(epochs)), 30, 95)\n6\tacc_dat_natural = np.clip(35 + 0.6 * epochs + np.random.normal(0, 2, len(epochs)), 30, 90)\n7\tacc_rat_adversarial = np.clip(5 + 0.5 * epochs + np.random.normal(0, 2, len(epochs)), 5, 50)\n8\tacc_dat_adversarial = np.clip(0 + 0.55 * epochs + np.random.normal(0, 2, len(epochs)), 0, 55)\n9\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n10\tax1.plot(epochs, acc_rat_natural, label='Accelerated RAT', color='tab:blue')\n11\tax1.plot(epochs, acc_dat_natural, label='Accelerated DAT', color='tab:orange')\n12\tax1.set_title('Natural accuracy')\n13\tax1.set_xlabel('Epoch')\n14\tax1.set_ylabel('Accuracy (%)')\n15\tax1.grid(visible=True, linestyle=':', linewidth=0.7)\n16\tax1.set_xlim([0, 100])\n17\tax1.set_ylim([30, 100])\n18\tax1.legend()\n19\tax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\n20\tax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\n21\tax2.set_title('Adversarial accuracy')\n22\tax2.set_xlabel('Epoch')\n23\tax2.set_ylabel('Accuracy (%)')\n24\tax2.grid(visible=True, linestyle=':', linewidth=0.7)\n25\tax2.set_xlim([0, 100])\n26\tax2.set_ylim([0, 55])\n27\tax2.legend()\n28\tplt.tight_layout()\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/6/target.png", "image_2": "modify_with_image/6/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='long dash with offset', linewidth=0.7)", "Replace lines 15-24 with:\nax1.grid(True)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True)", "Replace lines 15-24 with:\nax1.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax1.minorticks_on()\nax1.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(True, which='both', linestyle='-', linewidth=0.5, color='gray')\nax2.minorticks_on()\nax2.grid(which='minor', linestyle=':', linewidth=0.5, color='gray')", "Replace lines 15-24 with:\nax1.grid(visible=True, linestyle='--', linewidth=0.7)\nax1.set_xlim([0, 100])\nax1.set_ylim([30, 100])\nax1.legend()\nax2.plot(epochs, acc_rat_adversarial, label='Accelerated RAT', color='tab:blue')\nax2.plot(epochs, acc_dat_adversarial, label='Accelerated DAT', color='tab:orange')\nax2.set_title('Adversarial accuracy')\nax2.set_xlabel('Epoch')\nax2.set_ylabel('Accuracy (%)')\nax2.grid(visible=True, linestyle='--', linewidth=0.7)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_477", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tk = np.linspace(0, 20, 100)\n5\tA = np.linspace(0, 20, 100)\n6\tK, A = np.meshgrid(k, A)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\n11\tax.set_xlabel('k')\n12\tax.set_ylabel('|A|')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/7/target.png", "image_2": "modify_with_image/7/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')", "Replace lines 4-12 with:\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')", "Replace lines 4-12 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)\nax.set_xlabel(r'$k$')\nax.set_ylabel(r'$|A|$')", "Replace lines 10-13 with:\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_478", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tA = np.linspace(0, 20, 100)\n5\tk = np.linspace(0, 20, 100)\n6\tA, k = np.meshgrid(A, k)\n7\tZ = np.exp(-A * k / 100)\n8\tfig = plt.figure()\n9\tax = fig.add_subplot(111, projection='3d')\n10\tax.plot_wireframe(k, A, Z, cmap='viridis', linewidth=0.5)\n11\tax.set_xlabel(r'$k$')\n12\tax.set_ylabel(r'$|A|$')\n13\tax.set_zlabel('Value')\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/8/target.png", "image_2": "modify_with_image/8/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-12 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='b')\nax.set_xlabel('k')\nax.set_ylabel('|A|')", "Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nwire = ax.plot_wireframe(k, A, Z, rstride=5, cstride=5, color='k', linewidth=0.5)\nax.plot_surface(k, A, Z, rstride=5, cstride=5, facecolors=cm.viridis(Z), linewidth=0, antialiased=False, shade=False)", "Replace lines 4-13 with:\nk = np.linspace(0, 20, 100)\nA = np.linspace(0, 20, 100)\nK, A = np.meshgrid(k, A)\nZ = np.exp(-A * k / 100)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(K, A, Z, cmap='viridis', edgecolor='none', alpha=0.8)\nax.set_xlabel('k-axis')\nax.set_ylabel('|A|-axis')\nax.set_zlabel('Z Value')\nax.set_title('3D Surface Plot')", "Replace lines 4-10 with:\nfrom matplotlib import cm\nA = np.linspace(0, 20, 100)\nk = np.linspace(0, 20, 100)\nA, k = np.meshgrid(A, k)\nZ = np.exp(-A * k / 100)\nnorm = plt.Normalize(Z.min(), Z.max())\ncolors = cm.viridis(norm(Z))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf = ax.plot_surface(k, A, Z, facecolors=colors, rstride=5, cstride=5, linewidth=0.5, shade=False)\nsurf.set_facecolor((0, 0, 0, 0))"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_479", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor ax, crop in zip(axes.flatten(), crops):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    ax.legend()\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/9/target.png", "image_2": "modify_with_image/9/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 18 with:\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)", "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 3:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))", "Replace lines 11-18 with:\nfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    if index == 2:\n        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))", "Replace line 14 with:\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_480", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tdates = np.linspace(0, 10, 100)\n5\tgdd_data = lambda: np.random.uniform(0.2, 1, 100)\n6\tthermal_data = np.linspace(0.1, 1, 100)\n7\tcrops = ['Corn', 'Sorghum', 'Soybeans', 'Winter Wheat',\n8\t         'Oats', 'Dry Beans', 'Alfalfa', 'Millet']\n9\tfig, axes = plt.subplots(4, 2, figsize=(12, 12))\n10\tfig.tight_layout(pad=5.0)\n11\tfor index, (ax, crop) in enumerate(zip(axes.flatten(), crops)):\n12\t    gdd = gdd_data()\n13\t    ax.plot(dates, gdd, label='GDD', color='orange')\n14\t    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n15\t    ax.set_title(crop)\n16\t    ax.set_xlabel('Date')\n17\t    ax.set_ylabel('GDD')\n18\t    if index == 2:\n19\t        ax.legend(loc='upper left', bbox_to_anchor=(1, -0.2))\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/10/target.png", "image_2": "modify_with_image/10/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='-.', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()", "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\n    ax.legend()", "Replace lines 11-19 with:\nfor ax, crop in zip(axes.flatten(), crops):\n    gdd = gdd_data()\n    ax.plot(dates, gdd, label='GDD', color='orange')\n    ax.plot(dates, thermal_data, label='Thermal', linestyle='--', color='brown')\n    ax.set_title(crop)\n    ax.set_xlabel('Date')\n    ax.set_ylabel('GDD')\nlines, labels = ax.get_legend_handles_labels()\nfig.legend(lines, labels, loc='upper center', ncol=1)", "Replace line 18 with:\n    if index == 3:"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_481", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/11/target.png", "image_2": "modify_with_image/11/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-.o', label='AD')", "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')", "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)", "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_482", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsource_samples = np.array([0, 200, 400, 600, 800, 1000, 1200])\n4\tad_error = np.array([0.24, 0.18, 0.15, 0.14, 0.15, 0.12, 0.13])\n5\tcv_error = np.array([0.22, 0.19, 0.18, 0.17, 0.18, 0.15, 0.14])\n6\tfcv_error = np.array([0.23, 0.2, 0.19, 0.18, 0.19, 0.16, 0.15])\n7\tiwcv_error = np.array([0.24, 0.21, 0.19, 0.18, 0.19, 0.17, 0.16])\n8\tad_error_std = np.array([0.02, 0.01, 0.02, 0.01, 0.03, 0.02, 0.01])\n9\tcv_error_std = np.array([0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01])\n10\tfcv_error_std = np.array([0.01, 0.01, 0.01, 0.02, 0.01, 0.01, 0.01])\n11\tiwcv_error_std = np.array([0.03, 0.02, 0.01, 0.02, 0.02, 0.01, 0.01])\n12\tplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD')\n13\tplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV')\n14\tplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV')\n15\tplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV')\n16\tplt.xlabel('Source samples')\n17\tplt.ylabel('Target Q error')\n18\tplt.title('Steel Plates Data.       (n_Q = 100)')\n19\tplt.legend()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/12/target.png", "image_2": "modify_with_image/12/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)", "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='--o', label='AD', capsize=5)\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, fmt='--^', label='CV', capsize=5)\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, fmt='-.s', label='FCV', capsize=5)\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, fmt='-.x', label='IWCV', capsize=5)", "Replace line 12 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, fmt='-o', label='AD')", "Replace lines 12-15 with:\nplt.errorbar(source_samples, ad_error, yerr=ad_error_std, label='AD')\nplt.errorbar(source_samples, cv_error, yerr=cv_error_std, label='CV')\nplt.errorbar(source_samples, fcv_error, yerr=fcv_error_std, label='FCV')\nplt.errorbar(source_samples, iwcv_error, yerr=iwcv_error_std, label='IWCV')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_483", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/13/target.png", "image_2": "modify_with_image/13/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=3)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=3)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=3)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=3)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=3)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=3)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=3)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=3)", "Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()", "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')", "Replace line 24 with:\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_484", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tparticles = [100, 300, 900, 2700]\n4\tdpms_100 = [0.02, 0.015, 0.01, 0.008]\n5\tdpms_1000 = [0.015, 0.012, 0.009, 0.007]\n6\tsvgd_100 = [0.1, 0.09, 0.085, 0.08]\n7\tsvgd_1000 = [0.09, 0.085, 0.08, 0.075]\n8\tula_100 = [0.07, 0.065, 0.06, 0.055]\n9\tula_1000 = [0.065, 0.06, 0.055, 0.05]\n10\tsgm_100 = [0.05, 0.045, 0.04, 0.035]\n11\tsgm_1000 = [0.045, 0.04, 0.035, 0.03]\n12\terrors = np.array([0.005, 0.004, 0.003, 0.002])\n13\tplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue')\n14\tplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue')\n15\tplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange')\n16\tplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange')\n17\tplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold')\n18\tplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold')\n19\tplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple')\n20\tplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple')\n21\tplt.yscale('log')\n22\tplt.xlabel('number of generated particles')\n23\tplt.ylabel('regularized OT distance')\n24\tplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/14/target.png", "image_2": "modify_with_image/14/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 13-24 with:\nplt.figure(figsize=(8, 6))\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend(loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=4)\nplt.tight_layout()", "Replace lines 13-24 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)')\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)')\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)')\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)')\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)')\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)')\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)')\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)')\nplt.yscale('log')\nplt.xlabel('number of generated particles')\nplt.ylabel('regularized OT distance')\nplt.legend()", "Replace line 24 with:\nplt.legend()", "Replace lines 13-20 with:\nplt.errorbar(particles, dpms_100, yerr=errors, fmt='-o', label='DPMS (100 TS)', color='blue', capsize=5)\nplt.errorbar(particles, dpms_1000, yerr=errors, fmt='--o', label='DPMS (1000 TS)', color='blue', capsize=5)\nplt.errorbar(particles, svgd_100, yerr=errors, fmt='-o', label='SVGD (100 TS)', color='orange', capsize=5)\nplt.errorbar(particles, svgd_1000, yerr=errors, fmt='--o', label='SVGD (1000 TS)', color='orange', capsize=5)\nplt.errorbar(particles, ula_100, yerr=errors, fmt='-o', label='ULA (100 TS)', color='gold', capsize=5)\nplt.errorbar(particles, ula_1000, yerr=errors, fmt='--o', label='ULA (1000 TS)', color='gold', capsize=5)\nplt.errorbar(particles, sgm_100, yerr=errors, fmt='-o', label='SGM (100 TS)', color='purple', capsize=5)\nplt.errorbar(particles, sgm_1000, yerr=errors, fmt='--o', label='SGM (1000 TS)', color='purple', capsize=5)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_485", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tx1 = np.random.normal(0.85, 0.1, 100)\n7\ty1 = x1 + np.random.normal(0, 0.1, 100)\n8\tx2 = np.random.normal(0.9, 0.1, 100)\n9\ty2 = x2 + np.random.normal(0, 0.1, 100)\n10\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n11\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n13\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n14\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n15\taxes[0].axhline(0.85, color='red', linestyle='--')\n16\taxes[0].axhline(0.55, color='red', linestyle='--')\n17\taxes[0].set_title('BO03 trial')\n18\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\n19\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n20\taxes[1].axhline(0.85, color='red', linestyle='--')\n21\taxes[1].axhline(0.55, color='red', linestyle='--')\n22\taxes[1].set_title('BO06 trial')\n23\tplt.tight_layout()\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/15/target.png", "image_2": "modify_with_image/15/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 6-22 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)", "Replace lines 16-21 with:\naxes[0].axhline(0.55, color='red', linestyle='-.')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='-.')", "Replace lines 6-18 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)", "Replace lines 6-18 with:\nsns.set(style=\"whitegrid\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_486", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\timport pandas as pd\n5\tnp.random.seed(0)\n6\tsns.set(style=\"whitegrid\")\n7\tx1 = np.random.normal(0.85, 0.1, 100)\n8\ty1 = x1 + np.random.normal(0, 0.1, 100)\n9\tx2 = np.random.normal(0.9, 0.1, 100)\n10\ty2 = x2 + np.random.normal(0, 0.1, 100)\n11\tdata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n12\tdata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\n13\tfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n14\tsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n15\taxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\n16\taxes[0].axhline(0.85, color='red', linestyle='--')\n17\taxes[0].axhline(0.55, color='red', linestyle='--')\n18\taxes[0].set_title('BO03 trial')\n19\tsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\n20\taxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\n21\taxes[1].axhline(0.85, color='red', linestyle='--')\n22\taxes[1].axhline(0.55, color='red', linestyle='--')\n23\taxes[1].set_title('BO06 trial')\n24\tplt.tight_layout()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/16/target.png", "image_2": "modify_with_image/16/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 6 with:\nsns.set(style=\"ggplot2\")", "Replace lines 6-23 with:\nsns.set(style=\"dark\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)", "Replace lines 6-19 with:\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'})", "Replace lines 6-23 with:\nsns.set(style=\"classic\")\nx1 = np.random.normal(0.85, 0.1, 100)\ny1 = x1 + np.random.normal(0, 0.1, 100)\nx2 = np.random.normal(0.9, 0.1, 100)\ny2 = x2 + np.random.normal(0, 0.1, 100)\ndata1 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x1, 'RDI': y1, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\ndata2 = pd.DataFrame({'Std dose of CDDP+DOX (Delta)': x2, 'RDI': y2, 'HRe': np.random.choice(['Poor', 'Good'], 100)})\nfig, axes = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\nsns.scatterplot(ax=axes[0], data=data1, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[0].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[0].axhline(0.85, color='red', linestyle='--')\naxes[0].axhline(0.55, color='red', linestyle='--')\naxes[0].set_title('BO03 trial')\naxes[0].grid(True)\nsns.scatterplot(ax=axes[1], data=data2, x='Std dose of CDDP+DOX (Delta)', y='RDI', hue='HRe', palette={'Poor': 'blue', 'Good': 'green'}, s=50)\naxes[1].plot([0.4, 1.2], [0.4, 1.2], color='black')\naxes[1].axhline(0.85, color='red', linestyle='--')\naxes[1].axhline(0.55, color='red', linestyle='--')\naxes[1].set_title('BO06 trial')\naxes[1].grid(True)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_487", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n7\t    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n8\t    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n9\t    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n11\t    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n12\t}\n13\tfig, ax = plt.subplots(figsize=(10, 6))\n14\tax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\n15\tax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\n16\tax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\n17\tax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\n18\tax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)\n19\tax.set_xlabel('Percentage')\n20\tax.set_xlim(-100, 100)\n21\tax.set_xticks([-100, -50, 0, 50, 100])\n22\tax.set_xticklabels([100, 50, 0, 50, 100])\n23\tax.axvline(0, color='black', linewidth=0.8)\n24\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n25\tplt.tight_layout()\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/17/target.png", "image_2": "modify_with_image/17/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')", "Replace lines 3-18 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')", "Replace lines 3-24 with:\nimport pandas as pd\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')", "Replace lines 4-24 with:\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_488", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport pandas as pd\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n8\t    'Fully disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n9\t    'Partially disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n10\t    'Neither agree nor disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n11\t    'Partially agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n12\t    'Fully agree': np.array([52, 76, 59, 44, 27, 61, 47])\n13\t}\n14\tfig, ax = plt.subplots(figsize=(10, 6))\n15\tax.barh(data['Task'], data['Fully disagree'], color='#d8b365', label='Fully disagree')\n16\tax.barh(data['Task'], data['Partially disagree'], left=data['Fully disagree'], color='#f6e8c3', label='Partially disagree')\n17\tax.barh(data['Task'], data['Neither agree nor disagree'], left=data['Fully disagree'] + data['Partially disagree'], color='#f5f5f5', label='Neither agree nor disagree')\n18\tax.barh(data['Task'], data['Partially agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\n19\tax.barh(data['Task'], data['Fully agree'], left=data['Fully disagree'] + data['Partially disagree'] + data['Neither agree nor disagree'] + data['Partially agree'], color='#01665e', label='Fully agree')\n20\tax.set_xlabel('Percentage')\n21\tax.set_xlim(-100, 100)\n22\tax.set_xticks([-100, -50, 0, 50, 100])\n23\tax.set_xticklabels([100, 50, 0, 50, 100])\n24\tax.axvline(0, color='black', linewidth=0.8)\n25\tax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n26\tplt.tight_layout()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/18/target.png", "image_2": "modify_with_image/18/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 8-25 with:\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, -df['Fully disagree'], color='#d8b365', label='Fully disagree')\nax.barh(df.index, -df['Partially disagree'], left=-df['Fully disagree'], color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=df['Neither agree nor disagree'], color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')", "Replace lines 3-19 with:\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    'tasks': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'fully_disagree': np.array([8, 6, 11, 11, 19, 6, 11]),\n    'partially_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'neither_agree_nor_disagree': np.array([17, 6, 10, 15, 18, 11, 14]),\n    'partially_agree': np.array([6, 6, 10, 15, 18, 11, 14]),\n    'fully_agree': np.array([52, 76, 59, 44, 27, 61, 47])\n}\nfig, ax = plt.subplots(figsize=(10, 6))\nax.barh(data['tasks'], data['fully_disagree'], color='#d8b365', label='Fully disagree', left=-100)\nax.barh(data['tasks'], data['partially_disagree'], color='#f6e8c3', label='Partially disagree', left=-100 + data['fully_disagree'])\nax.barh(data['tasks'], data['neither_agree_nor_disagree'], color='#f5f5f5', label='Neither agree nor disagree', left=-100 + data['fully_disagree'] + data['partially_disagree'])\nax.barh(data['tasks'], data['partially_agree'], color='#5ab4ac', label='Partially agree', left=0)\nax.barh(data['tasks'], data['fully_agree'], color='#01665e', label='Fully agree', left=0)", "Replace lines 3-25 with:\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7'],\n    'Fully disagree': [8, 6, 11, 11, 19, 6, 11],\n    'Partially disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Neither agree nor disagree': [17, 6, 10, 15, 18, 11, 14],\n    'Partially agree': [6, 6, 10, 15, 18, 11, 14],\n    'Fully agree': [52, 76, 59, 44, 27, 61, 47]\n}\ndf = pd.DataFrame(data)\ndf.set_index('Task', inplace=True)\nleft_neutral = df['Neither agree nor disagree'] / 2\nleft_disagree = -(df['Fully disagree'] + df['Partially disagree'])\nleft_partially_disagree = -df['Partially disagree']\nleft_fully_disagree = -df['Fully disagree']\nfig, ax = plt.subplots(figsize=(10, 5))\nax.barh(df.index, df['Fully disagree'], left=left_disagree, color='#d8b365', label='Fully disagree')\nax.barh(df.index, df['Partially disagree'], left=left_partially_disagree, color='#f6e8c3', label='Partially disagree')\nax.barh(df.index, df['Neither agree nor disagree'], left=-left_neutral, color='#f5f5f5', label='Neither agree nor disagree')\nax.barh(df.index, df['Partially agree'], left=left_neutral, color='#5ab4ac', label='Partially agree')\nax.barh(df.index, df['Fully agree'], left=df['Neither agree nor disagree'] / 2 + df['Partially agree'], color='#01665e', label='Fully agree')\nax.set_xlim([-100, 100])\nax.set_xticks([-100, -50, 0, 50, 100])\nax.set_xticklabels([100, 50, 0, 50, 100])\nax.set_xlabel('Percentage')\nax.axvline(0, color='black', linewidth=0.8)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')", "Replace line 5 with:\nsns.set(style=\"classic\")"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_489", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/19/target.png", "image_2": "modify_with_image/19/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 5 with:\nsns.set(style=\"whitegrid\")", "Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))", "Replace lines 11-17 with:\ncontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)\nax.set_xlim(-1, 1)\nax.set_ylim(-1, 1)\nax.set_xticks(np.linspace(-1, 1, 5))\nax.set_yticks(np.linspace(-1, 1, 5))", "Replace lines 6-17 with:\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_490", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport seaborn as sns\n4\tnp.random.seed(0)\n5\tsns.set(style=\"classic\")\n6\tx = np.linspace(-1, 1, 100)\n7\ty = np.linspace(-1, 1, 100)\n8\tX, Y = np.meshgrid(x, y)\n9\tZ = np.sqrt(X**2 + Y**2)\n10\tfig, ax = plt.subplots()\n11\tcontour = ax.contourf(X, Y, Z, levels=200, cmap='Spectral', alpha=0.8)\n12\tcbar = plt.colorbar(contour)\n13\tcbar.set_label('Color Scale')\n14\tnum_points = 50\n15\tx_points = np.random.uniform(-1, 1, num_points)\n16\ty_points = np.random.uniform(-1, 1, num_points)\n17\tax.scatter(x_points, y_points, color='purple', s=10)\n18\tax.set_xlim(-1, 1)\n19\tax.set_ylim(-1, 1)\n20\tax.set_xticks(np.linspace(-1, 1, 5))\n21\tax.set_yticks(np.linspace(-1, 1, 5))\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/20/target.png", "image_2": "modify_with_image/20/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-21 with:\nsns.set(style=\"dark\")\nx = np.linspace(-1, 1, 100)\ny = np.linspace(-1, 1, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sqrt(X**2 + Y**2)\nfig, ax = plt.subplots()\ncontour = ax.contourf(X, Y, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour)\ncbar.set_label('Color Scale')\nnum_points = 50\nx_points = np.random.uniform(-1, 1, num_points)\ny_points = np.random.uniform(-1, 1, num_points)\nax.scatter(x_points, y_points, color='purple', s=10)", "Replace lines 5-21 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)", "Replace lines 5-17 with:\nsns.set(style=\"dark\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)", "Replace lines 5-21 with:\nsns.set(style=\"white\")\ntheta = np.linspace(0, 2 * np.pi, 100)\nr = np.linspace(0, 1, 100)\nR, Theta = np.meshgrid(r, theta)\nZ = np.sin(3 * Theta) * R\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\ncontour = ax.contourf(Theta, R, Z, cmap='Spectral', alpha=0.8)\ncbar = plt.colorbar(contour, pad=0.1)\ncbar.set_label('Color Scale')\nnum_points = 50\nr_points = np.random.rand(num_points)\ntheta_points = np.random.rand(num_points) * 2 * np.pi\nax.scatter(theta_points, r_points, color='purple', s=10)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale;Polar;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_491", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/21/target.png", "image_2": "modify_with_image/21/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75", "Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)", "Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75", "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_492", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tx = np.linspace(-1, 1, 10)\n7\ty = np.linspace(-1, 1, 10)\n8\tz = np.array([0, 0.5, 1.0])\n9\tx, y, z = np.meshgrid(x, y, z)\n10\tu = -y\n11\tv = x\n12\tw = 0.1 * (x + y)\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\tax.quiver(x, y, z, u, v, w, length=0.1, normalize=True, color=['olive', 'purple', 'teal'])\n16\tax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3)\n17\tax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3)\n18\tax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3)\n19\ttheta = np.linspace(0, 2 * np.pi, 100)\n20\tx_circle = np.cos(theta)\n21\ty_circle = np.sin(theta)\n22\tz_circle = np.zeros_like(theta)\n23\tax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=2)\n24\tax.set_xlabel('X')\n25\tax.set_ylabel('Y')\n26\tax.set_zlabel('W')\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/22/target.png", "image_2": "modify_with_image/22/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 22 with:\nz_circle = np.ones_like(theta) * 0.75", "Replace lines 16-22 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.ones_like(theta) * 0.75", "Replace lines 16-23 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.5, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], color='cyan', alpha=0.5, rstride=100, cstride=100)\ntheta = np.linspace(0, 2 * np.pi, 100)\nx_circle = np.cos(theta)\ny_circle = np.sin(theta)\nz_circle = np.zeros_like(theta)\nax.plot(x_circle, y_circle, z_circle, color='blue', linewidth=3)", "Replace lines 16-18 with:\nax.plot_surface(x[:, :, 0], y[:, :, 0], z[:, :, 0], color='yellow', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 1], y[:, :, 1], z[:, :, 1], color='violet', alpha=0.3, rstride=100, cstride=100)\nax.plot_surface(x[:, :, 2], y[:, :, 2], z[:, :, 2], color='cyan', alpha=0.3, rstride=100, cstride=100)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_493", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\n32\tax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\n33\tax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\n34\tax.tick_params(which=\"minor\", size=0)\n35\tcbar = ax.figure.colorbar(cax, ax=ax)\n36\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/23/target.png", "image_2": "modify_with_image/23/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])", "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)", "Replace lines 31-34 with:\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)", "Replace lines 25-35 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_494", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tlabels = [\n6\t    'kw_avg_avg', 'is_weekend', 'kw_min_max', 'kw_max_max',\n7\t    'data_channel_is_tech', 'self_reference_avg_sharess',\n8\t    'data_channel_is_entertainment', 'kw_min_avg',\n9\t    'data_channel_is_socmed', 'self_reference_min_shares'\n10\t]\n11\tcategories = ['location', 'scale', 'skewness']\n12\tdata = np.array([\n13\t    [0.2, 0, 0],\n14\t    [0.15, 0, 0],\n15\t    [0.1, 0, 0],\n16\t    [0.08, 0, 0],\n17\t    [0.05, 0, 0.11],\n18\t    [0.03, 0, 0],\n19\t    [0.02, 0, 0],\n20\t    [0.01, 0, 0],\n21\t    [0, 0.09, 0],\n22\t    [0, 0, 0]\n23\t])\n24\tfig, ax = plt.subplots(figsize=(6, 4))\n25\tcax = ax.imshow(data, cmap='Blues', aspect='auto')\n26\tax.set_xticks(np.arange(len(categories)))\n27\tax.set_yticks(np.arange(len(labels)))\n28\tax.set_xticklabels(categories)\n29\tax.set_yticklabels(labels)\n30\tplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n31\tax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)\n32\tcbar = ax.figure.colorbar(cax, ax=ax)\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/24/target.png", "image_2": "modify_with_image/24/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])", "Replace lines 25-32 with:\ncmap = plt.get_cmap('Blues', 10)\ncax = ax.imshow(data, cmap=cmap, aspect='auto')\nax.set_xticks(np.arange(len(categories)))\nax.set_yticks(np.arange(len(labels)))\nax.set_xticklabels(categories)\nax.set_yticklabels(labels)\nplt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\ncbar = ax.figure.colorbar(cax, ax=ax, ticks=np.linspace(0, 0.2, 11))\ncbar.ax.set_yticklabels([f'{i:.2f}' for i in np.linspace(0, 0.2, 11)])\nax.grid(which='both', color='gray', linestyle='-', linewidth=0.5)", "Replace lines 30-31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)", "Replace line 31 with:\nax.set_xticks(np.arange(-0.5, len(categories), 1), minor=True)\nax.set_yticks(np.arange(-0.5, len(labels), 1), minor=True)\nax.grid(which='minor', color='gray', linestyle='-', linewidth=1.5)\nax.tick_params(which=\"minor\", size=0)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_495", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport seaborn as sns\n3\timport pandas as pd\n4\tsns.set(style=\"dark\")\n5\tdata = {\n6\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n7\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n8\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n9\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n10\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n11\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n12\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n13\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n14\t}\n15\tdf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n16\t                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\n17\tcorrelation_matrix = df.corr()\n18\tplt.figure(figsize=(8, 8))\n19\tsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n20\t            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n21\t            mask=None, annot_kws={\"size\": 12},\n22\t            xticklabels=df.columns, yticklabels=df.columns)\n23\tfor i in range(len(correlation_matrix.columns)):\n24\t    for j in range(len(correlation_matrix.columns)):\n25\t        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n26\t                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n27\t                                        alpha=0.6))\n28\tplt.xticks(rotation=45, ha='right', color=\"red\")\n29\tplt.yticks(rotation=0, color=\"red\")\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/25/target.png", "image_2": "modify_with_image/25/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 2-29 with:\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)\nplt.tight_layout()", "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()", "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"white\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i + 0.5, j + 0.5,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()", "Replace lines 1-29 with:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\n    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n])\nfig, ax = plt.subplots(figsize=(10, 8))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nnorm = plt.Normalize(vmin=-1, vmax=1)\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\nfor i, col in enumerate(df.columns):\n    for j, row in enumerate(df.index):\n        corr = df.at[row, col]\n        ax.scatter(\n            i, j,\n            s=abs(corr) * 1500,\n            color=cmap(norm(corr)),\n            alpha=0.9,\n            edgecolors='none'\n        )\nax.set_xticks(np.arange(0.5, len(df.columns), 1))\nax.set_xticklabels(df.columns, rotation=90, color=\"red\")\nax.set_yticks(np.arange(0.5, len(df.index), 1))\nax.set_yticklabels(df.index, rotation=0, color=\"red\")\nax.set_xlim(0, len(df.columns))\nax.set_ylim(0, len(df.index))\ncbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\ncbar.set_ticks(np.linspace(-1, 1, 5))\ncbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\nax.invert_yaxis()\nplt.tight_layout()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_496", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport numpy as np\n3\timport matplotlib.pyplot as plt\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdata = {\n7\t    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n8\t    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n9\t    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n10\t    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n11\t    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n12\t    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n13\t    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n14\t    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n15\t}\n16\tdf = pd.DataFrame(data, index=[\n17\t    \"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n18\t    \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"\n19\t])\n20\tfig, ax = plt.subplots(figsize=(10, 8))\n21\tcmap = sns.diverging_palette(220, 10, as_cmap=True)\n22\tnorm = plt.Normalize(vmin=-1, vmax=1)\n23\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n24\tsm.set_array([])\n25\tfor i, col in enumerate(df.columns):\n26\t    for j, row in enumerate(df.index):\n27\t        corr = df.at[row, col]\n28\t        ax.scatter(\n29\t            i + 0.5, j + 0.5,\n30\t            s=abs(corr) * 1500,\n31\t            color=cmap(norm(corr)),\n32\t            alpha=0.9,\n33\t            edgecolors='none'\n34\t        )\n35\tax.set_xticks(np.arange(0.5, len(df.columns), 1))\n36\tax.set_xticklabels(df.columns, rotation=90, color=\"red\")\n37\tax.set_yticks(np.arange(0.5, len(df.index), 1))\n38\tax.set_yticklabels(df.index, rotation=0, color=\"red\")\n39\tax.set_xlim(0, len(df.columns))\n40\tax.set_ylim(0, len(df.index))\n41\tcbar = fig.colorbar(sm, ax=ax, label=\"Correlation\")\n42\tcbar.set_ticks(np.linspace(-1, 1, 5))\n43\tcbar.set_ticklabels(['-1', '-0.5', '0', '0.5', '1'])\n44\tax.invert_yaxis()\n45\tplt.tight_layout()\n46\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/26/target.png", "image_2": "modify_with_image/26/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"whitegrid\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(9, 9))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=0.5, linecolor='gray', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 10},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.5))\nplt.xticks(ha='right', color=\"darkred\")\nplt.yticks(rotation=0, color=\"darkred\")", "Replace lines 1-44 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\nvariables = list(data.keys())\ncorrelation_matrix = np.array([data[var] for var in variables])\nfig, ax = plt.subplots(figsize=(11, 8))\nax.set_facecolor('#F0F0F0')\nfig.patch.set_facecolor('#F0F0F0')\nnorm = plt.Normalize(-1, 1)\nsm = plt.cm.ScalarMappable(cmap=plt.cm.RdBu_r, norm=norm)\nsm.set_array([])\nfor i in range(len(variables)):\n    for j in range(len(variables)):\n        correlation = correlation_matrix[i, j]\n        color = plt.cm.RdBu_r(norm(correlation))\n        circle = plt.Circle((j, len(variables)-1-i), radius=0.35, color=color)\n        ax.add_patch(circle)\nax.set_xticks(range(len(variables)))\nax.set_yticks(range(len(variables)))\nax.set_xticklabels(variables, rotation=45, ha='right', color='red')\nax.set_yticklabels(variables[::-1], color='red')\nax.set_xlim(-0.5, len(variables)-0.5)\nax.set_ylim(-0.5, len(variables)-0.5)\nax.set_aspect('equal')\ncbar = fig.colorbar(sm, ax=ax)\ncbar.set_label('Correlation', labelpad=15)\nax.grid(False)", "Replace line 29 with:\n            i, j,", "Replace lines 1-45 with:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nsns.set(style=\"dark\")\ndata = {\n    \"totalsteps\": [1, 0.8, 0.6, -0.4, 0.5, 0.6, 0.7, 0.8],\n    \"totalturn\": [0.8, 1, 0.7, -0.3, 0.5, 0.6, 0.6, 0.7],\n    \"totalleft\": [0.6, 0.7, 1, -0.5, 0.4, 0.5, 0.6, 0.6],\n    \"main_street_ratio\": [-0.4, -0.3, -0.5, 1, -0.2, -0.1, 0, 0],\n    \"osrm_duration\": [0.5, 0.5, 0.4, -0.2, 1, 0.9, 0.8, 0.7],\n    \"osrm_distance\": [0.6, 0.6, 0.5, -0.1, 0.9, 1, 0.8, 0.7],\n    \"trip_distance\": [0.7, 0.6, 0.6, 0, 0.8, 0.8, 1, 0.9],\n    \"trip_duration\": [0.8, 0.7, 0.6, 0, 0.7, 0.7, 0.9, 1],\n}\ndf = pd.DataFrame(data, index=[\"totalsteps\", \"totalturn\", \"totalleft\", \"main_street_ratio\",\n                               \"osrm_duration\", \"osrm_distance\", \"trip_distance\", \"trip_duration\"])\ncorrelation_matrix = df.corr()\nplt.figure(figsize=(8, 8))\nsns.heatmap(correlation_matrix, annot=False, cmap=\"coolwarm\", center=0,\n            square=True, linewidths=1, linecolor='white', cbar_kws={\"shrink\": .8, \"label\": \"Correlation\"},\n            mask=None, annot_kws={\"size\": 12},\n            xticklabels=df.columns, yticklabels=df.columns)\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(len(correlation_matrix.columns)):\n        plt.gca().add_patch(plt.Circle((j+0.5, i+0.5), radius=abs(correlation_matrix.iloc[i, j])/2,\n                                        color='red' if correlation_matrix.iloc[i, j] > 0 else 'blue',\n                                        alpha=0.6))\nplt.xticks(rotation=45, ha='right', color=\"red\")\nplt.yticks(rotation=0, color=\"red\")"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_497", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\tfig, ax = plt.subplots(figsize=(10, 3))\n11\ttask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n12\tprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\n13\tfor i, color in enumerate(colors):\n14\t    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\n15\tax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\n16\tax.set_xlabel('Time')\n17\tax.set_ylabel('Progress')\n18\tax.set_xticks([])\n19\tax.set_yticks(np.arange(0.5, 10.5, 1))\n20\tax.set_yticklabels(tasks)\n21\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n22\tplt.tight_layout()\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/27/target.png", "image_2": "modify_with_image/27/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-20 with:\ntask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\ntask_blocks = [\n    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, row in enumerate(task_blocks):\n    for j, task_index in enumerate(row):\n        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\nax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)", "Replace lines 11-20 with:\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))", "Replace lines 4-21 with:\nsns.set(style=\"white\")\ntasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\ncolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)\nplt.legend(tasks, loc='lower left', bbox_to_anchor=(1, 0.5))", "Replace lines 10-20 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_498", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\ttasks = ['Reaching needle right hand', 'Moving to center', 'Positioning needle', 'Pushing needle',\n6\t         'Pulling suture left hand', 'Transferring needle left to right', 'Orienting needle',\n7\t         'Help tighten suture right hand', 'Loosening more suture', 'Dropping suture']\n8\tcolors = ['#1f407a', '#60a9a6', '#cfa3e3', '#5b5289', '#7cc6c6', '#c2bfd9',\n9\t          '#8e9e6f', '#907da1', '#f9d566', '#d3e474']\n10\ttask_changes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n11\tprogress = [0, 1, 2, 3, 2, 1, 2, 3, 4, 4, 4]\n12\ttask_blocks = [\n13\t    [0, 0, 1, 1, 2, 2, 3, 3, 4, 4],\n14\t    [1, 1, 2, 2, 3, 3, 4, 4, 4, 4],\n15\t    [2, 2, 3, 3, 4, 4, 4, 4, 4, 4],\n16\t    [3, 3, 4, 4, 4, 4, 4, 4, 4, 4]\n17\t]\n18\tfig, ax = plt.subplots(figsize=(10, 3))\n19\tfor i, row in enumerate(task_blocks):\n20\t    for j, task_index in enumerate(row):\n21\t        ax.fill_betweenx([i, i+1], j, j+1, color=colors[task_index], alpha=0.8)\n22\tax.step(task_changes[:len(progress)], progress, where='post', color='black', linewidth=2)\n23\tax.set_xlabel('Time')\n24\tax.set_ylabel('Progress')\n25\tax.set_yticks(np.arange(0, 5, 1))\n26\tax.set_xticks([])\n27\tax.grid(False)\n28\tplt.legend(tasks, loc='center left', bbox_to_anchor=(1, 0.5))\n29\tplt.tight_layout()\n30\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/28/target.png", "image_2": "modify_with_image/28/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-22 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)", "Replace lines 10-28 with:\ntask_blocks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4]\ntasks_at_time = [0, 1, 2, 1, 0, 3, 4, 3, 2, 4]\nfig, ax = plt.subplots(figsize=(10, 3))\nfor i, task_index in enumerate(tasks_at_time):\n    ax.fill_betweenx([0, 4], i, i+1, color=colors[task_index], alpha=0.8)\nax.step(task_blocks, progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_yticks(np.arange(0, 5, 1))\nax.set_xticks([])\nax.grid(False)\nplt.legend(tasks)", "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntime = np.arange(0, 20, 1)\nprogress = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(time, i, i + 1, color=color, alpha=0.8)\nax.step(time[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))", "Replace lines 10-27 with:\nfig, ax = plt.subplots(figsize=(10, 3))\ntask_intervals = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprogress = [0, 1, 2, 3, 4, 3, 2, 3, 4, 4, 4]\nfor i, color in enumerate(colors):\n    ax.fill_between(task_intervals, i, i + 1, color=color, alpha=0.8)\nax.step(task_intervals[:len(progress)], progress, where='post', color='black', linewidth=2)\nax.set_xlabel('Time')\nax.set_ylabel('Progress')\nax.set_xticks([])\nax.set_yticks(np.arange(0.5, 10.5, 1))\nax.set_yticklabels(tasks)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Data Reasoning;Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_499", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\n11\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/29/target.png", "image_2": "modify_with_image/29/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_marg_y.grid(True)\ng.ax_joint.grid(True)", "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_marg_x.grid(True)\ng.ax_joint.grid(True)", "Replace line 10 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\ng.ax_joint.grid(True)", "Insert the following between lines 10-11:\ng.plot_marginals(sns.kdeplot, fill=True)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_500", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tnp.random.seed(0)\n6\tsns.set(style=\"dark\")\n7\tclose = np.random.normal(160, 10, 1000)\n8\tvolume = np.random.normal(0.5, 0.2, 1000)\n9\tdf = pd.DataFrame({'Close': close, 'Volume': volume})\n10\tg = sns.jointplot(x='Close', y='Volume', data=df, kind='kde', fill=True)\n11\tg.ax_marg_x.grid(True)\n12\tg.ax_marg_y.grid(True)\n13\tg.ax_joint.grid(True)\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/30/target.png", "image_2": "modify_with_image/30/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Remove line 6", "Remove lines 11-12", "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')\ng.plot_marginals(sns.kdeplot, fill=True)", "Replace lines 10-13 with:\ng = sns.jointplot(x='Close', y='Volume', data=df, kind='kde')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_501", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/31/target.png", "image_2": "modify_with_image/31/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')", "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')", "Replace lines 16-19 with:\nplt.fill_between(remaining_inventory, y1, y2, color='blue')\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Green stars')", "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_502", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport seaborn as sns\n4\tsns.set(style=\"dark\")\n5\tprice = np.linspace(18.75, 19.10, 20)\n6\tremaining_inventory = np.linspace(1, 0, 20)\n7\tCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\n8\tTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\n9\tgreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\n10\tgreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\n11\tred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\n12\tred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\n13\ty1 = price - 0.05\n14\ty2 = price + 0.05\n15\tplt.figure(figsize=(10, 6))\n16\tplt.fill_between(remaining_inventory, y1, y2, color='blue', alpha=0.2)\n17\tplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange')\n18\tplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple')\n19\tplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Green stars')\n20\tplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Red stars')\n21\tplt.xlabel('Remaining Inventory')\n22\tplt.ylabel('Price')\n23\tplt.title('Comparison of Strategies on 000504.XSHE')\n24\tplt.legend()\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/32/target.png", "image_2": "modify_with_image/32/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_lower2, y_lower1, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper1, y_upper2, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')", "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue')\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='o', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='o', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')", "Replace lines 5-24 with:\nremaining_inventory = np.linspace(1, 0, 20)\nCATE_PPO_price = np.array([19.1, 19.05, 19.03, 19.00, 18.98, 18.96, 18.95, 18.94, 18.92, 18.91, 18.90, 18.89, 18.88, 18.86, 18.85, 18.84, 18.82, 18.80, 18.78, 18.76])\nTuned_PPO_price = np.array([19.1, 19.07, 19.05, 19.03, 19.02, 19.00, 18.98, 18.96, 18.94, 18.93, 18.92, 18.90, 18.89, 18.88, 18.87, 18.86, 18.85, 18.83, 18.82, 18.80])\ngreen_stars_price = [18.88, 18.89, 18.92, 18.95, 18.96, 18.98, 19.0, 19.03, 19.05, 19.06, 19.07]\ngreen_stars_inventory = [0.95, 0.85, 0.80, 0.75, 0.70, 0.65, 0.55, 0.45, 0.35, 0.25, 0.10]\nred_stars_price = [18.84, 18.86, 18.87, 18.89, 18.90, 18.92, 18.93, 18.94, 18.95, 18.96]\nred_stars_inventory = [0.92, 0.85, 0.83, 0.80, 0.75, 0.70, 0.65, 0.55, 0.50, 0.45]\ny_lower1 = CATE_PPO_price - 0.05\ny_upper1 = CATE_PPO_price + 0.05\ny_lower2 = CATE_PPO_price - 0.1\ny_upper2 = CATE_PPO_price + 0.1\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, 18.75, y_lower2, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_upper2, 19.10, color='blue', alpha=0.4)\nplt.fill_between(remaining_inventory, y_lower2, y_upper2, color='white', alpha=1)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=2)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=2)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=120, label=\"Positive events\")\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=120, label=\"Negative events\")\nplt.legend()\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of Strategies on 000504.XSHE')", "Replace lines 13-23 with:\ny_band1_lower = price - 0.05\ny_band1_upper = price + 0.05\ny_band2_lower = price - 0.07\ny_band2_upper = price + 0.07\ny_band3_lower = price - 0.09\ny_band3_upper = price + 0.09\nplt.figure(figsize=(10, 6))\nplt.fill_between(remaining_inventory, y_band3_lower, y_band3_upper, color='blue', alpha=0.1)\nplt.fill_between(remaining_inventory, y_band2_lower, y_band2_upper, color='blue', alpha=0.2)\nplt.fill_between(remaining_inventory, y_band1_lower, y_band1_upper, color='blue', alpha=0.3)\nplt.plot(remaining_inventory, CATE_PPO_price, label=\"CATE (PPO) cost=-5.82BP\", color='orange', linewidth=1.5)\nplt.plot(remaining_inventory, Tuned_PPO_price, label=\"Tuned PPO cost=1.99BP\", color='purple', linewidth=1.5)\nplt.scatter(green_stars_inventory, green_stars_price, color='green', marker='*', s=100, label='Positive events')\nplt.scatter(red_stars_inventory, red_stars_price, color='red', marker='*', s=100, label='Negative events')\nplt.xlabel('Remaining Inventory')\nplt.ylabel('Price')\nplt.title('Comparison of CATE (PPO) and Tuned PPO Strategies')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Data Reasoning;Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_503", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/33/target.png", "image_2": "modify_with_image/33/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 5 with:\nsns.set(style=\"whitegrid\")", "Replace line 14 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')", "Replace line 17 with:\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')", "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_504", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport pandas as pd\n3\timport numpy as np\n4\timport seaborn as sns\n5\tsns.set(style=\"dark\")\n6\tdates = pd.to_datetime([\n7\t    \"2017-05-18\", \"2018-01-01\", \"2019-01-01\",\n8\t    \"2020-01-01\", \"2021-01-01\", \"2022-01-01\", \"2022-10-13\"\n9\t])\n10\txrp_usd = np.array([0.05, 2.9, 0.5, 0.75, 1.8, 0.75, 0.5])\n11\tfig, ax = plt.subplots(figsize=(10, 6))\n12\tax.plot(dates, xrp_usd, marker=\"o\", linestyle=\"-\", color=\"black\")\n13\tax.annotate('A', xy=(dates[1], xrp_usd[1]), xytext=(10,-10), textcoords='offset points')\n14\tax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(10,-10), textcoords='offset points')\n15\tax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,-10), textcoords='offset points')\n16\tax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\n17\tax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(10,-10), textcoords='offset points')\n18\tax.annotate('F', xy=(dates[6], xrp_usd[6]), xytext=(10,10), textcoords='offset points')\n19\tax.axvline(dates[1], linestyle=':', color='blue')\n20\tax.axvline(dates[2], linestyle=':', color='blue')\n21\tax.axvline(dates[3], linestyle=':', color='blue')\n22\tax.axvline(dates[4], linestyle=':', color='blue')\n23\tax.axvline(dates[5], linestyle=':', color='blue')\n24\tax.axvline(dates[6], linestyle=':', color='blue')\n25\tax.annotate('', xy=(dates[1], 2.9), xytext=(dates[2], 2.9), arrowprops=dict(arrowstyle='<->', color='blue'))\n26\tax.text(dates[1] + pd.Timedelta(days=50), 3.0, 'bubble', color='blue', horizontalalignment='center')\n27\tax.annotate('', xy=(dates[3], 1.2), xytext=(dates[4], 1.2), arrowprops=dict(arrowstyle='<->', color='blue'))\n28\tax.text(dates[3] + pd.Timedelta(days=100), 1.3, 'non-bubble', color='blue', horizontalalignment='center')\n29\tax.annotate('', xy=(dates[5], 2.2), xytext=(dates[6], 2.2), arrowprops=dict(arrowstyle='<->'))\n30\tax.text(dates[5] + pd.Timedelta(days=50), 2.3, 'bubble', color='blue', horizontalalignment='center')\n31\tax.set_xlabel('date mm/dd/yyyy')\n32\tax.set_ylabel('XRP/USD')\n33\tplt.xticks(rotation=45)\n34\tax.grid(True)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/34/target.png", "image_2": "modify_with_image/34/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 14-15 with:\nax.annotate('B', xy=(dates[2], xrp_usd[2]), xytext=(-15,-10), textcoords='offset points')\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')", "Replace line 5 with:\nsns.set(style=\"whitegrid\")", "Replace lines 15-17 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')\nax.annotate('D', xy=(dates[4], xrp_usd[4]), xytext=(10,-10), textcoords='offset points')\nax.annotate('E', xy=(dates[5], xrp_usd[5]), xytext=(-20,-10), textcoords='offset points')", "Replace line 15 with:\nax.annotate('C', xy=(dates[3], xrp_usd[3]), xytext=(10,10), textcoords='offset points')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_505", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\")\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tax_inset.legend(fontsize=6)\n26\tax.legend()\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/35/target.png", "image_2": "modify_with_image/35/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 14 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')", "Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)\nax_inset.legend()", "Replace lines 14-25 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)", "Replace lines 14-26 with:\nax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('utilization', fontsize=8)\nax_inset.set_ylabel('rate', fontsize=8)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_506", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tutilization = np.linspace(0, 1, 100)\n4\trate_before = utilization * 0.2\n5\trate_after = np.piecewise(utilization, [utilization < 0.9, utilization >= 0.9], [0.2, lambda x: (x - 0.9) * 100])\n6\tfig, ax = plt.subplots()\n7\tax.plot(utilization, rate_before, label='Compound (before)', color='red')\n8\tax.plot(utilization, rate_after, label='Compound (after)', color='purple')\n9\tax.set_xlabel('utilization')\n10\tax.set_ylabel('rate')\n11\tax.set_xlim(0, 1)\n12\tax.set_ylim(0, 10)\n13\tfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n14\tax_inset = inset_axes(ax, width=\"30%\", height=\"30%\", loc='lower left')\n15\tinset_rate_1 = utilization * 0.1\n16\tinset_rate_2 = utilization * 0.15\n17\tax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)')\n18\tax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)')\n19\tax_inset.set_xlim(0, 1)\n20\tax_inset.set_ylim(0, 0.2)\n21\tax_inset.set_xticks([0, 0.2, 0.4, 0.6, 0.8, 1.0])\n22\tax_inset.set_yticks([0.0, 0.1, 0.2])\n23\tax_inset.set_xlabel('utilization', fontsize=8)\n24\tax_inset.set_ylabel('rate', fontsize=8)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/36/target.png", "image_2": "modify_with_image/36/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 7-24 with:\nax.plot(utilization, rate_before, label='Compound (before)', color='red', linestyle='--')\nax.plot(utilization, rate_after, label='Compound (after)', color='purple', linestyle='-.')\nax.set_xlabel('Utilization')\nax.set_ylabel('Rate')\nax.set_xlim(0, 1)\nax.set_ylim(0, 10)\nax.legend(loc='upper left')\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\nax_inset = inset_axes(ax, width=\"35%\", height=\"35%\", loc='upper right')\ninset_rate_1 = utilization * 0.1\ninset_rate_2 = utilization * 0.15\nax_inset.plot(utilization, inset_rate_1, color='blue', label='Compound (1)', linestyle=':')\nax_inset.plot(utilization, inset_rate_2, color='green', label='Compound (2)', linestyle='--')\nax_inset.set_xlim(0, 1)\nax_inset.set_ylim(0, 0.2)\nax_inset.set_xticks([0, 0.3, 0.6, 0.9])\nax_inset.set_yticks([0.0, 0.1, 0.2])\nax_inset.set_xlabel('Utilization', fontsize=8)\nax_inset.set_ylabel('Rate', fontsize=8)\nax_inset.legend(fontsize=6)", "Insert the following between lines 24-25:\nax_inset.legend(fontsize=6)\nax.legend()", "Insert the following between lines 24-25:\nax.legend()", "Insert the following between lines 24-25:\nax_inset.legend()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_507", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/37/target.png", "image_2": "modify_with_image/37/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (1, 1))])", "Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_508", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom scipy.stats import multivariate_normal\n4\timport matplotlib.colors as mcolors\n5\tnp.random.seed(0)\n6\tmean = [-3.0, 102.0]\n7\tcov = [[0.1, 0.05], [0.05, 1.0]]\n8\tx, y = np.mgrid[-4.0:-2.5:0.01, 96.0:106.0:0.1]\n9\tpos = np.empty(x.shape + (2,))\n10\tpos[:, :, 0] = x\n11\tpos[:, :, 1] = y\n12\trv = multivariate_normal(mean, cov)\n13\tfig, ax = plt.subplots(figsize=(5, 10))\n14\tscatter_x = np.random.normal(mean[0], 0.3, 10000)\n15\tscatter_y = np.random.normal(mean[1], 2.0, 10000)\n16\tax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1)\n17\tax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 10, 1, 10))])\n18\tax.set_xlabel('X-axis')\n19\tax.set_ylabel('Y-axis')\n20\tax.set_title('IUKF-1 (J=4)')\n21\tax.set_xlim([-4.0, -2.5])\n22\tax.set_ylim([96, 106])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/38/target.png", "image_2": "modify_with_image/38/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-17 with:\nax.scatter(scatter_x, scatter_y, color='cyan', alpha=0.4, s=1, label=\"Data points\")\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (3, 1, 1, 1, 1, 1))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (5, 5))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.5, linestyles=[(0, (1, 1))])", "Replace line 17 with:\nax.contour(x, y, rv.pdf(pos), levels=10, cmap='plasma', linewidths=1.0, linestyles=[(0, (3, 10, 1, 10))])"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_509", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\n5\terror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\n6\tplt.figure(figsize=(8, 6))\n7\tcolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\n8\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)\n9\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n10\tplt.ylabel('Intersite Distance', fontsize=12)\n11\tplt.ylim(0, 0.6)\n12\tplt.xticks(rotation=45)\n13\tplt.tight_layout()\n14\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/39/target.png", "image_2": "modify_with_image/39/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 6-8 with:\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)", "Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))", "Replace lines 4-8 with:\nintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\nerror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\nplt.figure(figsize=(8, 6))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))", "Replace line 8 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_510", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tcategories = ['sf-LHS', 'LHS', 'Sobol', 'Halton', 'MIP', 'MIPT', 'Fp PLHS', 'Mq PLHS', 'pre-opti LHS']\n4\tintersite_distances = [0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55]\n5\terror_bars = [0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01]\n6\tplt.figure(figsize=(8, 6))\n7\tbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))\n8\tplt.title('Intersite Distance for a 50-point design in 5D', fontsize=14)\n9\tplt.ylabel('Intersite Distance', fontsize=12)\n10\tplt.ylim(0, 0.6)\n11\tplt.xticks(rotation=45)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/40/target.png", "image_2": "modify_with_image/40/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 7 with:\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=plt.cm.Blues(np.linspace(0.3, 0.7, len(categories))))", "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, color=colors)", "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nsorted_indices = np.argsort(intersite_distances)\ncategories = [categories[i] for i in sorted_indices]\nintersite_distances = intersite_distances[sorted_indices]\nerror_bars = error_bars[sorted_indices]\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nplt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)", "Replace lines 4-7 with:\nintersite_distances = np.array([0.31, 0.15, 0.25, 0.30, 0.35, 0.43, 0.38, 0.32, 0.55])\nerror_bars = np.array([0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01])\nplt.figure(figsize=(8, 6))\ncolors = plt.cm.Blues(intersite_distances / max(intersite_distances))\nbars = plt.bar(categories, intersite_distances, yerr=error_bars, capsize=5, color=colors)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Marker, Line, & Cap", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_511", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=0, azim=0)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/41/target.png", "image_2": "modify_with_image/41/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 21 with:\nax.view_init(elev=90, azim=0)", "Replace line 21 with:\nax.view_init(elev=0, azim=90)", "Replace line 21 with:\nax.view_init(elev=90, azim=90)", "Replace line 21 with:\nax.view_init(elev=180, azim=90)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_512", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\ttheta = np.linspace(0, 2*np.pi, 100)\n5\tphi = np.linspace(0, 2*np.pi, 100)\n6\ttheta, phi = np.meshgrid(theta, phi)\n7\tR = 2\n8\tr = 0.5\n9\tX = (R + r*np.cos(theta)) * np.cos(phi)\n10\tY = (R + r*np.cos(theta)) * np.sin(phi)\n11\tZ = r * np.sin(theta)\n12\tfig = plt.figure()\n13\tax = fig.add_subplot(111, projection='3d')\n14\tax.plot_surface(X, Y, Z, facecolors=plt.cm.viridis((Z - Z.min()) / (Z.max() - Z.min())), rstride=5, cstride=5)\n15\tax.set_xlabel('X Axis')\n16\tax.set_ylabel('Y Axis')\n17\tax.set_zlabel('Z Axis')\n18\tax.set_xlim([-3, 3])\n19\tax.set_ylim([-3, 3])\n20\tax.set_zlim([-1.5, 1.5])\n21\tax.view_init(elev=90, azim=90)\n22\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/42/target.png", "image_2": "modify_with_image/42/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 21 with:\nax.view_init(elev=180, azim=90)", "Replace line 21 with:\nax.view_init(elev=90, azim=0)", "Replace line 21 with:\nax.view_init(elev=0, azim=0)", "Replace line 21 with:\nax.view_init(elev=0, azim=90)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_513", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdx = dy = np.ones_like(zpos) * 0.4\n13\tdz = detected_fraction_vals.flatten()\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\n17\tsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\n18\tax.set_xlabel('Log. Negativity')\n19\tax.set_ylabel('No. Measurements')\n20\tax.set_zlabel('Detected Fraction')\n21\tlevels = np.linspace(dz.min(), dz.max(), 8)\n22\tcmap = plt.get_cmap('viridis')\n23\tnorm = colors.BoundaryNorm(levels, cmap.N)\n24\tfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/43/target.png", "image_2": "modify_with_image/43/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 16-17 with:\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)", "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)", "Replace lines 12-24 with:\ndz = detected_fraction_vals.flatten()\ndx = dy = 0.3\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\ncolors_discrete = cmap(norm(dz))\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)", "Replace lines 4-24 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_514", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tfrom matplotlib import colors\n5\tlog_negativity_vals = np.linspace(1, 6, 10)\n6\tnum_measurements_vals = np.arange(1, 12, 1)\n7\tlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\n8\tdetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\n9\txpos = log_negativity_vals.flatten()\n10\typos = num_measurements_vals.flatten()\n11\tzpos = np.zeros_like(xpos)\n12\tdz = detected_fraction_vals.flatten()\n13\tdx = dy = 0.3\n14\tfig = plt.figure()\n15\tax = fig.add_subplot(111, projection='3d')\n16\tlevels = np.linspace(dz.min(), dz.max(), 8)\n17\tcmap = plt.get_cmap('viridis')\n18\tnorm = colors.BoundaryNorm(levels, cmap.N)\n19\tcolors_discrete = cmap(norm(dz))\n20\tax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors_discrete, shade=True)\n21\tax.set_xlabel('Log. Negativity')\n22\tax.set_ylabel('No. Measurements')\n23\tax.set_zlabel('Detected Fraction')\n24\tmappable = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n25\tmappable.set_array(dz)\n26\tfig.colorbar(mappable, ax=ax, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)\n27\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/44/target.png", "image_2": "modify_with_image/44/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nnorm = plt.Normalize(dz.min(), dz.max())\ncolors = plt.cm.viridis(norm(dz))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nmappable = plt.cm.ScalarMappable(cmap='viridis', norm=norm)\nmappable.set_array(dz)\nfig.colorbar(mappable, ax=ax, shrink=0.5, aspect=5)", "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)", "Replace lines 12-26 with:\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=False, color='c')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none', alpha=0.7)\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nlevels = np.linspace(dz.min(), dz.max(), 8)\ncmap = plt.get_cmap('viridis')\nnorm = colors.BoundaryNorm(levels, cmap.N)\nfig.colorbar(surf, ax=ax, cmap=cmap, norm=norm, boundaries=levels, ticks=levels, shrink=0.5, aspect=5)", "Replace lines 4-26 with:\nlog_negativity_vals = np.linspace(1, 6, 10)\nnum_measurements_vals = np.arange(1, 12, 1)\nlog_negativity_vals, num_measurements_vals = np.meshgrid(log_negativity_vals, num_measurements_vals)\ndetected_fraction_vals = 0.3 * np.exp(-0.3 * log_negativity_vals) * np.exp(-0.1 * num_measurements_vals)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxpos = log_negativity_vals.flatten()\nypos = num_measurements_vals.flatten()\nzpos = np.zeros_like(xpos)\ndx = dy = np.ones_like(zpos) * 0.4\ndz = detected_fraction_vals.flatten()\nax.bar3d(xpos, ypos, zpos, dx, dy, dz, shade=True, cmap='viridis')\nax.set_xlabel('Log. Negativity')\nax.set_ylabel('No. Measurements')\nax.set_zlabel('Detected Fraction')\nsurf = ax.plot_trisurf(xpos, ypos, dz, cmap='viridis', edgecolor='none')\nfig.colorbar(surf, ax=ax, shrink=0.5, aspect=5)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale;3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_515", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2])\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/45/target.png", "image_2": "modify_with_image/45/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()", "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')", "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')", "Replace line 14 with:\nax2 = fig.add_subplot(gs[2], sharex=ax1)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_516", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\ttime = np.linspace(0, 250, 600)\n5\tfrequency = np.linspace(1000, 1500, 500)\n6\tsignal = np.random.rand(500, 600) * 0.001\n7\tsignal[200:220, 250:260] = 0.1\n8\tsignal[100:120, 400:420] = 0.05\n9\tintensity = 46000 + np.random.rand(600) * 100\n10\tfig = plt.figure(figsize=(8, 6))\n11\tgs = fig.add_gridspec(3, 1, height_ratios=[0.2, 3, 1], hspace=0.3)\n12\tax_cb = fig.add_subplot(gs[0])\n13\tax1 = fig.add_subplot(gs[1])\n14\tax2 = fig.add_subplot(gs[2], sharex=ax1)\n15\tcax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\n16\tcbar = fig.colorbar(cax, cax=ax_cb, orientation='horizontal')\n17\tax_cb.xaxis.set_ticks_position('top')\n18\tax_cb.xaxis.set_label_position('top')\n19\tax1.set_ylabel('Frequency (MHz)')\n20\tax1.set_xlabel('Time (s)')\n21\tax2.plot(time, intensity, color='black')\n22\tax2.set_ylabel('Intensity')\n23\tax2.set_xlabel('Time (s)')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/46/target.png", "image_2": "modify_with_image/46/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 14 with:\nax2 = fig.add_subplot(gs[2])", "Insert the following between lines 23-24:\nax_cb.tick_params(direction='in')\nax1.tick_params(direction='in')\nax2.tick_params(direction='in')", "Replace lines 4-23 with:\ntime = np.linspace(0, 0.06, 600)\nfrequency = np.linspace(1000, 1500, 500)\nsignal = np.random.rand(500, 600) * 0.001\nsignal[200:220, 250:260] = 0.1\nsignal[100:120, 400:420] = 0.05\nintensity = 46000 + np.random.rand(600) * 100\nfig, (ax1, ax2) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [3, 1]}, figsize=(8, 6))\ntime = np.linspace(0, 250, 600)\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax1, orientation='horizontal')\nax1.set_ylabel('Frequency (MHz)')\nax1.set_xlabel('Time (s)')\nax2.plot(time, intensity, color='black')\nax2.set_ylabel('Intensity')\nax2.set_xlabel('Time (s)')\nplt.tight_layout()", "Replace lines 11-18 with:\ngs = fig.add_gridspec(3, 1, height_ratios=[0.05, 3, 1], hspace=0.05)\nax_cb = fig.add_subplot(gs[0])\nax1 = fig.add_subplot(gs[1])\nax2 = fig.add_subplot(gs[2])\ncax = ax1.imshow(signal, aspect='auto', extent=[time[0], time[-1], frequency[0], frequency[-1]], origin='lower', cmap='hot')\ncbar = fig.colorbar(cax, ax=ax_cb, orientation='horizontal')\nax_cb.axis('off')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_517", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure()\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n13\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\n14\tax.set_xlabel(r'$\\epsilon_1$')\n15\tax.set_ylabel(r'$\\epsilon_2$')\n16\tax.set_zlabel('Infidelity')\n17\tax.set_zscale('log')\n18\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n19\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/47/target.png", "image_2": "modify_with_image/47/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 12-13 with:\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)", "Replace lines 10-19 with:\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n                color='magenta', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n                color='black', alpha=1,\n                rstride=100, cstride=100,\n                edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)", "Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)", "Replace lines 10-13 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_518", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tepsilon_1 = np.linspace(-0.2, 0.2, 100)\n5\tepsilon_2 = np.linspace(-0.2, 0.2, 100)\n6\tepsilon_1, epsilon_2 = np.meshgrid(epsilon_1, epsilon_2)\n7\tRS_GRAPE = np.log10(np.exp(epsilon_1**2 + epsilon_2**2) + 1e-4)\n8\tAdaptive_RS_GRAPE = np.log10(np.exp(-0.5 * (epsilon_1**2 + epsilon_2**2)) + 1e-4)\n9\tAdaptive_RS_GRAPE_shifted = Adaptive_RS_GRAPE + 0.03\n10\tfig = plt.figure(figsize=(10, 8))\n11\tax = fig.add_subplot(111, projection='3d')\n12\tax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE,\n13\t                color='magenta', alpha=1,\n14\t                rstride=100, cstride=100,\n15\t                edgecolor='k', linewidth=0.5)\n16\tax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted,\n17\t                color='black', alpha=1,\n18\t                rstride=100, cstride=100,\n19\t                edgecolor='k', linewidth=0.5)\n20\tax.set_xlabel(r'$\\epsilon_1$')\n21\tax.set_ylabel(r'$\\epsilon_2$')\n22\tax.set_zlabel('Infidelity')\n23\tax.set_zscale('log')\n24\tax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\n25\tax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')\n26\tax.xaxis.pane.fill = False\n27\tax.yaxis.pane.fill = False\n28\tax.zaxis.pane.fill = False\n29\tax.xaxis.pane.set_edgecolor('black')\n30\tax.yaxis.pane.set_edgecolor('black')\n31\tax.zaxis.pane.set_edgecolor('black')\n32\tax.xaxis.pane.set_linewidth(1.0)\n33\tax.yaxis.pane.set_linewidth(1.0)\n34\tax.zaxis.pane.set_linewidth(1.0)\n35\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/48/target.png", "image_2": "modify_with_image/48/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=100, cstride=100, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')", "Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nAdaptive_RS_GRAPE_masked = np.where(mask_black_above, Adaptive_RS_GRAPE_shifted, np.nan)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_masked, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')", "Replace lines 10-34 with:\nmask_black_above = Adaptive_RS_GRAPE_shifted > RS_GRAPE\nRS_GRAPE_masked = np.where(mask_black_above, np.nan, RS_GRAPE)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE_masked, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')", "Replace lines 10-34 with:\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(epsilon_1, epsilon_2, RS_GRAPE, color='magenta', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.plot_surface(epsilon_1, epsilon_2, Adaptive_RS_GRAPE_shifted, color='black', alpha=1, rstride=1, cstride=1, edgecolor='k', linewidth=0.5)\nax.set_xlabel(r'$\\epsilon_1$')\nax.set_ylabel(r'$\\epsilon_2$')\nax.set_zlabel('Infidelity')\nax.set_zscale('log')\nax.text(0.1, 0.2, 0.00015, 'RS GRAPE', color='black')\nax.text(-0.1, -0.2, 0.0001, 'Adaptive RS GRAPE', color='black')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_519", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/49/target.png", "image_2": "modify_with_image/49/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 11 with:\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)", "Replace line 9 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),", "Replace lines 11-20 with:\nax.fill_between([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(0, 35)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 20))\nax.spines['bottom'].set_position(('outward', 20))", "Replace lines 7-11 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))\nax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_520", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots()\n3\ty_positions = [4, 3, 2, 1, 0]\n4\tlower_limits = [0, 0, 0, 5, 5]\n5\tupper_limits = [7, 10, 20, 25, 10]\n6\tcolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\n7\tfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n8\t    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n9\t    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n10\t                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\n11\tax.fill_betweenx([0, 35], -0.5, 1.5, color=\"gray\", alpha=0.5)\n12\tax.set_yticks(y_positions)\n13\tax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\n14\tax.set_xlim(0, 35)\n15\tax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\n16\tax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\n17\tax.spines['top'].set_visible(False)\n18\tax.spines['right'].set_visible(False)\n19\tax.spines['left'].set_position(('outward', 10))\n20\tax.spines['bottom'].set_position(('outward', 10))\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/50/target.png", "image_2": "modify_with_image/50/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 2-20 with:\nplt.style.use('ggplot')\nfig, ax = plt.subplots(figsize=(8, 5))\ny_positions = [4, 3, 2, 1, 0]\nlower_limits = [0, 0, 0, 5, 5]\nupper_limits = [7, 10, 20, 25, 10]\ncolors = [\"black\", \"black\", \"black\", \"red\", \"red\"]\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 4.5], -0.5, 1.5, color=\"gray\", alpha=0.3)\nax.set_yticks(y_positions)\nax.set_yticklabels([\"Planck + SPT 2-pt\", \"SPTpol 150 GHz\", \"BK14 150 GHz\", \"150 GHz only\", \"95 GHz only\"])\nax.set_xlim(-1, 30)\nax.set_xlabel(r\"95\\% C.L. upper limit on $B_{1\\mathrm{Mpc}}$\")\nax.xaxis.set_major_formatter(plt.FuncFormatter(lambda val, pos: f'{int(val):d}'))\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines['left'].set_position(('outward', 15))\nax.spines['bottom'].set_position(('outward', 15))\nplt.tight_layout()", "Replace lines 9-11 with:\n    ax.annotate('', xy=(lower, y_positions[i]), xytext=(upper, y_positions[i]),\n                arrowprops=dict(arrowstyle='<-', lw=3, color=color))\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)", "Replace line 11 with:\nax.fill_betweenx([-0.5, 1.5], 0, 35, color=\"gray\", alpha=0.5)", "Replace lines 7-10 with:\narrow_style = dict(arrowstyle=\"->\", lw=2, color='black')\nfor i, (lower, upper, color) in enumerate(zip(lower_limits, upper_limits, colors)):\n    ax.plot([lower, upper], [y_positions[i], y_positions[i]], color=color, lw=3)\n    ax.annotate('', xy=(upper, y_positions[i]), xytext=(lower, y_positions[i]),\n                arrowprops=dict(arrowstyle='->', lw=3, color=color))"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_521", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/51/target.png", "image_2": "modify_with_image/51/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 13-23 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)", "Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)", "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)", "Replace lines 7-23 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\nax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\nax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\nax.set_xlabel('Time')\nax.set_ylabel('Day')\nax.set_xticks(np.arange(0, 25, 6))\nax.set_yticks(days)\nax.set_yticklabels(days)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_522", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdays = np.arange(0, 13)\n4\tblue_dots = np.array([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15])\n5\tred_dots = np.array([18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18])\n6\tfig, ax = plt.subplots(figsize=(6, 8))\n7\tfor i in range(len(days)):\n8\t    for j in range(0, 24, 6):\n9\t        color = 'black' if (j // 6) % 2 == 0 else 'gray'\n10\t        ax.hlines(y=i, xmin=j, xmax=j+6, color=color, linestyle='-', linewidth=2)\n11\tfor i in range(len(days)):\n12\t    for j in range(0, 24, 6):\n13\t        facecolor = 'yellow' if (i + (j // 6)) % 2 == 1 else 'lightyellow'\n14\t        ax.axvspan(i-0.5, i+0.5, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)\n15\t        ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)\n16\tax.scatter(blue_dots, days, color='blue', label='Blue Dots', zorder=5)\n17\tax.scatter(red_dots, days, color='red', label='Red Dots', zorder=5)\n18\tax.set_xlabel('Time')\n19\tax.set_ylabel('Day')\n20\tax.set_xticks(np.arange(0, 25, 6))\n21\tax.set_yticks(days)\n22\tax.set_yticklabels(days)\n23\tax.grid(True, which='both', axis='x', linestyle='--', color='gray')\n24\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/52/target.png", "image_2": "modify_with_image/52/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 7-15 with:\nline_colors = ['black', 'gray']\nfor i in range(len(days)):\n    ax.hlines(y=i, xmin=0, xmax=24, color=line_colors[i % 2], linestyle='-', linewidth=2)\nfor i in range(len(days)):\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)", "Replace lines 13-14 with:\n        facecolor = 'yellow' if (i + (j // 6)) % 2 == 0 else 'lightyellow'\n        ax.axvspan(j, j+6, ymin=(i-0.5)/len(days), ymax=(i+0.5)/len(days), facecolor=facecolor, alpha=0.5)", "Remove line 23", "Replace lines 12-15 with:\n    ax.axhspan(i - 0.5, i + 0.5, facecolor='yellow', alpha=0.5 if i % 2 == 0 else 0.25)\n    ax.axhspan(i - 0.5, i + 0.5, xmin=6/24, xmax=18/24, facecolor='gray', alpha=0.5)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_523", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 2))\n7\tax.set_yticks(np.arange(0, 11, 2))\n8\tax.grid(True, which='major', color='red', linewidth=2)\n9\tax.set_xticks(np.arange(2, 9, 1))\n10\tax.set_yticks(np.arange(2, 9, 1))\n11\tax.grid(True, which='minor', color='blue', linewidth=2)\n12\tmain_diag = np.linspace(0, 10, 100)\n13\tax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\n14\tax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\n15\tsolution_x = np.linspace(0, 10, 100)\n16\tsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\n17\tax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\n18\tax.set_xlabel('Query', fontsize=12)\n19\tax.set_ylabel('Reference', fontsize=12)\n20\tax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n21\tax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\n22\tax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/53/target.png", "image_2": "modify_with_image/53/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 8-11 with:\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)", "Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)", "Replace lines 6-22 with:\nax.set_xticks(np.arange(0, 11, 1))\nax.set_yticks(np.arange(0, 11, 1))\nax.grid(True, color=\"blue\", linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', zorder=1)\nax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\nax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 6-17 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_524", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tax.set_xlim(0, 10)\n5\tax.set_ylim(0, 10)\n6\tax.set_xticks(np.arange(0, 11, 1))\n7\tax.set_yticks(np.arange(0, 11, 1))\n8\tax.grid(True, color=\"blue\", linewidth=2)\n9\tmain_diag = np.linspace(0, 10, 100)\n10\tax.plot(main_diag, main_diag, color='lightgray', zorder=1)\n11\tax.fill_betweenx(main_diag, main_diag - 1, main_diag + 1, color='lightblue', alpha=0.5, zorder=0)\n12\tsolution_x = np.linspace(0, 10, 100)\n13\tsolution_y = main_diag + 0.5 * np.sin(2 * np.pi * solution_x / 3)\n14\tax.plot(solution_x, solution_y, color='red', linewidth=2, label='Solution')\n15\tax.set_xlabel('Query', fontsize=12)\n16\tax.set_ylabel('Reference', fontsize=12)\n17\tax.text(5, 7, 'Main diagonal', fontsize=10, rotation=45, color='gray')\n18\tax.text(7.5, 5, 'Solution Space', fontsize=10, rotation=0, color='black')\n19\tax.text(8, 3, 'Solution', fontsize=10, rotation=0, color='red')\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/54/target.png", "image_2": "modify_with_image/54/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=1, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=1, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=1, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=1, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=-1)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='blue', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='red', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 6-19 with:\nmain_diag = np.linspace(0, 10, 100)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nmajor_ticks = np.arange(0, 11, 2)\nax.set_xticks(major_ticks)\nax.set_yticks(major_ticks)\nax.tick_params(axis='both', which='both', length=0)\nax.vlines(major_ticks, ymin=0, ymax=10, colors='red', linewidth=2, zorder=0)\nax.hlines(major_ticks, xmin=0, xmax=10, colors='red', linewidth=2, zorder=0)\nminor_ticks = np.arange(2, 10, 1)\nax.vlines(minor_ticks, ymin=2, ymax=9, colors='blue', linewidth=2, zorder=0)\nax.hlines(minor_ticks, xmin=2, xmax=9, colors='blue', linewidth=2, zorder=0)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')", "Replace lines 6-19 with:\nax.set_xticks(np.arange(0, 11, 2))\nax.set_yticks(np.arange(0, 11, 2))\nax.grid(True, which='major', color='red', linewidth=2)\nax.set_xticks(np.arange(2, 9, 1))\nax.set_yticks(np.arange(2, 9, 1))\nax.grid(True, which='minor', color='blue', linewidth=2)\nmain_diag = np.linspace(0, 10, 100)\nax.plot(main_diag, main_diag, color='lightgray', linewidth=2, zorder=1)\nax.fill_betweenx(main_diag, main_diag - 2, main_diag + 2, color='lightblue', alpha=0.9, zorder=0)\nsolution_x = np.linspace(0, 10, 100)\nsolution_y = main_diag + 0.7 * np.sin(2 * np.pi * solution_x / 2.8)\nax.plot(solution_x, solution_y, color='red', linewidth=3, label='Solution')\nax.set_xlabel('Query', fontsize=12)\nax.set_ylabel('Reference', fontsize=12)\nax.text(4, 6, 'Main diagonal', fontsize=10, rotation=45, color='gray')\nax.text(7, 3.5, 'Solution Space', fontsize=10, rotation=0, color='black')\nax.text(8.5, 1.5, 'Solution', fontsize=10, rotation=0, color='red')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Gridline;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_525", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n12\ttheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\n13\twidth = 2 * np.pi / len(data[0])\n14\touter_radius = 1.5\n15\tsize = 0.3\n16\tfor i, ring_data in enumerate(data):\n17\t    radii = np.array(ring_data)\n18\t    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n19\t    outer_radius -= size\n20\tax.set_aspect('equal', 'box')\n21\tax.set_xticks([])\n22\tax.set_yticks([])\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/55/target.png", "image_2": "modify_with_image/55/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")", "Replace lines 11-22 with:\nfig, ax = plt.subplots(figsize=(6,6))\nsize = 0.3\nouter_radius = 1.5\nfor i in range(len(data)):\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n    outer_radius -= size\nax.set(aspect=\"equal\")", "Replace line 12 with:\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice", "Replace lines 3-18 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_526", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tdata = [\n4\t    [10, 20, 30, 40],\n5\t    [25, 35, 15, 25],\n6\t    [30, 20, 25, 25],\n7\t    [20, 30, 20, 30],\n8\t    [35, 25, 15, 25],\n9\t]\n10\tcolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\n11\tfig, ax = plt.subplots(figsize=(6,6))\n12\tsize = 0.3\n13\touter_radius = 1.5\n14\tfor i in range(len(data)):\n15\t    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, startangle=90, counterclock=False, wedgeprops=dict(width=size))\n16\t    outer_radius -= size\n17\tax.set(aspect=\"equal\")\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/56/target.png", "image_2": "modify_with_image/56/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 15 with:\n    wedges, _ = ax.pie(data[i], radius=outer_radius, colors=colors, wedgeprops=dict(width=size))", "Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False)\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])", "Replace lines 11-17 with:\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\ntheta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + np.pi / len(data[0])  # Shift by half a slice\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='white')\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])", "Replace lines 3-17 with:\nnp.random.seed(0)\ndata = [\n    [10, 20, 30, 40],\n    [25, 35, 15, 25],\n    [30, 20, 25, 25],\n    [20, 30, 20, 30],\n    [35, 25, 15, 25],\n]\ncolors = ['#7fcdbb', '#edf8b1', '#2c7fb8', '#feb24c']\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nwidth = 2 * np.pi / len(data[0])\nouter_radius = 1.5\nsize = 0.3\nfor i, ring_data in enumerate(data):\n    theta_offset = np.random.uniform(-0.2, 0.2)\n    theta = np.linspace(0.0, 2 * np.pi, len(data[0]), endpoint=False) + theta_offset\n    radii = np.array(ring_data)\n    bars = ax.bar(theta, radii, width=width, bottom=outer_radius - size, color=colors, edgecolor='black', alpha=0.8)\n    outer_radius -= size\nax.set_aspect('equal', 'box')\nax.set_xticks([])\nax.set_yticks([])"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Polar;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_527", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\tx = np.linspace(0, 1, 50)\n5\ty = np.linspace(0, np.sqrt(3)/2, 50)\n6\tX, Y = np.meshgrid(x, y)\n7\tmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\n8\tX_tri = X[mask]\n9\tY_tri = Y[mask]\n10\ttriang = tri.Triangulation(X_tri, Y_tri)\n11\tZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\n12\tplt.tricontourf(triang, Z, levels=12, cmap='viridis')\n13\tcorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\n14\ttriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\n15\trefiner = tri.UniformTriRefiner(triangle)\n16\ttrimesh = refiner.refine_triangulation(subdiv=4)\n17\tplt.triplot(trimesh, '--', color='black')\n18\tplt.gca().set_aspect('equal', adjustable='box')\n19\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/57/target.png", "image_2": "modify_with_image/57/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Remove lines 13-17", "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na = test_data[:, 0]\nb = test_data[:, 1]\nc = test_data[:, 2]\nv = test_data[:, -1]\nx = 0.5 * (2. * b + c) / (a + b + c)\ny = 0.5 * np.sqrt(3) * c / (a + b + c)\nT = tri.Triangulation(x, y)\nplt.figure()\nplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\nplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\nplt.triplot(T, 'k-', marker='x', markersize=8)", "Replace lines 4-18 with:\ntest_data = np.array([[0,0,1,0],\n                      [0,1,0,0],\n                      [1,0,0,0],\n                      [0.25,0.25,0.5,1],\n                      [0.25,0.5,0.25,1],\n                      [0.5,0.25,0.25,1]])\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')", "Replace lines 12-17 with:\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_528", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\timport matplotlib.tri as tri\n4\ttest_data = np.array([[0,0,1,0],\n5\t                      [0,1,0,0],\n6\t                      [1,0,0,0],\n7\t                      [0.25,0.25,0.5,1],\n8\t                      [0.25,0.5,0.25,1],\n9\t                      [0.5,0.25,0.25,1]])\n10\ta = test_data[:, 0]\n11\tb = test_data[:, 1]\n12\tc = test_data[:, 2]\n13\tv = test_data[:, -1]\n14\tx = 0.5 * (2. * b + c) / (a + b + c)\n15\ty = 0.5 * np.sqrt(3) * c / (a + b + c)\n16\tT = tri.Triangulation(x, y)\n17\tplt.figure()\n18\tplt.tricontourf(T, v, levels=14, cmap=\"viridis\")\n19\tplt.tricontour(T, v, levels=14, colors=\"black\", linewidths=0.5)\n20\tplt.triplot(T, 'k-', marker='x', markersize=8)\n21\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/58/target.png", "image_2": "modify_with_image/58/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='YlGnBu')\nplt.tricontour(triang, Z, levels=12, colors='blue')\nplt.scatter(X_tri, Y_tri, marker='x', color='blue')\nplt.gca().set_aspect('equal', adjustable='box')", "Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh,'--')", "Replace lines 10-20 with:\na=test_data[:,0]\nb=test_data[:,1]\nc=test_data[:,2]\nv = test_data[:,-1]\nx = 0.5 * ( 2.*b+c ) / ( a+b+c )\ny = 0.5*np.sqrt(3) * c / (a+b+c)\nT = tri.Triangulation(x,y)\nplt.tricontourf(x,y,T.triangles,v)\ncorners = np.array([[0, 0], [1, 0], [0.5,  np.sqrt(3)*0.5]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)", "Replace lines 4-20 with:\nx = np.linspace(0, 1, 50)\ny = np.linspace(0, np.sqrt(3)/2, 50)\nX, Y = np.meshgrid(x, y)\nmask = (Y < np.sqrt(3)/2 * (1 - X)) & (Y < np.sqrt(3)/2 * X)\nX_tri = X[mask]\nY_tri = Y[mask]\ntriang = tri.Triangulation(X_tri, Y_tri)\nZ = np.sin(5 * X_tri) * np.sin(5 * Y_tri)\nplt.tricontourf(triang, Z, levels=12, cmap='viridis')\ncorners = np.array([[0, 0], [1, 0], [0.5, np.sqrt(3)/2]])\ntriangle = tri.Triangulation(corners[:, 0], corners[:, 1])\nrefiner = tri.UniformTriRefiner(triangle)\ntrimesh = refiner.refine_triangulation(subdiv=4)\nplt.triplot(trimesh, '--', color='black')\nplt.gca().set_aspect('equal', adjustable='box')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_529", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(\n11\t    p1, p2, Z_modified,\n12\t    rstride=1, cstride=1,\n13\t    color='b', alpha=0.6,\n14\t    edgecolor='none'\n15\t)\n16\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n17\t    norm_z = (z - z_min) / (z_max - z_min)\n18\t    inv_norm_z = 1 - norm_z\n19\t    scaled_z = inv_norm_z ** contrast\n20\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n21\t    stride = int(round(stride))\n22\t    stride = max(min_stride, min(stride, max_stride))\n23\t    return stride\n24\tz_min = np.min(Z_modified)\n25\tz_max = np.max(Z_modified)\n26\tcontrast = 22.0\n27\tfor i in range(p1.shape[0]):\n28\t    z_row = Z_modified[i, :]\n29\t    avg_z = np.mean(z_row)\n30\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n31\t    indices = np.arange(0, p1.shape[1], current_stride)\n32\t    if indices[-1] != p1.shape[1] - 1:\n33\t        indices = np.append(indices, p1.shape[1] - 1)\n34\t    ax.plot(\n35\t        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n36\t        color='black', linewidth=0.5\n37\t    )\n38\tfor j in range(p2.shape[1]):\n39\t    z_col = Z_modified[:, j]\n40\t    avg_z = np.mean(z_col)\n41\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n42\t    indices = np.arange(0, p2.shape[0], current_stride)\n43\t    if indices[-1] != p2.shape[0] - 1:\n44\t        indices = np.append(indices, p2.shape[0] - 1)\n45\t    ax.plot(\n46\t        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n47\t        color='black', linewidth=0.5\n48\t    )\n49\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n50\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n51\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n52\tax.view_init(elev=30, azim=-45)\n53\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/59/target.png", "image_2": "modify_with_image/59/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 10-52 with:\nsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=45, azim=45)", "Replace lines 3-51 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')", "Replace lines 4-51 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')", "Replace lines 16-52 with:\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_530", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport numpy as np\n2\timport matplotlib.pyplot as plt\n3\tfrom mpl_toolkits.mplot3d import Axes3D\n4\tp1 = np.linspace(-5, 5, 100)\n5\tp2 = np.linspace(-5, 5, 100)\n6\tp1, p2 = np.meshgrid(p1, p2)\n7\tZ_modified = 4 - 2 * np.sqrt(p1**2 + p2**2) - (2 * p1**2)\n8\tfig = plt.figure(figsize=(10, 8))\n9\tax = fig.add_subplot(111, projection='3d')\n10\tsurface = ax.plot_surface(p1, p2, Z_modified, rstride=1, cstride=1, color='b', alpha=0.6, edgecolor='none')\n11\tdef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n12\t    norm_z = (z - z_min) / (z_max - z_min)\n13\t    inv_norm_z = 1 - norm_z\n14\t    scaled_z = inv_norm_z ** contrast\n15\t    stride = min_stride + scaled_z * (max_stride - min_stride)\n16\t    stride = int(round(stride))\n17\t    stride = max(min_stride, min(stride, max_stride))\n18\t    return stride\n19\tz_min = np.min(Z_modified)\n20\tz_max = np.max(Z_modified)\n21\tcontrast = 22.0\n22\tfor i in range(p1.shape[0]):\n23\t    z_row = Z_modified[i, :]\n24\t    avg_z = np.mean(z_row)\n25\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n26\t    indices = np.arange(0, p1.shape[1], current_stride)\n27\t    if indices[-1] != p1.shape[1] - 1:\n28\t        indices = np.append(indices, p1.shape[1] - 1)\n29\t    ax.plot(p1[i, indices], p2[i, indices], Z_modified[i, indices], color='black', linewidth=0.5)\n30\tfor j in range(p2.shape[1]):\n31\t    z_col = Z_modified[:, j]\n32\t    avg_z = np.mean(z_col)\n33\t    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n34\t    indices = np.arange(0, p2.shape[0], current_stride)\n35\t    if indices[-1] != p2.shape[0] - 1:\n36\t        indices = np.append(indices, p2.shape[0] - 1)\n37\t    ax.plot(p1[indices, j], p2[indices, j], Z_modified[indices, j], color='black', linewidth=0.5)\n38\tax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\n39\tax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\n40\tax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\n41\tax.view_init(elev=45, azim=45)\n42\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/60/target.png", "image_2": "modify_with_image/60/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-41 with:\np1_fine = np.linspace(0, 1, 30)\np2_fine = np.linspace(0, 1, 100)\np1_coarse = np.linspace(0, 1, 10)\np2_coarse = np.linspace(0, 1, 30)\np1_combined, p2_combined = np.meshgrid(np.concatenate([p1_fine, p1_coarse]), p2_fine)\nZ_combined = 4 - 2 * np.sqrt(p1_combined**2 + p2_combined**2) - (2 * p1_combined**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_combined, p2_combined, Z_combined, rstride=3, cstride=3, color='b', alpha=0.6, edgecolor='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)", "Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef determine_stride(z_avg):\n    if z_avg > 3:\n        return 1\n    elif z_avg > 2:\n        return 2\n    else:\n        return 4\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[i, ::stride], p2[i, ::stride], Z_modified[i, ::stride],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    stride = determine_stride(avg_z)\n    ax.plot(\n        p1[::stride, j], p2[::stride, j], Z_modified[::stride, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)\nplt.tight_layout()", "Replace lines 3-41 with:\nfrom mpl_toolkits.mplot3d.art3d import Line3DCollection\np1 = np.linspace(-2, 2, 50)\np2 = np.linspace(-2, 2, 50)\np1_grid, p2_grid = np.meshgrid(p1, p2)\nZ_modified = 4 - 2 * np.sqrt(p1_grid**2 + p2_grid**2) - (2 * p1_grid**2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(p1_grid, p2_grid, Z_modified, color='b', alpha=0.6, edgecolor='none')\nz_min = Z_modified.min()\nz_max = Z_modified.max()\ndensity_contrast = 2\ndef calculate_stride(z_value, z_min, z_max, min_stride=1, max_stride=5):\n    normalized_z = (z_value - z_min) / (z_max - z_min)\n    stride = min_stride + (1 - normalized_z**density_contrast) * (max_stride - min_stride)\n    return int(np.clip(stride, min_stride, max_stride))\nfor i in range(p1_grid.shape[1]):\n    z_column = Z_modified[:, i]\n    z_avg = np.mean(z_column)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if i % stride == 0:\n        ax.plot(p1_grid[:, i], p2_grid[:, i], Z_modified[:, i], color='black', linewidth=0.5)\nfor j in range(p2_grid.shape[0]):\n    z_row = Z_modified[j, :]\n    z_avg = np.mean(z_row)\n    stride = calculate_stride(z_avg, z_min, z_max)\n    if j % stride == 0:\n        ax.plot(p1_grid[j, :], p2_grid[j, :], Z_modified[j, :], color='black', linewidth=0.5)\nax.set_xlabel(r'$p^{12}_1(9)$')\nax.set_ylabel(r'$p^{13}_1(9)$')\nax.set_zlabel('Price Bound of $C_{3,10}$')\nax.view_init(elev=30, azim=-45)", "Replace lines 10-41 with:\nsurface = ax.plot_surface(\n    p1, p2, Z_modified,\n    rstride=1, cstride=1,\n    color='b', alpha=0.6,\n    edgecolor='none'\n)\ndef stride_from_z(z, z_min, z_max, min_stride=1, max_stride=10, contrast=1.0):\n    norm_z = (z - z_min) / (z_max - z_min)\n    inv_norm_z = 1 - norm_z\n    scaled_z = inv_norm_z ** contrast\n    stride = min_stride + scaled_z * (max_stride - min_stride)\n    stride = int(round(stride))\n    stride = max(min_stride, min(stride, max_stride))\n    return stride\nz_min = np.min(Z_modified)\nz_max = np.max(Z_modified)\ncontrast = 22.0\nfor i in range(p1.shape[0]):\n    z_row = Z_modified[i, :]\n    avg_z = np.mean(z_row)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p1.shape[1], current_stride)\n    if indices[-1] != p1.shape[1] - 1:\n        indices = np.append(indices, p1.shape[1] - 1)\n    ax.plot(\n        p1[i, indices], p2[i, indices], Z_modified[i, indices],\n        color='black', linewidth=0.5\n    )\nfor j in range(p2.shape[1]):\n    z_col = Z_modified[:, j]\n    avg_z = np.mean(z_col)\n    current_stride = stride_from_z(avg_z, z_min, z_max, min_stride=1, max_stride=10, contrast=contrast)\n    indices = np.arange(0, p2.shape[0], current_stride)\n    if indices[-1] != p2.shape[0] - 1:\n        indices = np.append(indices, p2.shape[0] - 1)\n    ax.plot(\n        p1[indices, j], p2[indices, j], Z_modified[indices, j],\n        color='black', linewidth=0.5\n    )\nax.set_xlabel(r'$p^{12}_1(9)$', fontsize=12, labelpad=10)\nax.set_ylabel(r'$p^{13}_1(9)$', fontsize=12, labelpad=10)\nax.set_zlabel('Price Bound of $C_{3,10}$', fontsize=12, labelpad=10)\nax.view_init(elev=30, azim=-45)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning;Gridline", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_531", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/61/target.png", "image_2": "modify_with_image/61/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)", "Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace line 18 with:\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_532", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tarchitectures = ['4-layer (256 neurons)', '4-layer (64 neurons)', '2-layer (64 neurons)', '2-layer (16 neurons)']\n4\tprices_tnn = [0.1105, 0.1025, 0.1000, 0.0950]\n5\tprices_dnn = [0.1095, 0.1030, 0.0975, 0.0940]\n6\terror_tnn = [0.001, 0.001, 0.0015, 0.002]\n7\terror_dnn = [0.001, 0.001, 0.0015, 0.002]\n8\tlongstaff_schwartz_price = 0.1075\n9\tfig, ax = plt.subplots()\n10\tx = np.arange(len(architectures))\n11\tax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN', capsize=5, capthick=2, elinewidth=1)\n12\tax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons', capsize=5, capthick=2, elinewidth=1)\n13\tax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\n14\tax.set_xticks(x)\n15\tax.set_xticklabels(architectures, rotation=45, ha='right')\n16\tax.set_ylabel('Price')\n17\tax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\n18\tax.legend()\n19\tplt.tight_layout()\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/62/target.png", "image_2": "modify_with_image/62/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-18 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0,2,1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace lines 11-18 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.axhline(longstaff_schwartz_price, color='black', linestyle='--', label='Longstaff-Schwartz Degree 2')\nax.set_xticks(x)\nax.set_xticklabels(architectures, rotation=45, ha='right')\nax.set_ylabel('Price')\nax.set_title('Bermudan Price in 1-Factor Model with K = 0.00')\nhandles, labels = ax.get_legend_handles_labels()\norder = [0, 2, 1]\nax.legend([handles[idx] for idx in order], [labels[idx] for idx in order])", "Replace lines 11-12 with:\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')", "Replace lines 11-12 with:\nax.errorbar(x, prices_tnn, yerr=error_tnn, fmt='o', color='red', label='TNN')\nax.errorbar(x, prices_dnn, yerr=error_dnn, fmt='o', color='green', label='DNN with same neurons')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_533", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5],\n6\t                              [1, 0, 2.8],\n7\t                              [-1, -1, 2.2],\n8\t                              [1, -1, 2.6],\n9\t                              [-1, 1, 2.7]])\n10\tfinal_position = np.array([0, 0, 0])\n11\thorizontal_window = np.array([[1, 1, 0],\n12\t                             [1, -1, 0],\n13\t                             [-1, -1, 0],\n14\t                             [-1, 1, 0]])\n15\tvertical_window = np.array([[0.5, 1, 2],\n16\t                            [-0.5, 1, 2],\n17\t                            [-0.5, 1, 1],\n18\t                            [0.5, 1, 1]])\n19\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n20\t        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n21\t        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n22\t        'b-', linewidth=3, label='Target (Horizontal Window)')\n23\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n24\t        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n25\t        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n26\t        'k-', linewidth=2, label='Window (Vertical)')\n27\tfor pos in initial_positions:\n28\t    ax.plot([pos[0], final_position[0]],\n29\t            [pos[1], final_position[1]],\n30\t            [pos[2], final_position[2]], 'r')\n31\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n32\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n33\tax.set_xlabel('x [m]')\n34\tax.set_ylabel('y [m]')\n35\tax.set_zlabel('-z [m]')\n36\tax.set_title('Quadrotor Trajectories with Windows')\n37\tax.legend()\n38\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/63/target.png", "image_2": "modify_with_image/63/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-32 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')", "Replace lines 5-37 with:\ninitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()\nax.xaxis.pane.fill = False\nax.yaxis.pane.fill = False\nax.zaxis.pane.fill = False\nax.xaxis.pane.set_edgecolor('black')\nax.yaxis.pane.set_edgecolor('black')\nax.zaxis.pane.set_edgecolor('black')\nax.xaxis.pane.set_linewidth(1.0)\nax.yaxis.pane.set_linewidth(1.0)\nax.zaxis.pane.set_linewidth(1.0)", "Replace lines 5-32 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')", "Replace lines 5-32 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_534", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig = plt.figure()\n4\tax = fig.add_subplot(111, projection='3d')\n5\tinitial_positions = np.array([[0, 1, 2.5], [1, 0, 2.8], [-1, -1, 2.2], [1, -1, 2.6], [-1, 1, 2.7]])\n6\tfinal_position = np.array([0, 0, 0])\n7\thorizontal_window = np.array([[1, 1, 0], [1, -1, 0], [-1, -1, 0], [-1, 1, 0]])\n8\tvertical_window = np.array([[0.5, 1, 2], [-0.5, 1, 2], [-0.5, 1, 1], [0.5, 1, 1]])\n9\tax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]], [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]], [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]], 'b-', linewidth=3, label='Target (Horizontal Window)')\n10\tax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]], [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]], [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]], 'k-', linewidth=2, label='Window (Vertical)')\n11\tfor pos in initial_positions:\n12\t    ax.plot([pos[0], final_position[0]], [pos[1], final_position[1]], [pos[2], final_position[2]], 'r')\n13\tax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\n14\tax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\n15\tax.set_xlabel('x [m]')\n16\tax.set_ylabel('y [m]')\n17\tax.set_zlabel('-z [m]')\n18\tax.set_title('Quadrotor Trajectories with Windows')\n19\tax.legend()\n20\tax.xaxis.pane.fill = False\n21\tax.yaxis.pane.fill = False\n22\tax.zaxis.pane.fill = False\n23\tax.xaxis.pane.set_edgecolor('black')\n24\tax.yaxis.pane.set_edgecolor('black')\n25\tax.zaxis.pane.set_edgecolor('black')\n26\tax.xaxis.pane.set_linewidth(1.0)\n27\tax.yaxis.pane.set_linewidth(1.0)\n28\tax.zaxis.pane.set_linewidth(1.0)\n29\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/64/target.png", "image_2": "modify_with_image/64/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 5-28 with:\nyz_window_blue = np.array([[0, 1.5, 2.5],\n                           [0, 1.5, 1.5],\n                           [0, -1.5, 1.5],\n                           [0, -1.5, 2.5]])\nxy_window_black = np.array([[1, 1, 0],\n                            [1, -1, 0],\n                            [-1, -1, 0],\n                            [-1, 1, 0]])\ninitial_positions = np.array([[0, 2, 3],\n                              [1, 2, 2.8],\n                              [-1, 2.5, 2.5],\n                              [1, -2, 3],\n                              [-1, -2.5, 2.7]])\nfinal_position = np.array([0, 0, 0])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([yz_window_blue[0][0], yz_window_blue[1][0], yz_window_blue[2][0], yz_window_blue[3][0], yz_window_blue[0][0]],\n        [yz_window_blue[0][1], yz_window_blue[1][1], yz_window_blue[2][1], yz_window_blue[3][1], yz_window_blue[0][1]],\n        [yz_window_blue[0][2], yz_window_blue[1][2], yz_window_blue[2][2], yz_window_blue[3][2], yz_window_blue[0][2]],\n        'b-', linewidth=3, label='Window on YZ plane')\nax.plot([xy_window_black[0][0], xy_window_black[1][0], xy_window_black[2][0], xy_window_black[3][0], xy_window_black[0][0]],\n        [xy_window_black[0][1], xy_window_black[1][1], xy_window_black[2][1], xy_window_black[3][1], xy_window_black[0][1]],\n        [xy_window_black[0][2], xy_window_black[1][2], xy_window_black[2][2], xy_window_black[3][2], xy_window_black[0][2]],\n        'k-', linewidth=2, label='Window on XY plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()", "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 2.5],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nhorizontal_window = np.array([[1, 1, 0],\n                             [1, -1, 0],\n                             [-1, -1, 0],\n                             [-1, 1, 0]])\nvertical_window = np.array([[0.5, 1, 2],\n                            [-0.5, 1, 2],\n                            [-0.5, 1, 1],\n                            [0.5, 1, 1]])\nax.plot([horizontal_window[0][0], horizontal_window[1][0], horizontal_window[2][0], horizontal_window[3][0], horizontal_window[0][0]],\n        [horizontal_window[0][1], horizontal_window[1][1], horizontal_window[2][1], horizontal_window[3][1], horizontal_window[0][1]],\n        [horizontal_window[0][2], horizontal_window[1][2], horizontal_window[2][2], horizontal_window[3][2], horizontal_window[0][2]],\n        'b-', linewidth=3, label='Target (Horizontal Window)')\nax.plot([vertical_window[0][0], vertical_window[1][0], vertical_window[2][0], vertical_window[3][0], vertical_window[0][0]],\n        [vertical_window[0][1], vertical_window[1][1], vertical_window[2][1], vertical_window[3][1], vertical_window[0][1]],\n        [vertical_window[0][2], vertical_window[1][2], vertical_window[2][2], vertical_window[3][2], vertical_window[0][2]],\n        'k-', linewidth=2, label='Window (Vertical)')\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()", "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 0, 2.5],\n                              [1, 1, 2.8],\n                              [-1, -1, 2.2],\n                              [1, -1, 2.6],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nwindow = np.array([[0.5, 0.5, 1],\n                   [0.5, -0.5, 1],\n                   [-0.5, -0.5, 1],\n                   [-0.5, 0.5, 1],\n                   [0.5, 0.5, 2],\n                   [0.5, -0.5, 2],\n                   [-0.5, -0.5, 2],\n                   [-0.5, 0.5, 2]])\ntarget = np.array([[1, 1, 0],\n                   [1, -1, 0],\n                   [-1, -1, 0],\n                   [-1, 1, 0]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([window[0][0], window[1][0], window[2][0], window[3][0], window[0][0]],\n        [window[0][1], window[1][1], window[2][1], window[3][1], window[0][1]],\n        [window[0][2], window[1][2], window[2][2], window[3][2], window[0][2]], 'k-', linewidth=2, label='Window')\nax.plot([target[0][0], target[1][0], target[2][0], target[3][0], target[0][0]],\n        [target[0][1], target[1][1], target[2][1], target[3][1], target[0][1]],\n        [target[0][2], target[1][2], target[2][2], target[3][2], target[0][2]], 'b-', linewidth=3, label='Target')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()", "Replace lines 5-28 with:\ninitial_positions = np.array([[0, 1, 3],\n                              [1, 0, 2.8],\n                              [-1, -1, 2.5],\n                              [1, -1, 3],\n                              [-1, 1, 2.7]])\nfinal_position = np.array([0, 0, 0])\nxy_window = np.array([[1, 1, 0],\n                      [1, -1, 0],\n                      [-1, -1, 0],\n                      [-1, 1, 0]])\nyz_window = np.array([[0, 1, 3],\n                      [0, 1, 1],\n                      [0, -1, 1],\n                      [0, -1, 3]])\nfor pos in initial_positions:\n    ax.plot([pos[0], final_position[0]],\n            [pos[1], final_position[1]],\n            [pos[2], final_position[2]], 'r')\nax.scatter(initial_positions[:, 0], initial_positions[:, 1], initial_positions[:, 2], c='b', marker='*', label='Initial position of quadrotor')\nax.scatter(final_position[0], final_position[1], final_position[2], c='black', marker='D', label='Final position of quadrotor')\nax.plot([xy_window[0][0], xy_window[1][0], xy_window[2][0], xy_window[3][0], xy_window[0][0]],\n        [xy_window[0][1], xy_window[1][1], xy_window[2][1], xy_window[3][1], xy_window[0][1]],\n        [xy_window[0][2], xy_window[1][2], xy_window[2][2], xy_window[3][2], xy_window[0][2]],\n        'b-', linewidth=3, label='Window on XY plane')\nax.plot([yz_window[0][0], yz_window[1][0], yz_window[2][0], yz_window[3][0], yz_window[0][0]],\n        [yz_window[0][1], yz_window[1][1], yz_window[2][1], yz_window[3][1], yz_window[0][1]],\n        [yz_window[0][2], yz_window[1][2], yz_window[2][2], yz_window[3][2], yz_window[0][2]],\n        'k-', linewidth=2, label='Window on YZ plane')\nax.set_xlabel('x [m]')\nax.set_ylabel('y [m]')\nax.set_zlabel('-z [m]')\nax.set_title('Quadrotor Trajectories with Windows')\nax.legend()"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_535", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\n31\tplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)\n32\tplt.gca().set_aspect('equal', adjustable='box')\n33\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/65/target.png", "image_2": "modify_with_image/65/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 21-27 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)", "Replace lines 30-31 with:\nlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\nax.legend(handles=legend_elements, loc='upper right', fontsize=12)", "Replace lines 26-27 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)", "Replace lines 23-27 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_536", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(6, 6))\n3\tgrid_size = 8\n4\tvoxel_mp1 = [(x, y) for x in range(grid_size) for y in range(grid_size)]\n5\tvoxel_mp2 = [(2, 1), (3, 1), (2, 2), (3, 2),\n6\t             (5, 4), (6, 4), (5, 5), (6, 5),\n7\t             (1, 6), (2, 6), (1, 7), (2, 7)]\n8\tfor x in range(grid_size):\n9\t    for y in range(grid_size):\n10\t        if (x, y) in voxel_mp2:\n11\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='brown'))\n12\t        else:\n13\t            ax.add_patch(plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor='lightblue'))\n14\tfor x, y in voxel_mp1:\n15\t    ax.plot(x + 0.5, y + 0.5, 'o', color='gold', markersize=8)\n16\tax.set_xlim(-1, grid_size)\n17\tax.set_ylim(-1, grid_size)\n18\tax.set_xticks([])\n19\tax.set_yticks([])\n20\tfor i in range(grid_size + 1):\n21\t    ax.plot([i - 0.5, i - 0.5], [-0.4, -0.6], color='goldenrod', lw=2)\n22\t    ax.plot([-0.4, -0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\n23\tfor i in range(grid_size + 1):\n24\t    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n25\t    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n26\tax.plot([0, grid_size - 0.5], [-0.5, -0.5], color='goldenrod', lw=2)\n27\tax.plot([-0.5, -0.5], [0, grid_size - 0.5], color='goldenrod', lw=2)\n28\tax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\n29\tax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\n30\tlegend_elements = [plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP1)', markersize=10, markerfacecolor='lightblue', markeredgecolor='black'),\n31\t                   plt.Line2D([0], [0], marker='s', color='w', label='Voxel (MP2)', markersize=10, markerfacecolor='brown', markeredgecolor='black')]\n32\tax.legend(handles=legend_elements, loc='upper right', fontsize=12)\n33\tplt.gca().set_aspect('equal', adjustable='box')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/66/target.png", "image_2": "modify_with_image/66/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 23-32 with:\n    ax.plot([i - 0.5, i - 0.5], [grid_size + 0.4, grid_size + 0.6], color='goldenrod', lw=2)\n    ax.plot([grid_size + 0.4, grid_size + 0.6], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(i - 0.5, grid_size + 0.85, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(grid_size + 0.85, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)", "Replace lines 26-32 with:\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)", "Replace lines 30-32 with:\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)", "Replace lines 21-32 with:\n    ax.plot([i - 0.5, i - 0.5], [0 - 0.1, 0 + 0.1], color='goldenrod', lw=2)\n    ax.plot([-0.1, 0.1], [i - 0.5, i - 0.5], color='goldenrod', lw=2)\nfor i in range(grid_size + 1):\n    ax.text(i - 0.5, -0.25, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\n    ax.text(-0.25, i - 0.5, str(i), ha='center', va='center', fontsize=12, color='goldenrod')\nax.arrow(-0.5, -0.5, grid_size - 0.2, 0, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.arrow(-0.5, -0.5, 0, grid_size - 0.2, head_width=0.3, head_length=0.3, fc='goldenrod', ec='goldenrod', lw=2)\nax.text(grid_size / 2, -1.25, 's1', ha='center', va='center', fontsize=14, color='goldenrod')\nax.text(-1.25, grid_size / 2, 's2', ha='center', va='center', fontsize=14, color='goldenrod', rotation=90)\nplt.text(-0.5, -1.75, 'Voxel (MP1)', color='lightblue', fontsize=12)\nplt.text(2, -1.75, 'Voxel (MP2)', color='brown', fontsize=12)"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_537", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', '*', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/67/target.png", "image_2": "modify_with_image/67/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 6 with:\nhatches = ['o', '*', '.', '\\\\']", "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()", "Replace line 6 with:\nhatches = ['/', 'X', '|', '\\\\']", "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_538", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.patches import Patch\n5\tdata = [np.random.normal(0, 1, 10000) for _ in range(4)]\n6\thatches = ['/', 'X', '|', '\\\\']\n7\tlabels = [f'set {i}' for i in range(1, 5)]\n8\tbins = 30\n9\thist_data = [np.histogram(d, bins=bins)[0] for d in data]\n10\tbin_edges = np.histogram(data[0], bins=bins)[1]\n11\tbin_width = bin_edges[1] - bin_edges[0]\n12\tbin_centers = bin_edges[:-1] + bin_width / 2\n13\tbottom = np.zeros(bins)\n14\tfig, ax = plt.subplots(figsize=(10, 7))\n15\tfor i in range(4):\n16\t    ax.bar(\n17\t        bin_centers,\n18\t        hist_data[i],\n19\t        width=bin_width,\n20\t        bottom=bottom,\n21\t        edgecolor='black',\n22\t        label=labels[i],\n23\t        hatch=hatches[i],\n24\t        alpha=0.7\n25\t    )\n26\t    bottom += hist_data[i]\n27\tax.set_xlabel('x')\n28\tax.set_ylabel('Counts')\n29\tcolors = ['tab:blue', 'tab:orange', 'tab:green', 'tab:red']\n30\tlegend_patches = [Patch(facecolor=colors[i], edgecolor='black', hatch=hatches[i], label=labels[i], alpha=0.7) for i in range(4)]\n31\tax.legend(handles=legend_patches, title=\"Datasets\")\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/68/target.png", "image_2": "modify_with_image/68/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', '*', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()", "Replace line 6 with:\nhatches = ['/', '*', '|', '\\\\']", "Replace lines 4-31 with:\ndata = [np.random.normal(0, 1, 10000) for _ in range(4)]\nfig, ax = plt.subplots()\nhatches = ['/', 'X', '|', '']\nlabels = [f'set {i}' for i in range(4)]\nfor i in range(4):\n    ax.hist(data[i], bins=30, alpha=0.5, label=labels[i],\n            edgecolor='black', hatch=hatches[i], histtype='barstacked')\nax.set_xlabel('x')\nax.set_ylabel('counts')\nax.legend()", "Replace line 6 with:\nhatches = ['o', 'X', '.', '\\\\']"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Color & Texture;Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_539", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\tplt.tight_layout()\n9\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/69/target.png", "image_2": "modify_with_image/69/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))", "Insert the following between lines 7-8:\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(True)\n    ax.spines['left'].set_visible(True)", "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])", "Replace lines 6-7 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_540", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.linspace(0, 2 * np.pi, 100)\n4\ty = np.sin(x)\n5\tfig, axs = plt.subplots(2, 2)\n6\tfor ax in axs.flat:\n7\t    ax.plot(x, y)\n8\t    ax.spines['top'].set_visible(False)\n9\t    ax.spines['right'].set_visible(False)\n10\t    ax.spines['bottom'].set_visible(True)\n11\t    ax.spines['left'].set_visible(True)\n12\tplt.tight_layout()\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/70/target.png", "image_2": "modify_with_image/70/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_visible(False)\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])", "Remove lines 8-11", "Replace lines 10-11 with:\n    ax.spines['bottom'].set_position(('outward', 10))\n    ax.spines['left'].set_position(('outward', 10))", "Replace lines 6-11 with:\naxs[0, 0].plot(x, y)\naxs[0, 0].spines['top'].set_visible(False)\naxs[0, 0].spines['right'].set_visible(False)\naxs[0, 0].spines['bottom'].set_position(('outward', 10))\naxs[0, 0].spines['left'].set_position(('outward', 10))\naxs[0, 0].set_xticks([])\naxs[0, 1].plot(x, y)\naxs[0, 1].spines['top'].set_visible(False)\naxs[0, 1].spines['right'].set_visible(False)\naxs[0, 1].spines['bottom'].set_visible(False)\naxs[0, 1].spines['left'].set_visible(False)\naxs[0, 1].set_xticks([])\naxs[0, 1].set_yticks([])\naxs[1, 0].plot(x, y)\naxs[1, 0].spines['top'].set_visible(False)\naxs[1, 0].spines['right'].set_visible(False)\naxs[1, 0].spines['bottom'].set_position(('outward', 10))\naxs[1, 0].spines['left'].set_position(('outward', 10))\naxs[1, 1].plot(x, y)\naxs[1, 1].spines['top'].set_visible(False)\naxs[1, 1].spines['right'].set_visible(False)\naxs[1, 1].spines['bottom'].set_position(('outward', 10))\naxs[1, 1].spines['left'].set_visible(False)\naxs[1, 1].set_yticks([])"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_541", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def _gen_axes_spines(self):\n21\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n22\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n23\t            return {'polar': spine}\n24\t    register_projection(RadarAxes)\n25\t    return theta\n26\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n27\tvalues = {\n28\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n29\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n30\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n31\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n32\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n33\t}\n34\tnum_vars = len(labels)\n35\ttheta = radar_factory(num_vars, frame='polygon')\n36\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n37\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n38\tfor i, (factor, values_list) in enumerate(values.items()):\n39\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n40\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n41\tax.set_varlabels(labels)\n42\tax.set_rgrids([0.2, 0.4, 0.6, 0.8])\n43\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n44\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/71/target.png", "image_2": "modify_with_image/71/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 20-42 with:\n        def draw_polygon_grid(self, num_levels=4):\n            for level in np.linspace(0.2, 1.0, num_levels):\n                poly = RegularPolygon((0, 0), num_vars, radius=level,\n                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n                self.add_patch(poly)\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.draw_polygon_grid(num_levels=5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)", "Replace lines 39-43 with:\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')", "Replace lines 4-42 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)", "Replace lines 3-43 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_542", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import RegularPolygon\n4\tfrom matplotlib.projections import register_projection\n5\tfrom matplotlib.projections.polar import PolarAxes\n6\tfrom matplotlib.path import Path\n7\tfrom matplotlib.spines import Spine\n8\tfrom matplotlib.transforms import Affine2D\n9\tdef radar_factory(num_vars, frame='polygon'):\n10\t    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n11\t    class RadarAxes(PolarAxes):\n12\t        name = 'radar'\n13\t        def __init__(self, *args, **kwargs):\n14\t            super().__init__(*args, **kwargs)\n15\t            self.set_theta_zero_location('N')\n16\t        def set_varlabels(self, labels):\n17\t            self.set_thetagrids(np.degrees(theta), labels)\n18\t        def _gen_axes_patch(self):\n19\t            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n20\t        def draw_polygon_grid(self, num_levels=4):\n21\t            for level in np.linspace(0.2, 1.0, num_levels):\n22\t                poly = RegularPolygon((0, 0), num_vars, radius=level,\n23\t                                      orientation=np.pi / 2, edgecolor=\"grey\", fill=False, linestyle=\"dashed\")\n24\t                self.add_patch(poly)\n25\t        def _gen_axes_spines(self):\n26\t            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n27\t            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n28\t            return {'polar': spine}\n29\t    register_projection(RadarAxes)\n30\t    return theta\n31\tlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\n32\tvalues = {\n33\t    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n34\t    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n35\t    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n36\t    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n37\t    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n38\t}\n39\tnum_vars = len(labels)\n40\ttheta = radar_factory(num_vars, frame='polygon')\n41\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n42\tcolors = ['blue', 'red', 'green', 'purple', 'yellow']\n43\tax.draw_polygon_grid(num_levels=5)\n44\tfor i, (factor, values_list) in enumerate(values.items()):\n45\t    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n46\t    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\n47\tax.set_varlabels(labels)\n48\tax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1), fontsize='small')\n49\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/72/target.png", "image_2": "modify_with_image/72/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-48 with:\nfrom math import pi\nlabels = ['Sulfate', 'Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3']\nnum_vars = len(labels)\nvalues = {\n    \"Factor 1\": [0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 2\": [0.1, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 3\": [0.0, 0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nangles = [n / float(num_vars) * 2 * pi for n in range(num_vars)]\nangles += angles[:1]\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))\nax.set_rgrids([0.2, 0.4, 0.6, 0.8], angle=90)\nax.set_frame_on(False)\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    values_list += values_list[:1]\n    ax.plot(angles, values_list, color=colors[i], linewidth=2, linestyle='-', marker='o', label=factor)\n    ax.fill(angles, values_list, color=colors[i], alpha=0.25)\nax.set_xticks(angles[:-1])\nax.set_xticklabels(labels)\nax.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))\nax.yaxis.set_tick_params(width=0)\nfor spine in ax.spines.values():\n    spine.set_visible(False)", "Replace lines 20-47 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.25)\nax.set_varlabels(labels)\nax.set_rgrids([0.2, 0.4, 0.6, 0.8])", "Replace lines 4-43 with:\nfrom matplotlib.path import Path\nfrom matplotlib.projections import register_projection\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\ndef radar_factory(num_vars, frame='polygon'):\n    theta = np.linspace(0, 2 * np.pi, num_vars, endpoint=False)\n    class RadarAxes(PolarAxes):\n        name = 'radar'\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            self.set_theta_zero_location('N')\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n        def _gen_axes_patch(self):\n            return RegularPolygon((0.5, 0.5), num_vars, radius=0.5, edgecolor=\"k\")\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nax.yaxis.set_ticks([])\nfor level in np.linspace(0.2, 1.0, 5):\n    ax.plot(theta, [level] * num_vars, color='grey', linestyle='dashed', linewidth=0.5)\nfor angle in theta:\n    ax.plot([angle, angle], [0, 1], color='grey', linestyle='dashed', linewidth=0.5)", "Replace lines 20-48 with:\n        def _gen_axes_spines(self):\n            spine = Spine(axes=self, spine_type='circle', path=Path.unit_regular_polygon(num_vars))\n            spine.set_transform(Affine2D().scale(0.5).translate(0.5, 0.5) + self.transAxes)\n            return {'polar': spine}\n    register_projection(RadarAxes)\n    return theta\nlabels = ['Nitrate', 'EC', 'OC1', 'OC2', 'OC3', 'OP', 'CO', 'O3', 'Sulfate']\nvalues = {\n    \"Factor 1\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9],\n    \"Factor 2\": [0.8, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1],\n    \"Factor 3\": [0.0, 0.7, 0.2, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],\n    \"Factor 4\": [0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.4, 0.0],\n    \"Factor 5\": [0.0, 0.0, 0.0, 0.3, 0.4, 0.2, 0.0, 0.0, 0.0]\n}\nnum_vars = len(labels)\ntheta = radar_factory(num_vars, frame='polygon')\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\ncolors = ['blue', 'red', 'green', 'purple', 'yellow']\nfor i, (factor, values_list) in enumerate(values.items()):\n    ax.plot(theta, values_list, color=colors[i], linewidth=2, linestyle='--', label=factor)\n    ax.fill(theta, values_list, facecolor=colors[i], alpha=0.3)\nax.set_varlabels(labels)\nax.set_rgrids([0.1, 0.3, 0.5, 0.7, 0.9])\nax.legend(loc='upper left', bbox_to_anchor=(1.2, 1.2), fontsize='medium')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position;Polar", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_543", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib.colors as mcolors\n4\tdata = np.arange(2, 19)\n5\tcmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n6\tbounds = [2, 3, 7, 9, 15, 18]\n7\tnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n8\tsegments_per_ring = [6, 6, 4, 1]\n9\tcolors = []\n10\tstart = 0\n11\tfor segment_count in segments_per_ring:\n12\t    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n13\t    colors.append(ring_colors)\n14\t    start += segment_count\n15\tsizes = [[1] * count for count in segments_per_ring]\n16\tfig, ax = plt.subplots(figsize=(6, 6))\n17\tax.axis('equal')\n18\tradius = [1.5, 1.0, 0.5, 0.25]\n19\tfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n20\t    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n21\t                       wedgeprops=dict(width=0.3, edgecolor='white'))\n22\tsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\n23\tsm.set_array([])\n24\tcbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\n25\tcbar.set_label(\"Discrete intervals, some other units\")\n26\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/73/target.png", "image_2": "modify_with_image/73/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)", "Replace lines 20-24 with:\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)", "Replace lines 3-25 with:\nimport matplotlib as mpl\ndata = np.arange(2, 19)\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\nax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\nax.grid(False)\ncmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\nradii = np.linspace(0.2, 1, 4)\nbold_segments = [3, 5, 6, 11, 12, 16]\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        segment_value = data[start + i]\n        color = cmap(norm(segment_value))\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\nfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n    n = stop - start\n    dtheta = 2 * np.pi / n\n    for i in range(n):\n        lw = 4 if (start + i + 1) in bold_segments else 2\n        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\nax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\nfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')", "Replace lines 18-24 with:\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_544", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\timport matplotlib as mpl\n4\tdata = np.arange(2, 19)\n5\tfig, ax = plt.subplots(figsize=(6, 6), subplot_kw={'projection': 'polar'})\n6\tax.set(ylim=[0, 1], xticklabels=[], yticklabels=[])\n7\tax.grid(False)\n8\tcmap = mpl.colors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\n9\tbounds = [2, 3, 7, 9, 15, 18]\n10\tnorm = mpl.colors.BoundaryNorm(bounds, cmap.N)\n11\tradii = np.linspace(0.2, 1, 4)\n12\tbold_segments = [3, 5, 6, 11, 12, 16]\n13\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1]), (16, 17, 0, radii[0])]:\n14\t    n = stop - start\n15\t    dtheta = 2 * np.pi / n\n16\t    for i in range(n):\n17\t        segment_value = data[start + i]\n18\t        color = cmap(norm(segment_value))\n19\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=color, edgecolor='black', linewidth=2)\n20\tfor (start, stop, r_in, r_out) in [(0, 6, radii[2], radii[3]), (6, 12, radii[1], radii[2]), (12, 16, radii[0], radii[1])]:\n21\t    n = stop - start\n22\t    dtheta = 2 * np.pi / n\n23\t    for i in range(n):\n24\t        lw = 4 if (start + i + 1) in bold_segments else 2\n25\t        ax.bar(i * dtheta + np.pi / 2, r_out - r_in, dtheta, r_in, color=\"none\", edgecolor=\"black\", linewidth=lw)\n26\tax.plot(np.linspace(0, 2 * np.pi), np.full_like(np.linspace(0, 2 * np.pi), radii[0]), \"k\", linewidth=(4 if 17 in bold_segments else 2))\n27\tfig.colorbar(mpl.cm.ScalarMappable(cmap=cmap, norm=norm), ax=ax, orientation='horizontal', pad=0.1, aspect=30, ticks=bounds).set_label('Discrete intervals, some other units')\n28\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/74/target.png", "image_2": "modify_with_image/74/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.4, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")", "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=90,\n                       wedgeprops=dict(width=0.5, edgecolor='black'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")", "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradius = [1.5, 1.0, 0.5, 0.25]\nfor ring_sizes, ring_colors, r in zip(sizes, colors, radius):\n    wedges, _ = ax.pie(ring_sizes, radius=r, colors=ring_colors, startangle=45,\n                       wedgeprops=dict(width=0.3, edgecolor='white'))\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.1, aspect=20, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")", "Replace lines 3-27 with:\nimport matplotlib.colors as mcolors\ndata = np.arange(2, 19)\ncmap = mcolors.ListedColormap(['#ff0000', '#008000', '#0000ff', '#00bfbf', '#a9a9a9'])\nbounds = [2, 3, 7, 9, 15, 18]\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\nsegments_per_ring = [6, 6, 4, 1]\ncolors = []\nstart = 0\nfor segment_count in segments_per_ring:\n    ring_colors = [cmap(norm(val)) for val in data[start:start + segment_count]]\n    colors.append(ring_colors)\n    start += segment_count\nsizes = [[1] * count for count in segments_per_ring]\nfig, ax = plt.subplots(figsize=(6, 6))\nax.axis('equal')\nradii = [1.5, 1.1, 0.7, 0.3]\nwidths = [0.4, 0.4, 0.4, 0.3]\nfor ring_sizes, ring_colors, r, w in zip(sizes, colors, radii, widths):\n    wedges, _ = ax.pie(\n        ring_sizes,\n        radius=r,\n        colors=ring_colors,\n        startangle=90,\n        wedgeprops=dict(width=w, edgecolor='black')\n    )\nsm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)\nsm.set_array([])\ncbar = fig.colorbar(sm, ax=ax, orientation='horizontal', pad=0.15, aspect=30, ticks=bounds)\ncbar.set_label(\"Discrete intervals, some other units\")"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Polar;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_545", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\n9\tplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\n10\tplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\n12\tplt.grid(True)\n13\tfor xi, yi1, yi2 in zip(x, y1, y2):\n14\t    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n15\t    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n16\t    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n17\t    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')\n18\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/75/target.png", "image_2": "modify_with_image/75/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)", "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')", "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')", "Replace lines 8-17 with:\nplt.plot(x, y1, label=\"y1\")\nplt.plot(x, y2, label=\"y2\")\nplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_546", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.sort(np.random.rand(20))\n5\ty1 = np.sin(2 * np.pi * x) ** 2\n6\ty2 = np.cos(2 * np.pi * x) ** 2\n7\tplt.figure()\n8\tplt.plot(x, y1, label=\"y1\")\n9\tplt.plot(x, y2, label=\"y2\")\n10\tplt.stem(x, y1, linefmt=\"C0-\", markerfmt=\"C0o\", basefmt=\" \")\n11\tplt.stem(x, y2, linefmt=\"C1-\", markerfmt=\"C1o\", basefmt=\" \")\n12\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/76/target.png", "image_2": "modify_with_image/76/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Insert the following between lines 11-12:\nplt.grid(False)\nplt.tick_params(axis='both', direction='in', length=5, width=1, colors='black', top=True, right=True)", "Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')", "Insert the following between lines 11-12:\nplt.grid(False)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.02], color='C0')\n    plt.plot([xi, xi], [0, 0.02], color='C1')\n    plt.plot([0, 0.02], [yi1, yi1], color='C0')\n    plt.plot([0, 0.02], [yi2, yi2], color='C1')\nfor xi in x:\n    plt.plot([xi, xi], [-0.02, 0], color='black')", "Replace lines 8-11 with:\nplt.plot(x, y1, label=\"y1\", linestyle='--', linewidth=2)\nplt.plot(x, y2, label=\"y2\", linestyle=':', linewidth=2)\nplt.stem(x, y1, linefmt=\"C0--\", markerfmt=\"C0s\", basefmt=\" \")\nplt.stem(x, y2, linefmt=\"C1--\", markerfmt=\"C1s\", basefmt=\" \")\nplt.grid(True)\nfor xi, yi1, yi2 in zip(x, y1, y2):\n    plt.plot([xi, xi], [0, 0.03], color='C0', linestyle='--')\n    plt.plot([xi, xi], [0, 0.03], color='C1', linestyle='--')\n    plt.plot([0, 0.03], [yi1, yi1], color='C0', linestyle='--')\n    plt.plot([0, 0.03], [yi2, yi2], color='C1', linestyle='--')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Axis & Scale;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_547", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfig, ax = plt.subplots()\n4\tgames = ['I', 'II', 'III', 'IV', 'V']\n5\tplayer_a_scores = [5, 15, 22, 20, 25]\n6\tplayer_b_scores = [25, 32, 34, 30, 27]\n7\tbar_width = 0.35\n8\tindex = np.arange(len(games))\n9\toffset = bar_width / 2\n10\tfor i, score in enumerate(player_a_scores):\n11\t    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\n12\tfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n13\t    height = b_score - a_score\n14\t    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\n15\tax.set_xlabel(\"Games\")\n16\tax.set_ylabel(\"Score\")\n17\tax.set_title(\"Scores by number of game and players\")\n18\tax.set_xticks(index)\n19\tax.set_xticklabels(games)\n20\tax.set_ylim(0, 60)\n21\tfor i, score in enumerate(player_a_scores):\n22\t    ax.annotate(f'{score}',\n23\t                xy=(index[i] - offset, score),\n24\t                xytext=(0, 3),\n25\t                textcoords=\"offset points\",\n26\t                ha='center', va='bottom')\n27\tfor i, b_score in enumerate(player_b_scores):\n28\t    ax.annotate(f'{b_score}',\n29\t                xy=(index[i] + offset, b_score),\n30\t                xytext=(0, 3),\n31\t                textcoords=\"offset points\",\n32\t                ha='center', va='bottom')\n33\tax.legend([\"Player A\", \"Player B\"], loc='upper right')\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/77/target.png", "image_2": "modify_with_image/77/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-33 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()", "Replace lines 3-33 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\nbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\nbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_title('Scores by number of game and players')\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.legend()\nfor rect in bar1:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\nfor rect in bar2:\n    height = rect.get_height()\n    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')", "Replace lines 3-33 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()", "Replace lines 3-14 with:\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\nfig, ax = plt.subplots()\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_548", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tgames = ['I', 'II', 'III', 'IV', 'V']\n4\tplayer_a_scores = [5, 15, 22, 20, 25]\n5\tplayer_b_scores = [25, 32, 34, 30, 27]\n6\tbar_width = 0.35\n7\tindex = np.arange(len(games))\n8\tfig, ax = plt.subplots()\n9\tbar1 = ax.bar(index - bar_width/2, player_a_scores, bar_width, label='Player A', color='white', edgecolor='black')\n10\tbar2 = ax.bar(index + bar_width/2, player_b_scores, bar_width, label='Player B', color='orange', edgecolor='black')\n11\tax.set_xlabel('Games')\n12\tax.set_ylabel('Score')\n13\tax.set_title('Scores by number of game and players')\n14\tax.set_xticks(index)\n15\tax.set_xticklabels(games)\n16\tax.legend()\n17\tfor rect in bar1:\n18\t    height = rect.get_height()\n19\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n20\tfor rect in bar2:\n21\t    height = rect.get_height()\n22\t    ax.text(rect.get_x() + rect.get_width() / 2.0, height, f'{int(height)}', ha='center', va='bottom')\n23\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/78/target.png", "image_2": "modify_with_image/78/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-22 with:\nfig, ax = plt.subplots()\ngames = ['I', 'II', 'III', 'IV', 'V']\nplayer_a_scores = [5, 15, 22, 20, 25]\nplayer_b_scores = [25, 32, 34, 30, 27]\nbar_width = 0.35\nindex = np.arange(len(games))\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, height, bar_width, bottom=a_score, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')", "Replace lines 3-22 with:\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\nvalues = np.array([playerA, playerB])\nx = np.arange(values.shape[1])\nspacing = 0.3\nwidth = (1 - spacing) / values.shape[0]\nheights0 = values[0]\nfor i, (heights, group_label) in enumerate(zip(values, ['Player A', 'Player B'])):\n    style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n    rects = ax.bar(x - spacing/2 + i * width, heights - heights0 if i != 0 else heights,\n                   width, bottom=heights0 if i != 0 else 0, label=group_label, **style)\n    for height, rect in zip(heights, rects):\n        ax.annotate(f'{height}', xy=(rect.get_x() + rect.get_width() / 2, height),\n                    xytext=(0, 4), textcoords='offset points', ha='center', va='bottom')\nax.set_xticks(x, labels=xlabels)\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()", "Replace lines 9-22 with:\noffset = bar_width / 2\nfor i, score in enumerate(player_a_scores):\n    ax.plot([index[i] - offset - bar_width/2, index[i] - offset + bar_width/2], [score, score], color='black', linewidth=2)\nfor i, (a_score, b_score) in enumerate(zip(player_a_scores, player_b_scores)):\n    height = b_score - a_score\n    ax.bar(index[i] + offset, b_score, bar_width, color='orange', edgecolor='black')\nax.set_xlabel(\"Games\")\nax.set_ylabel(\"Score\")\nax.set_title(\"Scores by number of game and players\")\nax.set_xticks(index)\nax.set_xticklabels(games)\nax.set_ylim(0, 60)\nfor i, score in enumerate(player_a_scores):\n    ax.annotate(f'{score}',\n                xy=(index[i] - offset, score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nfor i, b_score in enumerate(player_b_scores):\n    ax.annotate(f'{b_score}',\n                xy=(index[i] + offset, b_score),\n                xytext=(0, 3),\n                textcoords=\"offset points\",\n                ha='center', va='bottom')\nax.legend([\"Player A\", \"Player B\"], loc='upper right')", "Replace lines 3-22 with:\ndef custom(ax, xlabels, values, group_labels):\n    def label_bars(heights, rects):\n        for height, rect in zip(heights, rects):\n            ax.annotate(f'{height}',\n                        xy=(rect.get_x() + rect.get_width() / 2, height),\n                        xytext=(0, 4),\n                        textcoords='offset points',\n                        ha='center', va='bottom')\n    values = np.asarray(values)\n    x = np.arange(values.shape[1])\n    ax.set_xticks(x, labels=xlabels)\n    spacing = 0.3\n    width = (1 - spacing) / values.shape[0]\n    heights0 = values[0]\n    for i, (heights, group_label) in enumerate(zip(values, group_labels)):\n        style = {'fill': False} if i == 0 else {'edgecolor': 'black'}\n        rects = ax.bar(x - spacing/2 + i * width, heights - heights0,\n                       width, bottom=heights0, label=group_label, **style)\n        label_bars(heights, rects)\nxlabels = ['I', 'II', 'III', 'IV', 'V']\nplayerA = np.array([5, 15, 22, 20, 25])\nplayerB = np.array([25, 32, 34, 30, 27])\nfig, ax = plt.subplots()\ncustom(ax, xlabels, [playerA, playerB], ['Player A', 'Player B'])\nax.set_xlabel('Games')\nax.set_ylabel('Score')\nax.set_ylim(0, 60)\nax.set_title('Scores by number of game and players')\nax.legend()\nfig.tight_layout()"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_549", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\tfig, ax = plt.subplots(figsize=(12, 6))\n3\tax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\n4\tax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n5\t            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n6\t            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n7\tcategories = {\n8\t    \"ENVIRONMENT\": (0.25, 0.9),\n9\t    \"MATERIAL\": (0.4, 0.85),\n10\t    \"METHOD\": (0.55, 0.8),\n11\t    \"PEOPLE\": (0.25, 0.1),\n12\t    \"MEASUREMENT\": (0.4, 0.15),\n13\t    \"MACHINE\": (0.55, 0.2)\n14\t}\n15\tfor cat, (x, y) in categories.items():\n16\t    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n17\t                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n18\tcauses = {\n19\t    \"ENVIRONMENT\": [\"Bad conditions\"],\n20\t    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n21\t    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n22\t    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n23\t    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n24\t    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n25\t}\n26\tpositions = {\n27\t    \"ENVIRONMENT\": [(0.3, 0.8)],\n28\t    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n29\t    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n30\t    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n31\t    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n32\t    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n33\t}\n34\tfor cat, cause_list in causes.items():\n35\t    for i, cause in enumerate(cause_list):\n36\t        x_pos, y_pos = positions[cat][i]\n37\t        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n38\t                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n39\t                    fontsize=9, color=\"black\")\n40\tax.axis('off')\n41\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/79/target.png", "image_2": "modify_with_image/79/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 8-38 with:\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",", "Replace lines 1-40 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)", "Replace lines 4-40 with:\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')\nplt.tight_layout()", "Replace lines 2-40 with:\nimport numpy as np\nplt.figure(figsize=(15, 8))\nplt.style.use('default')\nplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\nplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\ncircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\nplt.gca().add_patch(circle)\nplt.gca().set_aspect('equal', adjustable='box')\ncategories = {\n    'ENVIRONMENT': (2, 8),\n    'MATERIAL': (5, 8),\n    'METHOD': (8, 8),\n    'PEOPLE': (2, 2),\n    'MEASUREMENT': (5, 2),\n    'MACHINE': (8, 2)\n}\ncauses = {\n    'ENVIRONMENT': ['Bad conditions'],\n    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n    'MACHINE': ['Faulty equipment', 'Compatibility']\n}\nfor category, (x, y) in categories.items():\n    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n    box_width = len(category) * 0.2 + 0.4\n    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n                        facecolor='tab:blue', edgecolor='black')\n    plt.gca().add_patch(rect)\n    plt.text(x, y, category, ha='center', va='center', color='white',\n             fontsize=8, fontweight='bold')\n    causes_list = causes[category]\n    spacing = 0.8\n    if y > 5:\n        for i, cause in enumerate(causes_list):\n            y_pos = y - 0.7 - i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\n    else:\n        for i, cause in enumerate(causes_list):\n            y_pos = y + 0.7 + i * spacing\n            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n                    fontsize=8)\nplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n         fontsize=8, fontweight='bold')\nplt.xlim(-1.2, 11.2)\nplt.ylim(0, 10)\nplt.axis('off')\nplt.gca().set_aspect('equal', adjustable='box')\nplt.tight_layout()"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_550", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tplt.figure(figsize=(15, 8))\n4\tplt.style.use('default')\n5\tplt.plot([-0.5, 10], [5, 5], 'b-', linewidth=1)\n6\tplt.fill([-1, -0.5, -0.5], [4.5, 5, 5.5], color='tab:blue')\n7\tcircle = plt.Circle((10, 5), 0.5, color='tab:blue', fill=True)\n8\tplt.gca().add_patch(circle)\n9\tplt.gca().set_aspect('equal', adjustable='box')\n10\tcategories = {\n11\t    'ENVIRONMENT': (2, 8),\n12\t    'MATERIAL': (5, 8),\n13\t    'METHOD': (8, 8),\n14\t    'PEOPLE': (2, 2),\n15\t    'MEASUREMENT': (5, 2),\n16\t    'MACHINE': (8, 2)\n17\t}\n18\tcauses = {\n19\t    'ENVIRONMENT': ['Bad conditions'],\n20\t    'MATERIAL': ['Shortage', 'Raw materials', 'Poor-quality input', 'Supplier'],\n21\t    'METHOD': ['Inefficient process', 'Cost', 'Time consumption', 'Procedures', 'Sampling'],\n22\t    'PEOPLE': ['Sales strategy', 'Labor shortage', 'Lack of training', 'Managers', 'Procedures'],\n23\t    'MEASUREMENT': ['Wrong measurements', 'Calibration', 'Performance'],\n24\t    'MACHINE': ['Faulty equipment', 'Compatibility']\n25\t}\n26\tfor category, (x, y) in categories.items():\n27\t    plt.plot([x, x], [y, 5], 'b-', linewidth=1)\n28\t    box_width = len(category) * 0.2 + 0.4\n29\t    rect = plt.Rectangle((x - box_width/2, y - 0.3), box_width, 0.6,\n30\t                        facecolor='tab:blue', edgecolor='black')\n31\t    plt.gca().add_patch(rect)\n32\t    plt.text(x, y, category, ha='center', va='center', color='white',\n33\t             fontsize=8, fontweight='bold')\n34\t    causes_list = causes[category]\n35\t    spacing = 0.8\n36\t    if y > 5:\n37\t        for i, cause in enumerate(causes_list):\n38\t            y_pos = y - 0.7 - i * spacing\n39\t            plt.plot([x - 0.3, x], [y_pos, y - 0.3], 'b-', linewidth=1)\n40\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n41\t                    fontsize=8)\n42\t    else:\n43\t        for i, cause in enumerate(causes_list):\n44\t            y_pos = y + 0.7 + i * spacing\n45\t            plt.plot([x - 0.3, x], [y_pos, y + 0.3], 'b-', linewidth=1)\n46\t            plt.text(x - 0.4, y_pos, cause, ha='right', va='center',\n47\t                    fontsize=8)\n48\tplt.text(10.6, 5, 'PROBLEM', ha='center', va='center', color='white',\n49\t         fontsize=8, fontweight='bold')\n50\tplt.xlim(-1.2, 11.2)\n51\tplt.ylim(0, 10)\n52\tplt.axis('off')\n53\tplt.gca().set_aspect('equal', adjustable='box')\n54\tplt.tight_layout()\n55\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/80/target.png", "image_2": "modify_with_image/80/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.25, 0.9),\n    \"MATERIAL\": (0.4, 0.85),\n    \"METHOD\": (0.55, 0.8),\n    \"PEOPLE\": (0.25, 0.1),\n    \"MEASUREMENT\": (0.4, 0.15),\n    \"MACHINE\": (0.55, 0.2)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.3, 0.8)],\n    \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)],\n    \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)],\n    \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)],\n    \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)],\n    \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\",\n                    fontsize=9, color=\"black\")\nax.axis('off')", "Replace lines 1-54 with:\nimport math\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon, Wedge\nfig, ax = plt.subplots(figsize=(10, 6), layout='constrained')\nax.set_xlim(-5, 5)\nax.set_ylim(-5, 5)\nax.axis('off')\ndef problems(data: str,\n             problem_x: float, problem_y: float,\n             angle_x: float, angle_y: float):\n    ax.annotate(str.upper(data), xy=(problem_x, problem_y),\n                xytext=(angle_x, angle_y),\n                fontsize=10,\n                color='white',\n                weight='bold',\n                xycoords='data',\n                verticalalignment='center',\n                horizontalalignment='center',\n                textcoords='offset fontsize',\n                arrowprops=dict(arrowstyle=\"->\", facecolor='black'),\n                bbox=dict(boxstyle='square',\n                          facecolor='tab:blue',\n                          pad=0.8))\ndef causes(data: list,\n           cause_x: float, cause_y: float,\n           cause_xytext=(-9, -0.3), top: bool = True):\n    for index, cause in enumerate(data):\n        coords = [[0.02, 0],\n                  [0.23, 0.5],\n                  [-0.46, -1],\n                  [0.69, 1.5],\n                  [-0.92, -2],\n                  [1.15, 2.5]]\n        cause_x -= coords[index][0]\n        cause_y += coords[index][1] if top else -coords[index][1]\n        ax.annotate(cause, xy=(cause_x, cause_y),\n                    horizontalalignment='center',\n                    xytext=cause_xytext,\n                    fontsize=9,\n                    xycoords='data',\n                    textcoords='offset fontsize',\n                    arrowprops=dict(arrowstyle=\"->\",\n                                    facecolor='black'))\ndef draw_body(data: dict):\n    length = (math.ceil(len(data) / 2)) - 1\n    draw_spine(-2 - length, 2 + length)\n    offset = 0\n    prob_section = [1.55, 0.8]\n    for index, problem in enumerate(data.values()):\n        plot_above = index % 2 == 0\n        cause_arrow_y = 1.7 if plot_above else -1.7\n        y_prob_angle = 16 if plot_above else -16\n        prob_arrow_x = prob_section[0] + length + offset\n        cause_arrow_x = prob_section[1] + length + offset\n        if not plot_above:\n            offset -= 2.5\n        if index > 5:\n            raise ValueError(f'Maximum number of problems is 6, you have entered '\n                             f'{len(data)}')\n        problems(list(data.keys())[index], prob_arrow_x, 0, -12, y_prob_angle)\n        causes(problem, cause_arrow_x, cause_arrow_y, top=plot_above)\ndef draw_spine(xmin: int, xmax: int):\n    ax.plot([xmin - 0.1, xmax], [0, 0], color='tab:blue', linewidth=2)\n    ax.text(xmax + 0.1, - 0.05, 'PROBLEM', fontsize=10,\n            weight='bold', color='white')\n    semicircle = Wedge((xmax, 0), 1, 270, 90, fc='tab:blue')\n    ax.add_patch(semicircle)\n    tail_pos = [[xmin - 0.8, 0.8], [xmin - 0.8, -0.8], [xmin, -0.01]]\n    triangle = Polygon(tail_pos, fc='tab:blue')\n    ax.add_patch(triangle)\ncategories = {\n    'Method': ['Time consumption', 'Cost', 'Procedures', 'Inefficient process',\n               'Sampling'],\n    'Machine': ['Faulty equipment', 'Compatibility'],\n    'Material': ['Poor-quality input', 'Raw materials', 'Supplier',\n                 'Shortage'],\n    'Measurement': ['Calibration', 'Performance', 'Wrong measurements'],\n    'Environment': ['Bad conditions'],\n    'People': ['Lack of training', 'Managers', 'Labor shortage',\n               'Procedures', 'Sales strategy']\n}\ndraw_body(categories)", "Replace lines 2-53 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5), va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\"ENVIRONMENT\": (0.25, 0.9), \"MATERIAL\": (0.4, 0.85), \"METHOD\": (0.55, 0.8), \"PEOPLE\": (0.25, 0.1), \"MEASUREMENT\": (0.4, 0.15), \"MACHINE\": (0.55, 0.2)}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\", bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\n    ax.plot([x, 0.5], [y, 0.5], color=\"steelblue\", lw=1)\ncauses = {\"ENVIRONMENT\": [\"Bad conditions\"], \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"], \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"], \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"], \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"], \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]}\npositions = {\"ENVIRONMENT\": [(0.3, 0.8)], \"MATERIAL\": [(0.45, 0.75), (0.45, 0.7), (0.45, 0.65), (0.45, 0.6)], \"METHOD\": [(0.6, 0.75), (0.6, 0.7), (0.6, 0.65), (0.6, 0.6), (0.6, 0.55)], \"PEOPLE\": [(0.3, 0.2), (0.3, 0.25), (0.3, 0.3), (0.3, 0.35), (0.3, 0.4)], \"MEASUREMENT\": [(0.45, 0.25), (0.45, 0.3), (0.45, 0.35)], \"MACHINE\": [(0.6, 0.25), (0.6, 0.3)]}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.05 if y_pos > 0.5 else x_pos + 0.05, y_pos), arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\" if y_pos > 0.5 else \"left\", fontsize=9, color=\"black\")\nax.axis('off')", "Replace lines 2-54 with:\nfig, ax = plt.subplots(figsize=(12, 6))\nax.plot([0.2, 0.8], [0.5, 0.5], color=\"steelblue\", lw=5)\nax.annotate(\"PROBLEM\", xy=(0.82, 0.5), xytext=(0.85, 0.5),\n            va=\"center\", ha=\"center\", fontsize=14, fontweight=\"bold\",\n            bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncategories = {\n    \"ENVIRONMENT\": (0.3, 0.85),\n    \"MATERIAL\": (0.45, 0.75),\n    \"METHOD\": (0.6, 0.7),\n    \"PEOPLE\": (0.3, 0.15),\n    \"MEASUREMENT\": (0.45, 0.25),\n    \"MACHINE\": (0.6, 0.3)\n}\nfor cat, (x, y) in categories.items():\n    ax.annotate(cat, xy=(x, y), ha=\"center\", va=\"center\", fontsize=10, fontweight=\"bold\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"tab:blue\", ec=\"black\", lw=1), color=\"white\")\ncauses = {\n    \"ENVIRONMENT\": [\"Bad conditions\"],\n    \"MATERIAL\": [\"Shortage\", \"Raw materials\", \"Poor-quality input\", \"Supplier\"],\n    \"METHOD\": [\"Inefficient process\", \"Cost\", \"Time consumption\", \"Procedures\", \"Sampling\"],\n    \"PEOPLE\": [\"Sales strategy\", \"Labor shortage\", \"Lack of training\", \"Managers\", \"Procedures\"],\n    \"MEASUREMENT\": [\"Wrong measurements\", \"Calibration\", \"Performance\"],\n    \"MACHINE\": [\"Faulty equipment\", \"Compatibility\"]\n}\npositions = {\n    \"ENVIRONMENT\": [(0.35, 0.75)],\n    \"MATERIAL\": [(0.5, 0.7), (0.5, 0.65), (0.5, 0.6), (0.5, 0.55)],\n    \"METHOD\": [(0.65, 0.65), (0.65, 0.6), (0.65, 0.55), (0.65, 0.5), (0.65, 0.45)],\n    \"PEOPLE\": [(0.35, 0.25), (0.35, 0.3), (0.35, 0.35), (0.35, 0.4), (0.35, 0.45)],\n    \"MEASUREMENT\": [(0.5, 0.35), (0.5, 0.4), (0.5, 0.45)],\n    \"MACHINE\": [(0.65, 0.35), (0.65, 0.4)]\n}\nfor cat, cause_list in causes.items():\n    for i, cause in enumerate(cause_list):\n        x_pos, y_pos = positions[cat][i]\n        ax.annotate(cause, xy=(x_pos, y_pos), xytext=(x_pos - 0.1, y_pos),\n                    arrowprops=dict(arrowstyle=\"->\", lw=1), va=\"center\", ha=\"right\",\n                    fontsize=9, color=\"black\")\nax.axis('off')"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Alignment, Orientation, & Position;Advanced Chart Type", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_551", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\timport numpy as np\n5\treleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n6\t            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n7\t            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n8\t            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n9\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n10\t         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n11\t         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n12\t         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n13\t         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n14\t         '2014-10-26', '2014-10-18', '2014-08-26']\n15\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n16\tplt.figure(figsize=(15, 8))\n17\tfig, ax = plt.subplots(figsize=(15, 8))\n18\tax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\n19\tfor i, (version, date) in enumerate(zip(releases, dates)):\n20\t    major_version = version.split('.')[0]\n21\t    if version.endswith('.0'):\n22\t        color = 'red'\n23\t        alpha = 1.0\n24\t        weight = 2\n25\t    else:\n26\t        color = 'red'\n27\t        alpha = 0.5\n28\t        weight = 1\n29\t    if i % 2 == 0:\n30\t        y_text = 0.1\n31\t        y_start = 0\n32\t        y_end = 0.08\n33\t    else:\n34\t        y_text = -0.1\n35\t        y_start = 0\n36\t        y_end = -0.08\n37\t    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n38\t    if y_text > 0:\n39\t        ax.text(date, y_text, version, ha='center', va='bottom')\n40\t    else:\n41\t        ax.text(date, y_text, version, ha='center', va='top')\n42\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n43\tax.xaxis.set_major_locator(mdates.YearLocator())\n44\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n45\tax.yaxis.set_visible(False)\n46\tax.set_ylim(-0.3, 0.3)\n47\tplt.grid(False)\n48\tax.spines['left'].set_visible(False)\n49\tax.spines['right'].set_visible(False)\n50\tax.spines['top'].set_visible(False)\n51\tplt.tight_layout()\n52\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/81/target.png", "image_2": "modify_with_image/81/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-46 with:\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\nversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(15, 4))\nax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(versions, dates)):\n    color = 'black' if not version.endswith('.0') else 'red'\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n    else:\n        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.15, 0.15)", "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)", "Replace lines 1-51 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)", "Replace lines 4-47 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_552", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport matplotlib.dates as mdates\n3\tfrom datetime import datetime\n4\tdates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10', '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16', '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07', '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09', '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16', '2014-10-26', '2014-10-18', '2014-08-26']\n5\tversions = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3', '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0', '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1', '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\n6\tdates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\n7\tfig, ax = plt.subplots(figsize=(15, 4))\n8\tax.scatter(dates, [0]*len(dates), c=['red' if v.endswith('.0') else 'white' for v in versions], edgecolor='black', s=50, zorder=2)\n9\tfor i, (version, date) in enumerate(zip(versions, dates)):\n10\t    color = 'black' if not version.endswith('.0') else 'red'\n11\t    if i % 2 == 0:\n12\t        y_text = 0.1\n13\t        y_start = 0\n14\t        y_end = 0.08\n15\t    else:\n16\t        y_text = -0.1\n17\t        y_start = 0\n18\t        y_end = -0.08\n19\t    ax.vlines(date, y_start, y_end, color=color, linewidth=1)\n20\t    if y_text > 0:\n21\t        ax.text(date, y_text, version, ha='center', va='bottom', fontsize=8)\n22\t    else:\n23\t        ax.text(date, y_text, version, ha='center', va='top', fontsize=8)\n24\tax.axhline(y=0, color='black', linewidth=1, zorder=1)\n25\tax.xaxis.set_major_locator(mdates.YearLocator())\n26\tax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\n27\tax.yaxis.set_visible(False)\n28\tax.set_ylim(-0.15, 0.15)\n29\tplt.grid(False)\n30\tax.spines['left'].set_visible(False)\n31\tax.spines['right'].set_visible(False)\n32\tax.spines['top'].set_visible(False)\n33\tplt.tight_layout()\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/82/target.png", "image_2": "modify_with_image/82/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nfig, ax = plt.subplots(figsize=(14, 6))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    ax.plot([date, date], [0, 0.8], color=\"brown\", linewidth=1)\n    ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"brown\", markersize=6)\n    ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)", "Replace lines 4-28 with:\nimport numpy as np\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(date, '%Y-%m-%d') for date in dates]\nplt.figure(figsize=(15, 8))\nfig, ax = plt.subplots(figsize=(15, 8))\nax.scatter(dates, [0]*len(dates), color='white', edgecolor='black', s=50, zorder=2)\nfor i, (version, date) in enumerate(zip(releases, dates)):\n    major_version = version.split('.')[0]\n    if version.endswith('.0'):\n        color = 'red'\n        alpha = 1.0\n        weight = 2\n    else:\n        color = 'red'\n        alpha = 0.5\n        weight = 1\n    if i % 2 == 0:\n        y_text = 0.1\n        y_start = 0\n        y_end = 0.08\n    else:\n        y_text = -0.1\n        y_start = 0\n        y_end = -0.08\n    ax.vlines(date, y_start, y_end, color=color, alpha=alpha, linewidth=weight)\n    if y_text > 0:\n        ax.text(date, y_text, version, ha='center', va='bottom')\n    else:\n        ax.text(date, y_text, version, ha='center', va='top')\nax.axhline(y=0, color='black', linewidth=1, zorder=1)\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))\nax.yaxis.set_visible(False)\nax.set_ylim(-0.3, 0.3)", "Replace lines 4-29 with:\nreleases = [\n    '2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n    '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n    '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n    '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0'\n]\ndates = [\n    '2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n    '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n    '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n    '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n    '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n    '2014-10-26', '2014-10-18', '2014-08-26'\n]\ndates = [datetime.strptime(date, \"%Y-%m-%d\") for date in dates]\nfig, ax = plt.subplots(figsize=(15, 5))\nax.axhline(0, color=\"black\", linewidth=1)\nfor i, (release, date) in enumerate(zip(releases, dates)):\n    if i % 2 == 0:\n        ax.plot([date, date], [0, 0.8], color=\"darkred\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"darkred\", markersize=6)\n        ax.text(date, 0.85, release, ha=\"center\", fontsize=8)\n    else:\n        ax.plot([date, date], [0, -0.8], color=\"saddlebrown\", linewidth=1)\n        ax.plot(date, 0, \"o\", color=\"white\", markeredgecolor=\"saddlebrown\", markersize=6)\n        ax.text(date, -0.9, release, ha=\"center\", fontsize=8)\nax.set_xlim(datetime(2014, 1, 1), datetime(2020, 1, 1))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_minor_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nplt.xticks(rotation=45)\nax.yaxis.set_visible(False)", "Replace lines 1-33 with:\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.dates as mdates\nreleases = ['2.2.4', '3.0.3', '3.0.2', '3.0.1', '3.0.0', '2.2.3',\n            '2.2.2', '2.2.1', '2.2.0', '2.1.2', '2.1.1', '2.1.0',\n            '2.0.2', '2.0.1', '2.0.0', '1.5.3', '1.5.2', '1.5.1',\n            '1.5.0', '1.4.3', '1.4.2', '1.4.1', '1.4.0']\ndates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',\n         '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',\n         '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',\n         '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',\n         '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',\n         '2014-10-26', '2014-10-18', '2014-08-26']\ndates = [datetime.strptime(d, \"%Y-%m-%d\") for d in dates]\ndates, releases = zip(*sorted(zip(dates, releases)))\nlevels = []\nmajor_minor_releases = sorted({release[:3] for release in releases})\nfor release in releases:\n    major_minor = release[:3]\n    bugfix = int(release[4])\n    h = 1 + 0.8 * (5 - bugfix)\n    level = h if major_minor_releases.index(major_minor) % 2 == 0 else -h\n    levels.append(level)\nfig, ax = plt.subplots(figsize=(8.8, 4), layout=\"constrained\")\ncolors = [\"tab:red\" if release.endswith(\".0\") else \"tab:red\" for release in releases]\nax.vlines(dates, 0, levels, color=colors, linewidth=0.5)\nax.axhline(0, c=\"black\")\nminor_dates = [date for date, release in zip(dates, releases) if release[-1] == '0']\nbugfix_dates = [date for date, release in zip(dates, releases) if release[-1] != '0']\nax.plot(bugfix_dates, np.zeros_like(bugfix_dates), \"ko\", mfc=\"white\")\nax.plot(minor_dates, np.zeros_like(minor_dates), \"ko\", mfc=\"tab:red\")\nfor date, level, release in zip(dates, levels, releases):\n    ax.annotate(release, xy=(date, level),\n                xytext=(-3, np.sign(level)*3), textcoords=\"offset points\",\n                verticalalignment=\"bottom\" if level > 0 else \"top\",\n                weight=\"bold\" if release.endswith(\".0\") else \"normal\",\n                bbox=dict(boxstyle='square', pad=0, lw=0, fc=(1, 1, 1, 0.7)))\nax.xaxis.set_major_locator(mdates.YearLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\nax.yaxis.set_visible(False)\nax.spines[[\"left\", \"top\", \"right\"]].set_visible(False)\nax.margins(y=0.1)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_553", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\tfrom mpl_toolkits.mplot3d import Axes3D\n2\timport matplotlib.pyplot as plt\n3\timport numpy as np\n4\tx = np.linspace(0, 80, 20)\n5\ty = np.linspace(0, 250, 20)\n6\tz = np.linspace(-450, 0, 20)\n7\tX, Z = np.meshgrid(x, z)\n8\tY, Z = np.meshgrid(y, z)\n9\tX2, Y2 = np.meshgrid(x, y)\n10\tZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\n11\tZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\n12\tZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\n13\tfig = plt.figure()\n14\tax = fig.add_subplot(111, projection='3d')\n15\txz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\n16\tyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\n17\txy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\n18\tcbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\n19\tax.set_xlabel(\"X [km]\")\n20\tax.set_ylabel(\"Y [km]\")\n21\tax.set_zlabel(\"Z [m]\")\n22\tax.set_xlim(0, 80)\n23\tax.set_ylim(0, 250)\n24\tax.set_zlim(-450, 0)\n25\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/83/target.png", "image_2": "modify_with_image/83/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)", "Replace lines 1-24 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()", "Replace lines 1-18 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)", "Replace lines 1-24 with:\nimport matplotlib.pyplot as plt\nimport numpy as np\nNx, Ny, Nz = 100, 300, 500\nX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\ndata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\nkw = {\n    'vmin': data.min(),\n    'vmax': data.max(),\n    'levels': np.linspace(data.min(), data.max(), 10),\n}\nfig = plt.figure(figsize=(5, 4))\nax = fig.add_subplot(111, projection='3d')\n_ = ax.contourf(\n    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n    zdir='z', offset=0, **kw\n)\nxmin, xmax = X.min(), X.max()\nymin, ymax = Y.min(), Y.max()\nzmin, zmax = Z.min(), Z.max()\nax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\nedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\nax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\nax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\nax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\nax.set(\n    xlabel='X [km]',\n    ylabel='Y [km]',\n    zlabel='Z [m]',\n    zticks=[0, -150, -300, -450],\n)\nax.view_init(40, -30, 0)\nax.set_box_aspect(None, zoom=0.9)\nfig.colorbar(C, ax=ax, pad=0.1)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_554", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tNx, Ny, Nz = 100, 300, 500\n4\tX, Y, Z = np.meshgrid(np.arange(Nx), np.arange(Ny), -np.arange(Nz))\n5\tdata = (((X+100)**2 + (Y-20)**2 + 2*Z)/1000+1)\n6\tkw = {\n7\t    'vmin': data.min(),\n8\t    'vmax': data.max(),\n9\t    'levels': np.linspace(data.min(), data.max(), 10),\n10\t}\n11\tfig = plt.figure(figsize=(5, 4))\n12\tax = fig.add_subplot(111, projection='3d')\n13\t_ = ax.contourf(\n14\t    X[:, :, 0], Y[:, :, 0], data[:, :, 0],\n15\t    zdir='z', offset=0, **kw\n16\t)\n17\txmin, xmax = X.min(), X.max()\n18\tymin, ymax = Y.min(), Y.max()\n19\tzmin, zmax = Z.min(), Z.max()\n20\tax.set(xlim=[xmin, xmax], ylim=[ymin, ymax], zlim=[zmin, zmax])\n21\tedges_kw = dict(color='0.4', linewidth=1, zorder=1e3)\n22\tax.plot([xmax, xmax], [ymin, ymax], 0, **edges_kw)\n23\tax.plot([xmin, xmax], [ymin, ymin], 0, **edges_kw)\n24\tax.plot([xmax, xmax], [ymin, ymin], [zmin, zmax], **edges_kw)\n25\tax.set(\n26\t    xlabel='X [km]',\n27\t    ylabel='Y [km]',\n28\t    zlabel='Z [m]',\n29\t    zticks=[0, -150, -300, -450],\n30\t)\n31\tax.view_init(40, -30, 0)\n32\tax.set_box_aspect(None, zoom=0.9)\n33\tfig.colorbar(C, ax=ax, pad=0.1)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/84/target.png", "image_2": "modify_with_image/84/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-33 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\ndef create_face_values(shape, gradient_direction):\n    if gradient_direction == 'y':\n        return np.linspace(10, 118.4, shape[1])[np.newaxis, :].repeat(shape[0], axis=0)\n    elif gradient_direction == 'const':\n        return np.full(shape, 10)\n    return np.full(shape, 10)\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Y = np.meshgrid(x, y)\nY, Z = np.meshgrid(y, z)\nX, Z = np.meshgrid(x, z)\nfig = plt.figure(figsize=(12, 10))\nax = fig.add_subplot(111, projection='3d')\nbottom = create_face_values((20, 20), 'y')\nsurf_bottom = ax.plot_surface(X, Y, -450*np.ones_like(X),\n                            facecolors=plt.cm.viridis((bottom-10)/(118.4-10)))\nback = create_face_values((20, 20), 'const')\nsurf_back = ax.plot_surface(X, 250*np.ones_like(X), Z,\n                           facecolors=plt.cm.viridis((back-10)/(118.4-10)))\nright = create_face_values((20, 20), 'y')\nsurf_right = ax.plot_surface(80*np.ones_like(Y), Y, Z,\n                            facecolors=plt.cm.viridis((right-10)/(118.4-10)))\nax.view_init(elev=20, azim=-45)\nax.set_xlabel('X [km]')\nax.set_ylabel('Y [km]')\nax.set_zlabel('Z [m]')\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)\nplt.colorbar(surf_right, ax=ax)\nplt.tight_layout()", "Insert the following between lines 15-16:\n)\n_ = ax.contourf(\n    X[0, :, :], data[0, :, :], Z[0, :, :],\n    zdir='y', offset=0, **kw\n)\nC = ax.contourf(\n    data[:, -1, :], Y[:, -1, :], Z[:, -1, :],\n    zdir='x', offset=X.max(), **kw", "Replace lines 1-33 with:\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nz = np.linspace(-450, 0, 20)\nX, Z = np.meshgrid(x, z)\nY, Z = np.meshgrid(y, z)\nX2, Y2 = np.meshgrid(x, y)\nZ_xz = 100 - 90 * np.exp(-((X - 50)**2 + Z**2) / (2 * 1000))\nZ_yz = 100 - 90 * np.exp(-((Y - 125)**2 + Z**2) / (2 * 1000))\nZ_xy = 100 - 90 * np.exp(-((X2 - 50)**2 + (Y2 - 125)**2) / (2 * 1000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nxz_surface = ax.contourf(X, Z, Z_xz, zdir='y', offset=0, cmap=\"viridis\", levels=20)\nyz_surface = ax.contourf(Y, Z, Z_yz, zdir='x', offset=100, cmap=\"viridis\", levels=20)\nxy_surface = ax.contourf(X2, Y2, Z_xy, zdir='z', offset=-450, cmap=\"viridis\", levels=20)\ncbar = fig.colorbar(xz_surface, ax=ax, shrink=0.5, aspect=5, label=\"Z [m]\")\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)", "Replace lines 3-33 with:\nx = np.linspace(0, 80, 20)\ny = np.linspace(0, 250, 20)\nX, Y = np.meshgrid(x, y)\nZ1 = 100 - 90 * np.exp(-((X - 50)**2 + (Y - 125)**2) / (2 * 5000))\nZ2 = 80 - 70 * np.exp(-((X - 40)**2 + (Y - 150)**2) / (2 * 5000))\nZ3 = 60 - 50 * np.exp(-((X - 30)**2 + (Y - 100)**2) / (2 * 5000))\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurf1 = ax.plot_surface(X, Y, -Z1, cmap=\"viridis\", edgecolor='none')\nsurf2 = ax.plot_surface(X, Y, -Z2 - 150, cmap=\"viridis\", edgecolor='none')\nsurf3 = ax.plot_surface(X, Y, -Z3 - 300, cmap=\"viridis\", edgecolor='none')\ncbar = fig.colorbar(surf1, ax=ax, shrink=0.5, aspect=5)\nax.set_xlabel(\"X [km]\")\nax.set_ylabel(\"Y [km]\")\nax.set_zlabel(\"Z [m]\")\nax.set_xlim(0, 80)\nax.set_ylim(0, 250)\nax.set_zlim(-450, 0)"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_555", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tfrom matplotlib.patches import ConnectionPatch\n4\tsizes = [56, 27, 17]\n5\tlabels = ['Disapprove', 'Approve', 'Undecided']\n6\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n7\texplode = (0.1, 0, 0)\n8\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n9\tage_sizes = [54, 33, 7, 6]\n10\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n11\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n12\tfig.subplots_adjust(wspace=0)\n13\tangle = -180 * sizes[1] / sum(sizes)\n14\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n15\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n16\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n17\tbottom = 1\n18\twidth = 0.2\n19\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n20\t    bottom -= height / 100\n21\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n22\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n23\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n24\tax2.axis('off')\n25\tax2.set_xlim(-2.5 * width, 2.5 * width)\n26\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n27\tcenter, r = wedges[1].center, wedges[1].r\n28\tbar_height = sum(age_sizes) / 100\n29\tx = r * np.cos(np.pi / 180 * theta2) + center[0]\n30\ty = r * np.sin(np.pi / 180 * theta2) + center[1]\n31\tcon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n32\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n33\tax2.add_artist(con)\n34\tx = r * np.cos(np.pi / 180 * theta1) + center[0]\n35\ty = r * np.sin(np.pi / 180 * theta1) + center[1]\n36\tcon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n37\t                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\n38\tax2.add_artist(con)\n39\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/85/target.png", "image_2": "modify_with_image/85/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)", "Replace lines 3-38 with:\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\ny_top = r * np.sin(np.pi / 180 * theta2) + center[1]\nax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\nx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\ny_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\nax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)", "Replace line 7 with:\nexplode = (0, 0.1, 0)", "Replace lines 7-37 with:\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')"], "answer": "C", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_556", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tsizes = [56, 27, 17]\n4\tlabels = ['Disapprove', 'Approve', 'Undecided']\n5\tcolors = ['#ff8c00', '#4682b4', '#32cd32']\n6\texplode = (0.1, 0, 0)\n7\tage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\n8\tage_sizes = [54, 33, 7, 6]\n9\tage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\n10\tfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\n11\tfig.subplots_adjust(wspace=0)\n12\tangle = -180 * sizes[1] / sum(sizes)\n13\twedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n14\t                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n15\t                     textprops={'fontsize': 10, 'weight': 'bold'})\n16\tbottom = 1\n17\twidth = 0.2\n18\tfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n19\t    bottom -= height / 100\n20\t    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n21\t    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\n22\tax2.set_title('Age of approvers', fontsize=10, weight='bold')\n23\tax2.axis('off')\n24\tax2.set_xlim(-2.5 * width, 2.5 * width)\n25\ttheta1, theta2 = wedges[1].theta1, wedges[1].theta2\n26\tcenter, r = wedges[1].center, wedges[1].r\n27\tbar_height = sum(age_sizes) / 100\n28\tx_top = r * np.cos(np.pi / 180 * theta2) + center[0]\n29\ty_top = r * np.sin(np.pi / 180 * theta2) + center[1]\n30\tax1.plot([x_top, 1.05], [y_top, bar_height], color=\"black\", linewidth=2)\n31\tx_bottom = r * np.cos(np.pi / 180 * theta1) + center[0]\n32\ty_bottom = r * np.sin(np.pi / 180 * theta1) + center[1]\n33\tax1.plot([x_bottom, 1.05], [y_bottom, 0], color=\"black\", linewidth=2)\n34\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/86/target.png", "image_2": "modify_with_image/86/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 6 with:\nexplode = (0, 0.1, 0)", "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0.1, 0.1)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 7))\nfig.subplots_adjust(wspace=0.1)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 2},\n                     textprops={'fontsize': 12, 'weight': 'bold'})\nbottom = 1\nwidth = 0.3\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color, edgecolor='black', linewidth=1.5)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center', fontsize=10, weight='bold')\nax2.set_title('Age of Approvers', fontsize=12, weight='bold')\nax2.axis('off')\nax2.set_xlim(-3 * width, 3 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"gray\", linewidth=2, linestyle='--')\nax2.add_artist(con)", "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0.1, 0, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)", "Replace lines 3-33 with:\nfrom matplotlib.patches import ConnectionPatch\nsizes = [56, 27, 17]\nlabels = ['Disapprove', 'Approve', 'Undecided']\ncolors = ['#ff8c00', '#4682b4', '#32cd32']\nexplode = (0, 0.1, 0)\nage_labels = ['Under 35', '35-49', '50-65', 'Over 65']\nage_sizes = [54, 33, 7, 6]\nage_colors = ['#336699', '#4682b4', '#87ceeb', '#d3d3d3']\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))\nfig.subplots_adjust(wspace=0)\nangle = -180 * sizes[1] / sum(sizes)\nwedges, *_ = ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=angle,\n                     colors=colors, explode=explode, wedgeprops={'edgecolor': 'black', 'linewidth': 1.5},\n                     textprops={'fontsize': 10, 'weight': 'bold'})\nbottom = 1\nwidth = 0.2\nfor i, (height, label, color) in enumerate(zip(age_sizes[::-1], age_labels[::-1], age_colors[::-1])):\n    bottom -= height / 100\n    bar = ax2.bar(0, height / 100, width, bottom=bottom, color=color)\n    ax2.bar_label(bar, labels=[f\"{height}%\"], label_type='center')\nax2.set_title('Age of approvers', fontsize=10, weight='bold')\nax2.axis('off')\nax2.set_xlim(-2.5 * width, 2.5 * width)\ntheta1, theta2 = wedges[1].theta1, wedges[1].theta2\ncenter, r = wedges[1].center, wedges[1].r\nbar_height = sum(age_sizes) / 100\nx = r * np.cos(np.pi / 180 * theta2) + center[0]\ny = r * np.sin(np.pi / 180 * theta2) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, bar_height), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)\nx = r * np.cos(np.pi / 180 * theta1) + center[0]\ny = r * np.sin(np.pi / 180 * theta1) + center[1]\ncon = ConnectionPatch(xyA=(-width / 2, 0), coordsA=ax2.transData,\n                      xyB=(x, y), coordsB=ax1.transData, color=\"black\", linewidth=2)\nax2.add_artist(con)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_557", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tx = np.arange(10)\n4\ty = np.arange(10)\n5\tX, Y = np.meshgrid(x, y)\n6\tZ1 = np.sin(X/2) + np.cos(Y/2)\n7\tZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\n8\tZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\n9\tfig = plt.figure()\n10\tax = fig.add_subplot(111, projection='3d')\n11\tax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\n12\tax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\n13\tax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\n14\tax.set_xlabel('x')\n15\tax.set_ylabel('y')\n16\tax.set_zlabel('z')\n17\tax.set_xlim(0, 9)\n18\tax.set_ylim(0, 9)\n19\tax.set_zlim(0, 5)\n20\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/87/target.png", "image_2": "modify_with_image/87/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=2, cstride=2, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=2, cstride=2, facecolors=plt.cm.plasma(Z3))", "Replace lines 11-13 with:\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))", "Replace lines 1-13 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')", "Replace lines 3-19 with:\nnp.random.seed(0)\nfrom matplotlib.colors import Normalize\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):\n    if norm is None:\n        norm = Normalize()\n    colors = plt.get_cmap(cmap)(norm(array))\n    if value_direction == 'x':\n        nz, ny = array.shape\n        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n        xi = np.full_like(yi, pos)\n    elif value_direction == 'y':\n        nx, nz = array.shape\n        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n        yi = np.full_like(zi, pos)\n    elif value_direction == 'z':\n        ny, nx = array.shape\n        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n        zi = np.full_like(xi, pos)\n    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\nfig = plt.figure()\nax = fig.add_subplot(projection='3d')\nax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\nnx, ny, nz = 8, 10, 5\ndata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\ndata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\ndata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\nshow(ax, data_xy)\nshow(ax, data_yz, value_direction='x')\nshow(ax, data_zx, value_direction='y', pos=ny)"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_558", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tfrom matplotlib.colors import Normalize\n5\tdef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"CMRmap\"):\n6\t    if norm is None:\n7\t        norm = Normalize()\n8\t    colors = plt.get_cmap(cmap)(norm(array))\n9\t    if value_direction == 'x':\n10\t        nz, ny = array.shape\n11\t        zi, yi = np.mgrid[0:nz + 1, 0:ny + 1]\n12\t        xi = np.full_like(yi, pos)\n13\t    elif value_direction == 'y':\n14\t        nx, nz = array.shape\n15\t        xi, zi = np.mgrid[0:nx + 1, 0:nz + 1]\n16\t        yi = np.full_like(zi, pos)\n17\t    elif value_direction == 'z':\n18\t        ny, nx = array.shape\n19\t        yi, xi = np.mgrid[0:ny + 1, 0:nx + 1]\n20\t        zi = np.full_like(xi, pos)\n21\t    ax.plot_surface(xi, yi, zi, rstride=1, cstride=1, facecolors=colors, shade=False)\n22\tfig = plt.figure()\n23\tax = fig.add_subplot(projection='3d')\n24\tax.set(xlabel=\"x\", ylabel=\"y\", zlabel=\"z\")\n25\tnx, ny, nz = 8, 10, 5\n26\tdata_xy = np.arange(ny * nx).reshape(ny, nx) + 15 * np.random.random((ny, nx))\n27\tdata_yz = np.arange(nz * ny).reshape(nz, ny) + 10 * np.random.random((nz, ny))\n28\tdata_zx = np.arange(nx * nz).reshape(nx, nz) + 8 * np.random.random((nx, nz))\n29\tshow(ax, data_xy)\n30\tshow(ax, data_yz, value_direction='x')\n31\tshow(ax, data_zx, value_direction='y', pos=ny)\n32\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/88/target.png", "image_2": "modify_with_image/88/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-31 with:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nx = np.linspace(0, 9, 10)\ny = np.linspace(0, 9, 10)\nX, Y = np.meshgrid(x, y)\nZ1 = X - Y\nZ2 = -X - Y\nZ3 = -X + Y\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nsurface = ax.plot_surface(X, Y, Z1, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z2, cmap='plasma')\nsurface = ax.plot_surface(X, Y, Z3, cmap='plasma')\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)", "Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1))\nax.plot_surface(X, np.zeros_like(Y), Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2))\nax.plot_surface(np.zeros_like(X), X, Y, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)", "Replace lines 3-31 with:\nx = np.arange(10)\ny = np.arange(10)\nX, Y = np.meshgrid(x, y)\nZ1 = np.sin(X/2) + np.cos(Y/2)\nZ2 = np.sin((X+1)/2) + np.cos((Y+1)/2)\nZ3 = np.sin((X+2)/2) + np.cos((Y+2)/2)\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot_surface(X, Y, np.zeros_like(Z1), rstride=1, cstride=1, facecolors=plt.cm.plasma(Z1/np.max(Z1)))\nax.plot_surface(X, Y, np.ones_like(Z2) * 3, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z2/np.max(Z2)))\nax.plot_surface(X, Y, np.ones_like(Z3) * 5, rstride=1, cstride=1, facecolors=plt.cm.plasma(Z3/np.max(Z3)))\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\nax.set_xlim(0, 9)\nax.set_ylim(0, 9)\nax.set_zlim(0, 5)", "Replace line 5 with:\ndef show(ax, array, value_direction='z', pos=0, norm=None, cmap=\"plasma\"):"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "3D;Data Reasoning", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_559", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\")\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/89/target.png", "image_2": "modify_with_image/89/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")", "Insert the following between lines 9-10:\naggregated_data.columns = aggregated_data.columns.droplevel()", "Replace line 14 with:\nplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)", "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_560", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n5\t    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n6\t    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n7\t}\n8\tgrouped = pd.DataFrame(data)\n9\taggregated_data = grouped.groupby(['month', 'other_details']).sum().unstack().fillna(0)\n10\tplt.figure(figsize=(10, 8))\n11\taggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\n12\tplt.xlabel(\"Month\")\n13\tplt.ylabel(\"Date Address To\")\n14\tplt.legend(title=\"Other Details\", bbox_to_anchor=(1, 1), fontsize='small', shadow=True)\n15\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/90/target.png", "image_2": "modify_with_image/90/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 14 with:\nplt.legend(title=\"Other Details\")", "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nstacked_data = grouped.pivot_table(index='month', columns='other_details', values='date_address_to', aggfunc='sum').fillna(0)\nplt.figure(figsize=(10, 8))\nbottom_values = [0] * len(stacked_data.index)\nfor detail in stacked_data.columns:\n    plt.bar(stacked_data.index, stacked_data[detail], bottom=bottom_values, label=detail)\n    bottom_values += stacked_data[detail]\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")", "Replace lines 10-14 with:\naggregated_data.columns = aggregated_data.columns.droplevel()\nplt.figure(figsize=(10, 8))\naggregated_data.plot(kind='bar', stacked=True, ax=plt.gca())\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")\nplt.legend(title=\"Other Details\")", "Replace lines 1-14 with:\nimport matplotlib.pyplot as plt\nimport pandas as pd\ndata = {\n    'other_details': ['Detail A', 'Detail B', 'Detail A', 'Detail B', 'Detail C', 'Detail C', 'Detail A', 'Detail B'],\n    'month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr'],\n    'date_address_to': [10, 15, 12, 18, 14, 20, 16, 22]\n}\ngrouped = pd.DataFrame(data)\nplt.figure(figsize=(10, 8))\nfor detail in grouped['other_details'].unique():\n    subset = grouped[grouped['other_details'] == detail]\n    plt.bar(subset['month'], subset['date_address_to'], label=detail)\nplt.legend(title='Other Details')\nplt.xlabel(\"Month\")\nplt.ylabel(\"Date Address To\")"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Advanced Chart Type;Legend;Alignment, Orientation, & Position", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_561", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/91/target.png", "image_2": "modify_with_image/91/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")", "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")", "Replace line 12 with:\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")", "Replace line 11 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_562", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport matplotlib.pyplot as plt\n2\timport numpy as np\n3\tnp.random.seed(0)\n4\tx = np.random.rand(50) * 100\n5\ty = np.random.rand(50) * 100\n6\tsizes = np.random.rand(50) * 1000\n7\tsize_legend = [100, 300, 600, 900]\n8\tplt.figure(figsize=(8, 6))\n9\tscatter = plt.scatter(x, y, s=sizes, alpha=0.6, edgecolors=\"w\", linewidth=0.5)\n10\tfor size in size_legend:\n11\t    plt.scatter([], [], s=size, color=\"#1f77b4\", edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\n12\tplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")\n13\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/92/target.png", "image_2": "modify_with_image/92/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 11 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')", "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")", "Replace line 12 with:\nplt.legend(shade=True, labelspacing=1, title=\"Point Sizes\", loc = \"lower right\")", "Replace lines 11-12 with:\n    plt.scatter([], [], s=size, color=\"#1f77b4\",edgecolors=\"w\", alpha=0.6, label=f'Size {size}')\nplt.legend(scatterpoints=1, frameon=True, labelspacing=1, title=\"Point Sizes\", loc=\"center right\")"], "answer": "D", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend;Color & Texture", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_563", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left')\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/93/target.png", "image_2": "modify_with_image/93/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='center right')", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))"], "answer": "B", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
{"pid": "coding_564", "question": "<image_1>\n<image_2>\n\nOur goal is to reproduce the visualization in the first image shown. The code snippet below currently does not accurately generate the target visualization. It instead generates the visualization in the second image.\n\n1\timport pandas as pd\n2\timport matplotlib.pyplot as plt\n3\tdata = {\n4\t    'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n5\t    'Credit': [120, 110, 150, 170, 130],\n6\t    'Cash': [80, 90, 60, 85, 95],\n7\t    'Online': [50, 60, 45, 55, 65]\n8\t}\n9\tdf = pd.DataFrame(data)\n10\tdf.set_index('Month', inplace=True)\n11\tdf.plot(kind='bar', stacked=True, figsize=(8, 6))\n12\tplt.xlabel('Month', fontsize=12, fontweight='bold')\n13\tplt.ylabel('Number of Payments', fontsize=12, fontweight='bold')\n14\tplt.title('Stacked Bar Chart of Payment Methods by Month', fontsize=14, fontweight='bold')\n15\tplt.legend(title='Payment Method', loc='upper left', bbox_to_anchor=(1.2, 0.5))\n16\tplt.tight_layout()\n17\tplt.show()\n\nWe are using Python version 3.11.0, matplotlib version 3.6.3, and seaborn version 0.12.2 (if applicable). What change should we apply to the original code in order to generate the target visualization?", "image_1": "modify_with_image/94/target.png", "image_2": "modify_with_image/94/original.png", "image_3": "", "image_4": "", "image_5": "", "options": ["Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right', bbox_to_anchor=(1.3, 0))", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='lower right')", "Replace line 15 with:\nplt.legend(title='Payment Method')", "Replace line 15 with:\nplt.legend(title='Payment Method', loc='upper left')"], "answer": "A", "solution": "", "subject": "Coding", "task": "Modify With Image", "category": "Legend", "source": "new_annotated", "type": "Multiple Choice", "context": ""}
